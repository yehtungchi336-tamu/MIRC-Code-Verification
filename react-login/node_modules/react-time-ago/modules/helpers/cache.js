var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A basic in-memory cache.
 *
 * import Cache from 'javascript-time-ago/Cache'
 * const cache = new Cache()
 * const object = cache.get('key1', 'key2', ...) || cache.put('key1', 'key2', ..., createObject())
 */
var Cache = function () {
	function Cache() {
		_classCallCheck(this, Cache);

		this.cache = {};
	}

	_createClass(Cache, [{
		key: 'get',
		value: function get() {
			var cache = this.cache;

			for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {
				keys[_key] = arguments[_key];
			}

			for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var key = _ref;

				if ((typeof cache === 'undefined' ? 'undefined' : _typeof(cache)) !== 'object') {
					return;
				}
				cache = cache[key];
			}
			return cache;
		}
	}, {
		key: 'put',
		value: function put() {
			for (var _len2 = arguments.length, keys = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				keys[_key2] = arguments[_key2];
			}

			var value = keys.pop();
			var lastKey = keys.pop();
			var cache = this.cache;
			for (var _iterator2 = keys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var key = _ref2;

				if (_typeof(cache[key]) !== 'object') {
					cache[key] = {};
				}
				cache = cache[key];
			}
			return cache[lastKey] = value;
		}
	}]);

	return Cache;
}();

export default Cache;
//# sourceMappingURL=cache.js.map