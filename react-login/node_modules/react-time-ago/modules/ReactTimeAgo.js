var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import TimeAgo from 'javascript-time-ago';

import createVerboseDateFormatter from './helpers/verboseDateFormatter';
import { getDate } from './helpers/date';
import Updater from './Updater';

import { style as styleType } from './PropTypes';

function ReactTimeAgo(_ref) {
	var date = _ref.date,
	    future = _ref.future,
	    timeStyle = _ref.timeStyle,
	    round = _ref.round,
	    minTimeLeft = _ref.minTimeLeft,
	    tooltip = _ref.tooltip,
	    Component = _ref.component,
	    container = _ref.container,
	    wrapperComponent = _ref.wrapperComponent,
	    wrapperProps = _ref.wrapperProps,
	    locale = _ref.locale,
	    locales = _ref.locales,
	    formatVerboseDate = _ref.formatVerboseDate,
	    verboseDateFormat = _ref.verboseDateFormat,
	    updateInterval = _ref.updateInterval,
	    tick = _ref.tick,
	    rest = _objectWithoutProperties(_ref, ['date', 'future', 'timeStyle', 'round', 'minTimeLeft', 'tooltip', 'component', 'container', 'wrapperComponent', 'wrapperProps', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']);

	// Get the list of preferred locales.
	var preferredLocales = useMemo(function () {
		// Convert `locale` to `locales`.
		if (locale) {
			locales = [locale];
		}
		// Add `javascript-time-ago` default locale.
		return locales.concat(TimeAgo.getDefaultLocale());
	}, [locale, locales]);

	// Create `javascript-time-ago` formatter instance.
	var timeAgo = useMemo(function () {
		return new TimeAgo(preferredLocales);
	}, [preferredLocales]);

	// The date or timestamp that was passed.
	// Convert timestamp to `Date`.
	date = useMemo(function () {
		return getDate(date);
	}, [date]);

	// Formats the `date`.
	var formatDate = useCallback(function () {
		var now = Date.now();
		var stopUpdates = void 0;
		if (future) {
			if (now >= date.getTime()) {
				now = date.getTime();
				stopUpdates = true;
			}
		}
		if (minTimeLeft !== undefined) {
			var maxNow = date.getTime() - minTimeLeft * 1000;
			if (now > maxNow) {
				now = maxNow;
				stopUpdates = true;
			}
		}

		var _timeAgo$format = timeAgo.format(date, timeStyle, {
			getTimeToNextUpdate: true,
			now: now,
			future: future,
			round: round
		}),
		    _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),
		    formattedDate = _timeAgo$format2[0],
		    timeToNextUpdate = _timeAgo$format2[1];

		if (stopUpdates) {
			timeToNextUpdate = INFINITY;
		} else {
			// Legacy compatibility: there used to be an `updateInterval` property.
			// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.
			// A default interval of one minute is introduced because
			// `getTimeToNextUpdate` feature may theoretically return `undefined`.
			timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.
		}
		return [formattedDate, now + timeToNextUpdate];
	}, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo]);

	var formatDateRef = useRef();
	formatDateRef.current = formatDate;

	var _useMemo = useMemo(formatDate, []),
	    _useMemo2 = _slicedToArray(_useMemo, 2),
	    _formattedDate = _useMemo2[0],
	    _nextUpdateTime = _useMemo2[1];

	var _useState = useState(_formattedDate),
	    _useState2 = _slicedToArray(_useState, 2),
	    formattedDate = _useState2[0],
	    setFormattedDate = _useState2[1];

	// The component sets the "verbose date" tooltip after the component 
	// has mounted rather than on the first render. 
	// The reason is that otherwise React would complain that 
	// server-side-rendered markup doesn't match client-side-rendered one.


	var _useState3 = useState(),
	    _useState4 = _slicedToArray(_useState3, 2),
	    shouldSetTooltipText = _useState4[0],
	    setShouldSetTooltipText = _useState4[1];

	var updater = useRef();

	useEffect(function () {
		if (tick) {
			updater.current = Updater.add({
				getNextValue: function getNextValue() {
					return formatDateRef.current();
				},
				setValue: setFormattedDate,
				nextUpdateTime: _nextUpdateTime
			});
			return function () {
				return updater.current.stop();
			};
		}
	}, [tick]);

	useEffect(function () {
		if (updater.current) {
			updater.current.forceUpdate();
		} else {
			var _formatDate = formatDate(),
			    _formatDate2 = _slicedToArray(_formatDate, 1),
			    _formattedDate2 = _formatDate2[0];

			setFormattedDate(_formattedDate2);
		}
	}, [formatDate]);

	useEffect(function () {
		setShouldSetTooltipText(true);
	}, []);

	// Create verbose date formatter for the tooltip text.
	// (only on client side, because tooltips aren't rendered 
	//  until triggered by user interaction)
	var verboseDateFormatter = useMemo(function () {
		if (typeof window !== 'undefined') {
			return createVerboseDateFormatter(preferredLocales, verboseDateFormat);
		}
	}, [preferredLocales, verboseDateFormat]);

	// Format verbose date for the tooltip.
	// (only on client side, because tooltips aren't rendered 
	//  until triggered by user interaction)
	var verboseDate = useMemo(function () {
		if (typeof window !== 'undefined') {
			if (formatVerboseDate) {
				return formatVerboseDate(date);
			}
			return verboseDateFormatter(date);
		}
	}, [date, formatVerboseDate, verboseDateFormatter]);

	var result = React.createElement(
		Component,
		_extends({
			date: date,
			verboseDate: shouldSetTooltipText ? verboseDate : undefined,
			tooltip: tooltip
		}, rest),
		formattedDate
	);

	var WrapperComponent = wrapperComponent || container;

	if (WrapperComponent) {
		return React.createElement(
			WrapperComponent,
			_extends({}, wrapperProps, {
				verboseDate: shouldSetTooltipText ? verboseDate : undefined }),
			result
		);
	}

	return result;
}

ReactTimeAgo.propTypes = {
	// The `date` or `timestamp`.
	// E.g. `new Date()` or `1355972400000`.
	date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,

	// Preferred locale.
	// Is 'en' by default.
	// E.g. 'ru-RU'.
	locale: PropTypes.string,

	// Alternatively to `locale`, one could pass `locales`:
	// A list of preferred locales (ordered).
	// Will choose the first supported locale from the list.
	// E.g. `['ru-RU', 'en-GB']`.
	locales: PropTypes.arrayOf(PropTypes.string),

	// If set to `true`, then will stop at "zero point"
	// when going from future dates to past dates.
	// In other words, even if the `date` has passed,
	// it will still render as if `date` is `now`.
	future: PropTypes.bool,

	// Date/time formatting style.
	// See `javascript-time-ago` docs on "Styles" for more info.
	// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.
	timeStyle: styleType,

	// `round` parameter of `javascript-time-ago`.
	// See `javascript-time-ago` docs on "Rounding" for more info.
	// Examples: "round", "floor".
	round: PropTypes.string,

	// If specified, the time won't "tick" past this threshold (in seconds).
	// For example, if `minTimeLeft` is `60 * 60`
	// then the time won't "tick" past "in 1 hour".
	minTimeLeft: PropTypes.number,

	// A React component to render the relative time label.
	// Receives properties:
	// * date: Date — The date.
	// * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).
	// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.
	// * children: string — The relative time label.
	// * All "unknown" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.
	component: PropTypes.elementType.isRequired,

	// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.
	// Is `true` by default.
	// Can be set to `false` to disable the native HTML `tooltip`.
	tooltip: PropTypes.bool.isRequired,

	// Verbose date formatter.
	// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.
	formatVerboseDate: PropTypes.func,

	// `Intl.DateTimeFormat` format for formatting verbose date.
	// See `Intl.DateTimeFormat` docs for more info.
	verboseDateFormat: PropTypes.object,

	// (deprecated)
	// How often the component refreshes itself.
	// Instead, consider using `getNextTimeToUpdate()` feature
	// of `javascript-time-ago` styles.
	updateInterval: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
		threshold: PropTypes.number,
		interval: PropTypes.number.isRequired
	}))]),

	// (deprecated).
	// Set to `false` to disable automatic refresh of the component.
	// Is `true` by default.
	// I guess no one actually turns that off.
	tick: PropTypes.bool,

	// (advanced)
	// A React Component to wrap the resulting `<time/>` React Element.
	// Receives `verboseDate` and `children` properties.
	// Also receives `wrapperProps`, if they're passed.
	// `verboseDate` can be used for displaying verbose date label
	// in an "on mouse over" (or "on touch") tooltip.
	// See the "Tooltip" readme section for more info.
	// Another example could be having `wrapperComponent`
	// being rerendered every time the component refreshes itself.
	wrapperComponent: PropTypes.func,

	// Custom `props` passed to `wrapperComponent`.
	wrapperProps: PropTypes.object
};

ReactTimeAgo.defaultProps = {
	// No preferred locales.
	locales: [],

	// Use a `<time/>` tag by default.
	component: Time,

	// Use HTML `tooltip` attribute to show a verbose date tooltip.
	tooltip: true,

	// `Intl.DateTimeFormat` for verbose date.
	// Example: "Thursday, December 20, 2012, 7:00:00 AM GMT+4"
	verboseDateFormat: {
		weekday: 'long',
		day: 'numeric',
		month: 'long',
		year: 'numeric',
		hour: 'numeric',
		minute: '2-digit',
		second: '2-digit'
		// timeZoneName: 'short'
	},

	// Automatically refreshes itself.
	tick: true

	// The component schedules a next refresh every time it renders.
	// There's no need to rerender this component unless its props change.
};ReactTimeAgo = React.memo(ReactTimeAgo);

export default ReactTimeAgo;

// `setTimeout()` has a bug where it fires immediately
// when the interval is longer than about `24.85` days.
// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values
var SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647;
function getSafeTimeoutInterval(interval) {
	return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL);
}

// A thousand years is practically a metaphor for "infinity".
var YEAR = 365 * 24 * 60 * 60 * 1000;
var INFINITY = 1000 * YEAR;

function Time(_ref2) {
	var date = _ref2.date,
	    verboseDate = _ref2.verboseDate,
	    tooltip = _ref2.tooltip,
	    children = _ref2.children,
	    rest = _objectWithoutProperties(_ref2, ['date', 'verboseDate', 'tooltip', 'children']);

	var isoString = useMemo(function () {
		return date.toISOString();
	}, [date]);
	return React.createElement(
		'time',
		_extends({}, rest, {
			dateTime: isoString,
			title: tooltip ? verboseDate : undefined }),
		children
	);
}

Time.propTypes = {
	date: PropTypes.instanceOf(Date).isRequired,
	verboseDate: PropTypes.string,
	tooltip: PropTypes.bool.isRequired,
	children: PropTypes.string.isRequired
};
//# sourceMappingURL=ReactTimeAgo.js.map