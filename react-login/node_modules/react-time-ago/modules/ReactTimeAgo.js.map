{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["React","useEffect","useState","useRef","useCallback","useMemo","PropTypes","TimeAgo","createVerboseDateFormatter","getDate","Updater","style","styleType","ReactTimeAgo","date","future","timeStyle","round","minTimeLeft","tooltip","Component","component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","now","Date","stopUpdates","getTime","undefined","maxNow","format","getTimeToNextUpdate","formattedDate","timeToNextUpdate","INFINITY","formatDateRef","current","_formattedDate","_nextUpdateTime","setFormattedDate","shouldSetTooltipText","setShouldSetTooltipText","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","verboseDateFormatter","window","verboseDate","result","WrapperComponent","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","elementType","func","object","shape","threshold","interval","defaultProps","Time","weekday","day","month","year","hour","minute","second","memo","SET_TIMEOUT_MAX_SAFE_INTERVAL","getSafeTimeoutInterval","Math","min","YEAR","children","isoString","toISOString"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,WAA7C,EAA0DC,OAA1D,QAAyE,OAAzE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,OAAOC,0BAAP,MAAuC,gCAAvC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,SAASC,SAAlB,QAAmC,aAAnC;;AAEA,SAASC,YAAT,OAoBG;AAAA,KAnBFC,IAmBE,QAnBFA,IAmBE;AAAA,KAlBFC,MAkBE,QAlBFA,MAkBE;AAAA,KAjBFC,SAiBE,QAjBFA,SAiBE;AAAA,KAhBFC,KAgBE,QAhBFA,KAgBE;AAAA,KAfFC,WAeE,QAfFA,WAeE;AAAA,KAdFC,OAcE,QAdFA,OAcE;AAAA,KAbSC,SAaT,QAbFC,SAaE;AAAA,KAVFC,SAUE,QAVFA,SAUE;AAAA,KATFC,gBASE,QATFA,gBASE;AAAA,KARFC,YAQE,QARFA,YAQE;AAAA,KAPFC,MAOE,QAPFA,MAOE;AAAA,KANFC,OAME,QANFA,OAME;AAAA,KALFC,iBAKE,QALFA,iBAKE;AAAA,KAJFC,iBAIE,QAJFA,iBAIE;AAAA,KAHFC,cAGE,QAHFA,cAGE;AAAA,KAFFC,IAEE,QAFFA,IAEE;AAAA,KADCC,IACD;;AACF;AACA,KAAMC,mBAAmB3B,QAAQ,YAAM;AACtC;AACA,MAAIoB,MAAJ,EAAY;AACXC,aAAU,CAACD,MAAD,CAAV;AACA;AACD;AACA,SAAOC,QAAQO,MAAR,CAAe1B,QAAQ2B,gBAAR,EAAf,CAAP;AACA,EAPwB,EAOtB,CACFT,MADE,EAEFC,OAFE,CAPsB,CAAzB;;AAYA;AACA,KAAMS,UAAU9B,QAAQ;AAAA,SAAM,IAAIE,OAAJ,CAAYyB,gBAAZ,CAAN;AAAA,EAAR,EAA6C,CAACA,gBAAD,CAA7C,CAAhB;;AAEA;AACA;AACAlB,QAAOT,QAAQ;AAAA,SAAMI,QAAQK,IAAR,CAAN;AAAA,EAAR,EAA6B,CAACA,IAAD,CAA7B,CAAP;;AAEA;AACA,KAAMsB,aAAahC,YAAY,YAAM;AACpC,MAAIiC,MAAMC,KAAKD,GAAL,EAAV;AACA,MAAIE,oBAAJ;AACA,MAAIxB,MAAJ,EAAY;AACX,OAAIsB,OAAOvB,KAAK0B,OAAL,EAAX,EAA2B;AAC1BH,UAAMvB,KAAK0B,OAAL,EAAN;AACAD,kBAAc,IAAd;AACA;AACD;AACD,MAAIrB,gBAAgBuB,SAApB,EAA+B;AAC9B,OAAMC,SAAS5B,KAAK0B,OAAL,KAAiBtB,cAAc,IAA9C;AACA,OAAImB,MAAMK,MAAV,EAAkB;AACjBL,UAAMK,MAAN;AACAH,kBAAc,IAAd;AACA;AACD;;AAfmC,wBAgBIJ,QAAQQ,MAAR,CAAe7B,IAAf,EAAqBE,SAArB,EAAgC;AACvE4B,wBAAqB,IADkD;AAEvEP,WAFuE;AAGvEtB,iBAHuE;AAIvEE;AAJuE,GAAhC,CAhBJ;AAAA;AAAA,MAgB/B4B,aAhB+B;AAAA,MAgBhBC,gBAhBgB;;AAsBpC,MAAIP,WAAJ,EAAiB;AAChBO,sBAAmBC,QAAnB;AACA,GAFD,MAEO;AACN;AACA;AACA;AACA;AACAD,sBAAmBjB,kBAAkBiB,gBAAlB,IAAsC,KAAK,IAA9D,CALM,CAK6D;AACnE;AACD,SAAO,CAACD,aAAD,EAAgBR,MAAMS,gBAAtB,CAAP;AACA,EAhCkB,EAgChB,CACFhC,IADE,EAEFC,MAFE,EAGFC,SAHE,EAIFa,cAJE,EAKFZ,KALE,EAMFC,WANE,EAOFiB,OAPE,CAhCgB,CAAnB;;AA0CA,KAAMa,gBAAgB7C,QAAtB;AACA6C,eAAcC,OAAd,GAAwBb,UAAxB;;AAjEE,gBAmEwC/B,QAAQ+B,UAAR,EAAoB,EAApB,CAnExC;AAAA;AAAA,KAmEKc,cAnEL;AAAA,KAmEqBC,eAnErB;;AAAA,iBAoEwCjD,SAASgD,cAAT,CApExC;AAAA;AAAA,KAoEKL,aApEL;AAAA,KAoEoBO,gBApEpB;;AAsEF;AACA;AACA;AACA;;;AAzEE,kBA0EsDlD,UA1EtD;AAAA;AAAA,KA0EKmD,oBA1EL;AAAA,KA0E2BC,uBA1E3B;;AA4EF,KAAMC,UAAUpD,QAAhB;;AAEAF,WAAU,YAAM;AACf,MAAI6B,IAAJ,EAAU;AACTyB,WAAQN,OAAR,GAAkBvC,QAAQ8C,GAAR,CAAY;AAC7BC,kBAAc;AAAA,YAAMT,cAAcC,OAAd,EAAN;AAAA,KADe;AAE7BS,cAAUN,gBAFmB;AAG7BO,oBAAgBR;AAHa,IAAZ,CAAlB;AAKA,UAAO;AAAA,WAAMI,QAAQN,OAAR,CAAgBW,IAAhB,EAAN;AAAA,IAAP;AACA;AACD,EATD,EASG,CAAC9B,IAAD,CATH;;AAWA7B,WAAU,YAAM;AACf,MAAIsD,QAAQN,OAAZ,EAAqB;AACpBM,WAAQN,OAAR,CAAgBY,WAAhB;AACA,GAFD,MAEO;AAAA,qBACkBzB,YADlB;AAAA;AAAA,OACCS,eADD;;AAENO,oBAAiBP,eAAjB;AACA;AACD,EAPD,EAOG,CAACT,UAAD,CAPH;;AASAnC,WAAU,YAAM;AACfqD,0BAAwB,IAAxB;AACA,EAFD,EAEG,EAFH;;AAIA;AACA;AACA;AACA,KAAMQ,uBAAuBzD,QAAQ,YAAM;AAC1C,MAAI,OAAO0D,MAAP,KAAkB,WAAtB,EAAmC;AAClC,UAAOvD,2BAA2BwB,gBAA3B,EAA6CJ,iBAA7C,CAAP;AACA;AACD,EAJ4B,EAI1B,CACFI,gBADE,EAEFJ,iBAFE,CAJ0B,CAA7B;;AASA;AACA;AACA;AACA,KAAMoC,cAAc3D,QAAQ,YAAM;AACjC,MAAI,OAAO0D,MAAP,KAAkB,WAAtB,EAAmC;AAClC,OAAIpC,iBAAJ,EAAuB;AACtB,WAAOA,kBAAkBb,IAAlB,CAAP;AACA;AACD,UAAOgD,qBAAqBhD,IAArB,CAAP;AACA;AACD,EAPmB,EAOjB,CACFA,IADE,EAEFa,iBAFE,EAGFmC,oBAHE,CAPiB,CAApB;;AAaA,KAAMG,SACL;AAAC,WAAD;AAAA;AACC,SAAMnD,IADP;AAEC,gBAAauC,uBAAuBW,WAAvB,GAAqCvB,SAFnD;AAGC,YAAStB;AAHV,KAIKY,IAJL;AAKEc;AALF,EADD;;AAUA,KAAMqB,mBAAmB3C,oBAAoBD,SAA7C;;AAEA,KAAI4C,gBAAJ,EAAsB;AACrB,SACC;AAAC,mBAAD;AAAA,gBACK1C,YADL;AAEC,iBAAa6B,uBAAuBW,WAAvB,GAAqCvB,SAFnD;AAGEwB;AAHF,GADD;AAOA;;AAED,QAAOA,MAAP;AACA;;AAEDpD,aAAasD,SAAb,GAAyB;AACxB;AACA;AACArD,OAAMR,UAAU8D,SAAV,CAAoB,CACzB9D,UAAU+D,UAAV,CAAqB/B,IAArB,CADyB,EAEzBhC,UAAUgE,MAFe,CAApB,EAGHC,UANqB;;AAQxB;AACA;AACA;AACA9C,SAAQnB,UAAUkE,MAXM;;AAaxB;AACA;AACA;AACA;AACA9C,UAASpB,UAAUmE,OAAV,CAAkBnE,UAAUkE,MAA5B,CAjBe;;AAmBxB;AACA;AACA;AACA;AACAzD,SAAQT,UAAUoE,IAvBM;;AAyBxB;AACA;AACA;AACA1D,YAAWJ,SA5Ba;;AA8BxB;AACA;AACA;AACAK,QAAOX,UAAUkE,MAjCO;;AAmCxB;AACA;AACA;AACAtD,cAAaZ,UAAUgE,MAtCC;;AAwCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACAjD,YAAWf,UAAUqE,WAAV,CAAsBJ,UA/CT;;AAiDxB;AACA;AACA;AACApD,UAASb,UAAUoE,IAAV,CAAeH,UApDA;;AAsDxB;AACA;AACA5C,oBAAmBrB,UAAUsE,IAxDL;;AA0DxB;AACA;AACAhD,oBAAmBtB,UAAUuE,MA5DL;;AA8DxB;AACA;AACA;AACA;AACAhD,iBAAgBvB,UAAU8D,SAAV,CAAoB,CACnC9D,UAAUgE,MADyB,EAEnChE,UAAUmE,OAAV,CAAkBnE,UAAUwE,KAAV,CAAgB;AACjCC,aAAWzE,UAAUgE,MADY;AAEjCU,YAAU1E,UAAUgE,MAAV,CAAiBC;AAFM,EAAhB,CAAlB,CAFmC,CAApB,CAlEQ;;AA0ExB;AACA;AACA;AACA;AACAzC,OAAMxB,UAAUoE,IA9EQ;;AAgFxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnD,mBAAkBjB,UAAUsE,IAzFJ;;AA2FxB;AACApD,eAAclB,UAAUuE;AA5FA,CAAzB;;AA+FAhE,aAAaoE,YAAb,GAA4B;AAC3B;AACAvD,UAAS,EAFkB;;AAI3B;AACAL,YAAW6D,IALgB;;AAO3B;AACA/D,UAAS,IARkB;;AAU3B;AACA;AACAS,oBAAmB;AAClBuD,WAAS,MADS;AAElBC,OAAK,SAFa;AAGlBC,SAAO,MAHW;AAIlBC,QAAM,SAJY;AAKlBC,QAAM,SALY;AAMlBC,UAAQ,SANU;AAOlBC,UAAQ;AACR;AARkB,EAZQ;;AAuB3B;AACA3D,OAAM;;AAGP;AACA;AA5B4B,CAA5B,CA6BAjB,eAAeb,MAAM0F,IAAN,CAAW7E,YAAX,CAAf;;AAEA,eAAeA,YAAf;;AAEA;AACA;AACA;AACA,IAAM8E,gCAAgC,UAAtC;AACA,SAASC,sBAAT,CAAgCZ,QAAhC,EAA0C;AACxC,QAAOa,KAAKC,GAAL,CAASd,QAAT,EAAmBW,6BAAnB,CAAP;AACD;;AAED;AACA,IAAMI,OAAO,MAAM,EAAN,GAAW,EAAX,GAAgB,EAAhB,GAAqB,IAAlC;AACA,IAAMhD,WAAW,OAAOgD,IAAxB;;AAEA,SAASb,IAAT,QAMG;AAAA,KALFpE,IAKE,SALFA,IAKE;AAAA,KAJFkD,WAIE,SAJFA,WAIE;AAAA,KAHF7C,OAGE,SAHFA,OAGE;AAAA,KAFF6E,QAEE,SAFFA,QAEE;AAAA,KADCjE,IACD;;AACF,KAAMkE,YAAY5F,QAAQ;AAAA,SAAMS,KAAKoF,WAAL,EAAN;AAAA,EAAR,EAAkC,CAACpF,IAAD,CAAlC,CAAlB;AACA,QACC;AAAA;AAAA,eACKiB,IADL;AAEC,aAAUkE,SAFX;AAGC,UAAO9E,UAAU6C,WAAV,GAAwBvB,SAHhC;AAIEuD;AAJF,EADD;AAQA;;AAEDd,KAAKf,SAAL,GAAiB;AAChBrD,OAAMR,UAAU+D,UAAV,CAAqB/B,IAArB,EAA2BiC,UADjB;AAEhBP,cAAa1D,UAAUkE,MAFP;AAGhBrD,UAASb,UAAUoE,IAAV,CAAeH,UAHR;AAIhByB,WAAU1F,UAAUkE,MAAV,CAAiBD;AAJX,CAAjB","file":"ReactTimeAgo.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport Updater from './Updater'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => new TimeAgo(preferredLocales), [preferredLocales])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = Date.now()\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\t// The component sets the \"verbose date\" tooltip after the component \r\n\t// has mounted rather than on the first render. \r\n\t// The reason is that otherwise React would complain that \r\n\t// server-side-rendered markup doesn't match client-side-rendered one.\r\n\tconst [shouldSetTooltipText, setShouldSetTooltipText] = useState()\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShouldSetTooltipText(true)\r\n\t}, [])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tif (formatVerboseDate) {\r\n\t\t\t\treturn formatVerboseDate(date)\r\n\t\t\t}\r\n\t\t\treturn verboseDateFormatter(date)\r\n\t\t}\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.func,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// `setTimeout()` has a bug where it fires immediately\r\n// when the interval is longer than about `24.85` days.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647\r\nfunction getSafeTimeoutInterval(interval) {\r\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL)\r\n}\r\n\r\n// A thousand years is practically a metaphor for \"infinity\".\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR\r\n\r\nfunction Time({\r\n\tdate,\r\n\tverboseDate,\r\n\ttooltip,\r\n\tchildren,\r\n\t...rest\r\n}) {\r\n\tconst isoString = useMemo(() => date.toISOString(), [date])\r\n\treturn (\r\n\t\t<time\r\n\t\t\t{...rest}\r\n\t\t\tdateTime={isoString}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined}>\r\n\t\t\t{children}\r\n\t\t</time>\r\n\t)\r\n}\r\n\r\nTime.propTypes = {\r\n\tdate: PropTypes.instanceOf(Date).isRequired,\r\n\tverboseDate: PropTypes.string,\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\tchildren: PropTypes.string.isRequired\r\n}"]}