{"ast":null,"code":"/*!\nFullCalendar v5.5.0\nDocs & License: https://fullcalendar.io/\n(c) 2020 Adam Shaw\n*/\nimport './main.css';\nimport { getDateMeta, buildNavLinkData, getDayClassNames, createElement, RenderHook, formatDayString, BaseComponent, Fragment, createFormatter, EventRoot, isMultiDayRange, buildSegTimeText, memoize, ViewRoot, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, DateComponent, startOfDay, addDays, identity, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nvar ListViewHeaderRow = /** @class */function (_super) {\n  __extends(ListViewHeaderRow, _super);\n  function ListViewHeaderRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ListViewHeaderRow.prototype.render = function () {\n    var _a = this.props,\n      dayDate = _a.dayDate,\n      todayRange = _a.todayRange;\n    var _b = this.context,\n      theme = _b.theme,\n      dateEnv = _b.dateEnv,\n      options = _b.options,\n      viewApi = _b.viewApi;\n    var dayMeta = getDateMeta(dayDate, todayRange);\n    // will ever be falsy?\n    var text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';\n    // will ever be falsy? also, BAD NAME \"alt\"\n    var sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n    var navLinkData = options.navLinks ? buildNavLinkData(dayDate) : null;\n    var hookProps = __assign({\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      text: text,\n      sideText: sideText,\n      navLinkData: navLinkData\n    }, dayMeta);\n    var classNames = ['fc-list-day'].concat(getDayClassNames(dayMeta, theme));\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.dayHeaderClassNames,\n      content: options.dayHeaderContent,\n      defaultContent: renderInnerContent,\n      didMount: options.dayHeaderDidMount,\n      willUnmount: options.dayHeaderWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"tr\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-date\": formatDayString(dayDate)\n      }, createElement(\"th\", {\n        colSpan: 3\n      }, createElement(\"div\", {\n        className: 'fc-list-day-cushion ' + theme.getClass('tableCellShaded'),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n  return ListViewHeaderRow;\n}(BaseComponent);\nfunction renderInnerContent(props) {\n  var navLinkAttrs = props.navLinkData // is there a type for this?\n  ? {\n    'data-navlink': props.navLinkData,\n    tabIndex: 0\n  } : {};\n  return createElement(Fragment, null, props.text && createElement(\"a\", __assign({\n    className: \"fc-list-day-text\"\n  }, navLinkAttrs), props.text), props.sideText && createElement(\"a\", __assign({\n    className: \"fc-list-day-side-text\"\n  }, navLinkAttrs), props.sideText));\n}\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short'\n});\nvar ListViewEventRow = /** @class */function (_super) {\n  __extends(ListViewEventRow, _super);\n  function ListViewEventRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ListViewEventRow.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var seg = props.seg;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n    return createElement(EventRoot, {\n      seg: seg,\n      timeText: \"\" // BAD. because of all-day content\n      ,\n      disableDragging: true,\n      disableResizing: true,\n      defaultContent: renderEventInnerContent,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday,\n      isSelected: props.isSelected,\n      isDragging: props.isDragging,\n      isResizing: props.isResizing,\n      isDateSelecting: props.isDateSelecting\n    }, function (rootElRef, classNames, innerElRef, innerContent, hookProps) {\n      return createElement(\"tr\", {\n        className: ['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' '),\n        ref: rootElRef\n      }, buildTimeContent(seg, timeFormat, context), createElement(\"td\", {\n        className: \"fc-list-event-graphic\"\n      }, createElement(\"span\", {\n        className: \"fc-list-event-dot\",\n        style: {\n          borderColor: hookProps.borderColor || hookProps.backgroundColor\n        }\n      })), createElement(\"td\", {\n        className: \"fc-list-event-title\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n  return ListViewEventRow;\n}(BaseComponent);\nfunction renderEventInnerContent(props) {\n  var event = props.event;\n  var url = event.url;\n  var anchorAttrs = url ? {\n    href: url\n  } : {};\n  return createElement(\"a\", __assign({}, anchorAttrs), event.title);\n}\nfunction buildTimeContent(seg, timeFormat, context) {\n  var options = context.options;\n  if (options.displayEventTime !== false) {\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    var doAllDay = false;\n    var timeText = void 0;\n    if (eventDef.allDay) {\n      doAllDay = true;\n    } else if (isMultiDayRange(seg.eventRange.range)) {\n      // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n      } else {\n        doAllDay = true;\n      }\n    } else {\n      timeText = buildSegTimeText(seg, timeFormat, context);\n    }\n    if (doAllDay) {\n      var hookProps = {\n        text: context.options.allDayText,\n        view: context.viewApi\n      };\n      return createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.allDayClassNames,\n        content: options.allDayContent,\n        defaultContent: renderAllDayInner,\n        didMount: options.allDayDidMount,\n        willUnmount: options.allDayWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          className: ['fc-list-event-time'].concat(classNames).join(' '),\n          ref: rootElRef\n        }, innerContent);\n      });\n    }\n    return createElement(\"td\", {\n      className: \"fc-list-event-time\"\n    }, timeText);\n  }\n  return null;\n}\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nvar ListView = /** @class */function (_super) {\n  __extends(ListView, _super);\n  function ListView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.setRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    return _this;\n  }\n  ListView.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var extraClassNames = ['fc-list', context.theme.getClass('table'), context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''];\n    var _b = this.computeDateVars(props.dateProfile),\n      dayDates = _b.dayDates,\n      dayRanges = _b.dayRanges;\n    var eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.setRootEl\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(Scroller, {\n        liquid: !props.isHeightAuto,\n        overflowX: props.isHeightAuto ? 'visible' : 'hidden',\n        overflowY: props.isHeightAuto ? 'visible' : 'auto'\n      }, eventSegs.length > 0 ? _this.renderSegList(eventSegs, dayDates) : _this.renderEmptyMessage()));\n    });\n  };\n  ListView.prototype.renderEmptyMessage = function () {\n    var _a = this.context,\n      options = _a.options,\n      viewApi = _a.viewApi;\n    var hookProps = {\n      text: options.noEventsText,\n      view: viewApi\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.noEventsClassNames,\n      content: options.noEventsContent,\n      defaultContent: renderNoEventsInner,\n      didMount: options.noEventsDidMount,\n      willUnmount: options.noEventsWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        className: ['fc-list-empty'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(\"div\", {\n        className: \"fc-list-empty-cushion\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n  ListView.prototype.renderSegList = function (allSegs, dayDates) {\n    var _a = this.context,\n      theme = _a.theme,\n      options = _a.options;\n    var segsByDay = groupSegsByDay(allSegs); // sparse array\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      var innerNodes = [];\n      for (var dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n        var daySegs = segsByDay[dayIndex];\n        if (daySegs) {\n          // sparse array, so might be undefined\n          var dayStr = dayDates[dayIndex].toISOString();\n          // append a day header\n          innerNodes.push(createElement(ListViewHeaderRow, {\n            key: dayStr,\n            dayDate: dayDates[dayIndex],\n            todayRange: todayRange\n          }));\n          daySegs = sortEventSegs(daySegs, options.eventOrder);\n          for (var _i = 0, daySegs_1 = daySegs; _i < daySegs_1.length; _i++) {\n            var seg = daySegs_1[_i];\n            innerNodes.push(createElement(ListViewEventRow, __assign({\n              key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */,\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: false\n            }, getSegMeta(seg, todayRange, nowDate))));\n          }\n        }\n      }\n      return createElement(\"table\", {\n        className: 'fc-list-table ' + theme.getClass('table')\n      }, createElement(\"tbody\", null, innerNodes));\n    });\n  };\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n  };\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n    return segs;\n  };\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var dateEnv = this.context.dateEnv;\n    var nextDayThreshold = this.context.options.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg);\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n    return segs;\n  };\n  return ListView;\n}(DateComponent);\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text;\n}\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n}\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs) {\n  var segsByDay = []; // sparse array\n  var i;\n  var seg;\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n  }\n  return segsByDay;\n}\nvar OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter,\n  listDaySideFormat: createFalsableFormatter,\n  noEventsClassNames: identity,\n  noEventsContent: identity,\n  noEventsDidMount: identity,\n  noEventsWillUnmount: identity\n};\nfunction createFalsableFormatter(input) {\n  return input === false ? null : createFormatter(input);\n}\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    list: {\n      component: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      }\n    },\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDaySideFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      }\n    },\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      }\n    }\n  }\n});\nexport default main;\nexport { ListView };","map":{"version":3,"sources":["src/ListViewHeaderRow.tsx","src/ListViewEventRow.tsx","src/ListView.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseComponent, DateMarker, createElement, DateRange, getDateMeta,\n  RenderHook, buildNavLinkData, DayHeaderContentArg, getDayClassNames, formatDayString, Fragment,\n} from '@fullcalendar/common'\n\nexport interface ListViewHeaderRowProps {\n  dayDate: DateMarker\n  todayRange: DateRange\n}\n\ninterface HookProps extends DayHeaderContentArg { // doesn't enforce much since DayCellContentArg allow extra props\n  text: string\n  sideText: string\n}\n\nexport class ListViewHeaderRow extends BaseComponent<ListViewHeaderRowProps> {\n  render() {\n    let { dayDate, todayRange } = this.props\n    let { theme, dateEnv, options, viewApi } = this.context\n    let dayMeta = getDateMeta(dayDate, todayRange)\n\n    // will ever be falsy?\n    let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''\n\n    // will ever be falsy? also, BAD NAME \"alt\"\n    let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : ''\n\n    let navLinkData = options.navLinks\n      ? buildNavLinkData(dayDate)\n      : null\n\n    let hookProps: HookProps = {\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      text,\n      sideText,\n      navLinkData,\n      ...dayMeta,\n    }\n\n    let classNames = ['fc-list-day'].concat(\n      getDayClassNames(dayMeta, theme),\n    )\n\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return (\n      <RenderHook<HookProps>\n        hookProps={hookProps}\n        classNames={options.dayHeaderClassNames}\n        content={options.dayHeaderContent}\n        defaultContent={renderInnerContent}\n        didMount={options.dayHeaderDidMount}\n        willUnmount={options.dayHeaderWillUnmount}\n      >\n        {(rootElRef, customClassNames, innerElRef, innerContent) => (\n          <tr\n            ref={rootElRef}\n            className={classNames.concat(customClassNames).join(' ')}\n            data-date={formatDayString(dayDate)}\n          >\n            <th colSpan={3}>\n              <div className={'fc-list-day-cushion ' + theme.getClass('tableCellShaded')} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </th>\n          </tr>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderInnerContent(props: HookProps) {\n  let navLinkAttrs = props.navLinkData // is there a type for this?\n    ? { 'data-navlink': props.navLinkData, tabIndex: 0 }\n    : {}\n\n  return (\n    <Fragment>\n      {props.text && (\n        <a className=\"fc-list-day-text\" {...navLinkAttrs}>\n          {props.text}\n        </a>\n      )}\n      {props.sideText && (\n        <a className=\"fc-list-day-side-text\" {...navLinkAttrs}>\n          {props.sideText}\n        </a>\n      )}\n    </Fragment>\n  )\n}\n","import {\n  MinimalEventProps, BaseComponent, ViewContext, createElement, AllDayContentArg,\n  Seg, isMultiDayRange, DateFormatter, buildSegTimeText, createFormatter, EventContentArg, EventRoot, ComponentChildren, RenderHook,\n} from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short',\n})\n\nexport class ListViewEventRow extends BaseComponent<MinimalEventProps> {\n  render() {\n    let { props, context } = this\n    let { seg } = props\n\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT\n\n    return (\n      <EventRoot\n        seg={seg}\n        timeText=\"\" // BAD. because of all-day content\n        disableDragging\n        disableResizing\n        defaultContent={renderEventInnerContent}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n        isSelected={props.isSelected}\n        isDragging={props.isDragging}\n        isResizing={props.isResizing}\n        isDateSelecting={props.isDateSelecting}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, hookProps) => (\n          <tr className={['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' ')} ref={rootElRef}>\n            {buildTimeContent(seg, timeFormat, context)}\n            <td className=\"fc-list-event-graphic\">\n              <span className=\"fc-list-event-dot\" style={{ borderColor: hookProps.borderColor || hookProps.backgroundColor }} />\n            </td>\n            <td className=\"fc-list-event-title\" ref={innerElRef}>\n              {innerContent}\n            </td>\n          </tr>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderEventInnerContent(props: EventContentArg) {\n  let { event } = props\n  let url = event.url\n  let anchorAttrs = url ? { href: url } : {}\n\n  return (\n    <a {...anchorAttrs}>\n      {/* TODO: document how whole row become clickable */}\n      {event.title}\n    </a>\n  )\n}\n\nfunction buildTimeContent(seg: Seg, timeFormat: DateFormatter, context: ViewContext): ComponentChildren {\n  let { options } = context\n\n  if (options.displayEventTime !== false) {\n    let eventDef = seg.eventRange.def\n    let eventInstance = seg.eventRange.instance\n    let doAllDay = false\n    let timeText: string\n\n    if (eventDef.allDay) {\n      doAllDay = true\n    } else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          eventInstance.range.start,\n          seg.end,\n        )\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          seg.start,\n          eventInstance.range.end,\n        )\n      } else {\n        doAllDay = true\n      }\n    } else {\n      timeText = buildSegTimeText(\n        seg,\n        timeFormat,\n        context,\n      )\n    }\n\n    if (doAllDay) {\n      let hookProps: AllDayContentArg = {\n        text: context.options.allDayText,\n        view: context.viewApi,\n      }\n\n      return (\n        <RenderHook<AllDayContentArg> // needed?\n          hookProps={hookProps}\n          classNames={options.allDayClassNames}\n          content={options.allDayContent}\n          defaultContent={renderAllDayInner}\n          didMount={options.allDayDidMount}\n          willUnmount={options.allDayWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td className={['fc-list-event-time'].concat(classNames).join(' ')} ref={rootElRef}>\n              {innerContent}\n            </td>\n          )}\n        </RenderHook>\n      )\n    }\n\n    return (\n      <td className=\"fc-list-event-time\">\n        {timeText}\n      </td>\n    )\n  }\n\n  return null\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  createElement,\n  ViewProps,\n  Scroller,\n  DateMarker,\n  addDays,\n  startOfDay,\n  DateRange,\n  intersectRanges,\n  DateProfile,\n  EventUiHash,\n  EventRenderRange,\n  sliceEventStore,\n  EventStore,\n  memoize,\n  Seg,\n  VNode,\n  sortEventSegs,\n  getSegMeta,\n  NowTimer,\n  ViewRoot,\n  RenderHook,\n  DateComponent,\n  ViewApi,\n  MountArg,\n} from '@fullcalendar/common'\nimport { ListViewHeaderRow } from './ListViewHeaderRow'\nimport { ListViewEventRow } from './ListViewEventRow'\n\nexport interface NoEventsContentArg {\n  text: string\n  view: ViewApi\n}\n\nexport type NoEventsMountArg = MountArg<NoEventsContentArg>\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nexport class ListView extends DateComponent<ViewProps> {\n  private computeDateVars = memoize(computeDateVars)\n  private eventStoreToSegs = memoize(this._eventStoreToSegs)\n\n  render() {\n    let { props, context } = this\n\n    let extraClassNames = [\n      'fc-list',\n      context.theme.getClass('table'), // just for the outer border. will be on div\n      context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : '',\n    ]\n\n    let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile)\n    let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges)\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.setRootEl}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <Scroller\n              liquid={!props.isHeightAuto}\n              overflowX={props.isHeightAuto ? 'visible' : 'hidden'}\n              overflowY={props.isHeightAuto ? 'visible' : 'auto'}\n            >\n              {eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage()}\n            </Scroller>\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  setRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { // TODO: make aware that it doesn't do Hits\n        el: rootEl,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  renderEmptyMessage() {\n    let { options, viewApi } = this.context\n    let hookProps: NoEventsContentArg = {\n      text: options.noEventsText,\n      view: viewApi,\n    }\n\n    return (\n      <RenderHook<NoEventsContentArg> // needed???\n        hookProps={hookProps}\n        classNames={options.noEventsClassNames}\n        content={options.noEventsContent}\n        defaultContent={renderNoEventsInner}\n        didMount={options.noEventsDidMount}\n        willUnmount={options.noEventsWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div className={['fc-list-empty'].concat(classNames).join(' ')} ref={rootElRef}>\n            <div className=\"fc-list-empty-cushion\" ref={innerElRef}>\n              {innerContent}\n            </div>\n          </div>\n        )}\n      </RenderHook>\n    )\n  }\n\n  renderSegList(allSegs: Seg[], dayDates: DateMarker[]) {\n    let { theme, options } = this.context\n    let segsByDay = groupSegsByDay(allSegs) // sparse array\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          let innerNodes: VNode[] = []\n\n          for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n            let daySegs = segsByDay[dayIndex]\n\n            if (daySegs) { // sparse array, so might be undefined\n              let dayStr = dayDates[dayIndex].toISOString()\n\n              // append a day header\n              innerNodes.push(\n                <ListViewHeaderRow\n                  key={dayStr}\n                  dayDate={dayDates[dayIndex]}\n                  todayRange={todayRange}\n                />,\n              )\n\n              daySegs = sortEventSegs(daySegs, options.eventOrder)\n\n              for (let seg of daySegs) {\n                innerNodes.push(\n                  <ListViewEventRow\n                    key={dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */}\n                    seg={seg}\n                    isDragging={false}\n                    isResizing={false}\n                    isDateSelecting={false}\n                    isSelected={false}\n                    {...getSegMeta(seg, todayRange, nowDate)}\n                  />,\n                )\n              }\n            }\n          }\n\n          return (\n            <table className={'fc-list-table ' + theme.getClass('table')}>\n              <tbody>{innerNodes}</tbody>\n            </table>\n          )\n        }}\n      </NowTimer>\n    )\n  }\n\n  _eventStoreToSegs(eventStore: EventStore, eventUiBases: EventUiHash, dayRanges: DateRange[]): Seg[] {\n    return this.eventRangesToSegs(\n      sliceEventStore(\n        eventStore,\n        eventUiBases,\n        this.props.dateProfile.activeRange,\n        this.context.options.nextDayThreshold,\n      ).fg,\n      dayRanges,\n    )\n  }\n\n  eventRangesToSegs(eventRanges: EventRenderRange[], dayRanges: DateRange[]) {\n    let segs = []\n\n    for (let eventRange of eventRanges) {\n      segs.push(...this.eventRangeToSegs(eventRange, dayRanges))\n    }\n\n    return segs\n  }\n\n  eventRangeToSegs(eventRange: EventRenderRange, dayRanges: DateRange[]) {\n    let { dateEnv } = this.context\n    let { nextDayThreshold } = this.context.options\n    let range = eventRange.range\n    let allDay = eventRange.def.allDay\n    let dayIndex\n    let segRange\n    let seg\n    let segs = []\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex])\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex,\n        }\n\n        segs.push(seg)\n\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (\n          !seg.isEnd && !allDay &&\n          dayIndex + 1 < dayRanges.length &&\n          range.end <\n            dateEnv.add(\n              dayRanges[dayIndex + 1].start,\n              nextDayThreshold,\n            )\n        ) {\n          seg.end = range.end\n          seg.isEnd = true\n          break\n        }\n      }\n    }\n\n    return segs\n  }\n}\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text\n}\n\nfunction computeDateVars(dateProfile: DateProfile) {\n  let dayStart = startOfDay(dateProfile.renderRange.start)\n  let viewEnd = dateProfile.renderRange.end\n  let dayDates: DateMarker[] = []\n  let dayRanges: DateRange[] = []\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart)\n\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1),\n    })\n\n    dayStart = addDays(dayStart, 1)\n  }\n\n  return { dayDates, dayRanges }\n}\n\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs): Seg[][] {\n  let segsByDay = [] // sparse array\n  let i\n  let seg\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n      .push(seg)\n  }\n\n  return segsByDay\n}\n","import {\n  identity,\n  Identity,\n  ClassNamesGenerator,\n  CustomContentGenerator,\n  DidMountHandler,\n  WillUnmountHandler,\n  createFormatter,\n  FormatterInput,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  NoEventsContentArg,\n  NoEventsMountArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter, // defaults specified in list plugins\n  listDaySideFormat: createFalsableFormatter, // \"\n\n  noEventsClassNames: identity as Identity<ClassNamesGenerator<NoEventsContentArg>>,\n  noEventsContent: identity as Identity<CustomContentGenerator<NoEventsContentArg>>,\n  noEventsDidMount: identity as Identity<DidMountHandler<NoEventsMountArg>>,\n  noEventsWillUnmount: identity as Identity<WillUnmountHandler<NoEventsMountArg>>,\n\n  // noEventsText is defined in base options\n}\n\nfunction createFalsableFormatter(input: FormatterInput | false) {\n  return input === false ? null : createFormatter(input)\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { ListView } from './ListView'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { ListView }\nexport * from './api-type-deps'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    list: {\n      component: ListView,\n      buttonTextKey: 'list', // what to lookup in locale files\n      listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: { days: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: { weeks: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is more important\n      listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    },\n\n    listMonth: {\n      type: 'list',\n      duration: { month: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: { year: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}