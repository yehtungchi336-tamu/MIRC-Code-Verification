{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport useLatest from 'use-latest';\nvar useBeforeunload = function useBeforeunload(handler) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\"Expected `handler` to be of type `function`, but received type `\" + typeof handler + \"`\");\n    }\n  }\n  var handlerRef = useLatest(handler);\n  useEffect(function () {\n    var handleBeforeunload = function handleBeforeunload(event) {\n      var returnValue;\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      } // Chrome requires `returnValue` to be set.\n\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n    children = _ref$children === void 0 ? null : _ref$children,\n    onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired\n  };\n}\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"mappings":";;;IAGMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;EACnC,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI,OAAOH,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,IAAI,IAAhD,EAAsD;MACpD,MAAM,IAAII,SAAJ,sEACoE,OAAOJ,OAD3E,OAAN;IAGD;EACF;EAED,IAAMK,UAAU,GAAGC,SAAS,CAACN,OAAD,CAA5B;EAEAO,SAAS,CAAC,YAAM;IACd,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;MACpC,IAAIC,WAAJ;MACA,IAAIL,UAAU,CAACM,OAAX,IAAsB,IAA1B,EAAgC;QAC9BD,WAAW,GAAGL,UAAU,CAACM,OAAX,CAAmBF,KAAnB,CAAd;MACD,CAJmC;;MAOpC,IAAIA,KAAK,CAACG,gBAAV,EAA4B;QAC1BH,KAAK,CAACC,WAAN,GAAoB,EAApB;MACD;MAED,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;QACnCD,KAAK,CAACC,WAAN,GAAoBA,WAApB;QACA,OAAOA,WAAP;MACD;IACF,CAfD;IAiBAG,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCN,kBAAxC;IAEA,OAAO,YAAM;MACXK,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CP,kBAA3C;IACD,CAFD;EAGD,CAvBQ,EAuBN,EAvBM,CAAT,CAXmC;AAmCpC;;ICnCKQ,YAAY,GAAG,SAAfA,YAAe,OAAyC;EAAA,yBAAtCC,QAAsC;IAAtCA,QAAsC,8BAA3B,IAA2B;IAArBC,cAAqB,QAArBA,cAAqB;EAC5DnB,eAAe,CAACmB,cAAD,CAAf;EACA,OAAOD,QAAP;AACD;AAED,IAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCa,YAAY,CAACG,SAAb,GAAyB;IACvBF,QAAQ,EAAEG,SAAS,CAACC,GADG;IAEvBH,cAAc,EAAEE,SAAS,CAACE,IAAV,CAAeC;EAFR,CAAzB;AAID","names":["useBeforeunload","handler","process","env","NODE_ENV","TypeError","handlerRef","useLatest","useEffect","handleBeforeunload","event","returnValue","current","defaultPrevented","window","addEventListener","removeEventListener","Beforeunload","children","onBeforeunload","propTypes","PropTypes","any","func","isRequired"],"sources":["C:\\Users\\Max\\Documents\\GitHub\\MIRC-Code-Verification\\react-login\\node_modules\\react-beforeunload\\src\\useBeforeunload.js","C:\\Users\\Max\\Documents\\GitHub\\MIRC-Code-Verification\\react-login\\node_modules\\react-beforeunload\\src\\Beforeunload.js"],"sourcesContent":["import { useEffect } from 'react';\nimport useLatest from 'use-latest';\n\nconst useBeforeunload = (handler) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\n        `Expected \\`handler\\` to be of type \\`function\\`, but received type \\`${typeof handler}\\``\n      );\n    }\n  }\n\n  const handlerRef = useLatest(handler);\n\n  useEffect(() => {\n    const handleBeforeunload = (event) => {\n      let returnValue;\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      }\n\n      // Chrome requires `returnValue` to be set.\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired,\n  };\n}\n\nexport default Beforeunload;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}