{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator } from 'tslib';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\nvar HttpsErrorImpl = /** @class */function (_super) {\n  __extends(HttpsErrorImpl, _super);\n  function HttpsErrorImpl(code, message, details) {\n    var _this = _super.call(this, message) || this;\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\n    _this.code = code;\n    _this.details = details;\n    return _this;\n  }\n  return HttpsErrorImpl;\n}(Error);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\nfunction _errorForResponse(status, bodyJSON, serializer) {\n  var code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  var description = code;\n  var details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      var status_1 = errorJSON.status;\n      if (typeof status_1 === 'string') {\n        if (!errorCodeMap[status_1]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status_1];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status_1;\n      }\n      var message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new HttpsErrorImpl(code, description, details);\n}\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\nvar ContextProvider = /** @class */function () {\n  function ContextProvider(authProvider, messagingProvider) {\n    var _this = this;\n    this.auth = null;\n    this.messaging = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n  ContextProvider.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.auth) {\n              return [2 /*return*/, undefined];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.auth.getToken()];\n          case 2:\n            token = _a.sent();\n            if (!token) {\n              return [2 /*return*/, undefined];\n            }\n            return [2 /*return*/, token.accessToken];\n          case 3:\n            e_1 = _a.sent();\n            // If there's any error when trying to get the auth token, leave it off.\n            return [2 /*return*/, undefined];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getInstanceIdToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n          return [2 /*return*/, undefined];\n        }\n        try {\n          return [2 /*return*/, this.messaging.getToken()];\n        } catch (e) {\n          // We don't warn on this, because it usually means messaging isn't set up.\n          // console.warn('Failed to retrieve instance id token.', e);\n          // If there's any error when trying to get the token, leave it off.\n          return [2 /*return*/, undefined];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  ContextProvider.prototype.getContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var authToken, instanceIdToken;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAuthToken()];\n          case 1:\n            authToken = _a.sent();\n            return [4 /*yield*/, this.getInstanceIdToken()];\n          case 2:\n            instanceIdToken = _a.sent();\n            return [2 /*return*/, {\n              authToken: authToken,\n              instanceIdToken: instanceIdToken\n            }];\n        }\n      });\n    });\n  };\n  return ContextProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\nvar Serializer = /** @class */function () {\n  function Serializer() {}\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  Serializer.prototype.encode = function (data) {\n    var _this = this;\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(function (x) {\n        return _this.encode(x);\n      });\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data, function (x) {\n        return _this.encode(x);\n      });\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  };\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  Serializer.prototype.decode = function (json) {\n    var _this = this;\n    if (json == null) {\n      return json;\n    }\n    if (json['@type']) {\n      switch (json['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE:\n          {\n            // Technically, this could work return a valid number for malformed\n            // data if there was a number followed by garbage. But it's just not\n            // worth all the extra code to detect that case.\n            var value = Number(json['value']);\n            if (isNaN(value)) {\n              throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n            return value;\n          }\n        default:\n          {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(function (x) {\n        return _this.decode(x);\n      });\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json, function (x) {\n        return _this.decode(x);\n      });\n    }\n    // Anything else is safe to return.\n    return json;\n  };\n  return Serializer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\nfunction failAfter(millis) {\n  var timer;\n  var promise = new Promise(function (_, reject) {\n    timer = setTimeout(function () {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n  return {\n    timer: timer,\n    promise: promise\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\nvar Service = /** @class */function () {\n  /**\r\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\r\n   * @param app_ The FirebaseApp to use.\r\n   * @param regionOrCustomDomain_ one of:\r\n   *   a) A region to call functions from, such as us-central1\r\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\r\n   */\n  function Service(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {\n    var _this = this;\n    if (regionOrCustomDomain_ === void 0) {\n      regionOrCustomDomain_ = 'us-central1';\n    }\n    this.app_ = app_;\n    this.fetchImpl = fetchImpl;\n    this.serializer = new Serializer();\n    this.emulatorOrigin = null;\n    this.INTERNAL = {\n      delete: function _delete() {\n        return Promise.resolve(_this.deleteService());\n      }\n    };\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this.deleteService = function () {\n        return resolve();\n      };\n    });\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      var url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n  Object.defineProperty(Service.prototype, \"app\", {\n    get: function get() {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name The name of the callable.\r\n   */\n  Service.prototype._url = function (name) {\n    var projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      var origin_1 = this.emulatorOrigin;\n      return origin_1 + \"/\" + projectId + \"/\" + this.region + \"/\" + name;\n    }\n    if (this.customDomain !== null) {\n      return this.customDomain + \"/\" + name;\n    }\n    return \"https://\" + this.region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\n  };\n  /**\r\n   * Modify this instance to communicate with the Cloud Functions emulator.\r\n   *\r\n   * Note: this must be called before this instance has been used to do any operations.\r\n   *\r\n   * @param host The emulator host (ex: localhost)\r\n   * @param port The emulator port (ex: 5001)\r\n   */\n  Service.prototype.useEmulator = function (host, port) {\n    this.emulatorOrigin = \"http://\" + host + \":\" + port;\n  };\n  /**\r\n   * Changes this instance to point to a Cloud Functions emulator running\r\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n   *\r\n   * @deprecated Prefer the useEmulator(host, port) method.\r\n   * @param origin The origin of the local emulator, such as\r\n   * \"http://localhost:5005\".\r\n   */\n  Service.prototype.useFunctionsEmulator = function (origin) {\n    this.emulatorOrigin = origin;\n  };\n  /**\r\n   * Returns a reference to the callable https trigger with the given name.\r\n   * @param name The name of the trigger.\r\n   */\n  Service.prototype.httpsCallable = function (name, options) {\n    var _this = this;\n    return function (data) {\n      return _this.call(name, data, options || {});\n    };\n  };\n  /**\r\n   * Does an HTTP POST and returns the completed response.\r\n   * @param url The url to post to.\r\n   * @param body The JSON body of the post.\r\n   * @param headers The HTTP headers to include in the request.\r\n   * @return A Promise that will succeed when the request finishes.\r\n   */\n  Service.prototype.postJSON = function (url, body, headers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, json, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers['Content-Type'] = 'application/json';\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.fetchImpl(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            })];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _a.sent();\n            // This could be an unhandled error on the backend, or it could be a\n            // network error. There's no way to know, since an unhandled error on the\n            // backend will fail to set the proper CORS header, and thus will be\n            // treated as a network error by fetch.\n            return [2 /*return*/, {\n              status: 0,\n              json: null\n            }];\n          case 4:\n            json = null;\n            _a.label = 5;\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n            return [4 /*yield*/, response.json()];\n          case 6:\n            json = _a.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            e_2 = _a.sent();\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/, {\n              status: response.status,\n              json: json\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\n  Service.prototype.call = function (name, data, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            url = this._url(name);\n            // Encode any special types, such as dates, in the input data.\n            data = this.serializer.encode(data);\n            body = {\n              data: data\n            };\n            headers = {};\n            return [4 /*yield*/, this.contextProvider.getContext()];\n          case 1:\n            context = _b.sent();\n            if (context.authToken) {\n              headers['Authorization'] = 'Bearer ' + context.authToken;\n            }\n            if (context.instanceIdToken) {\n              headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n            }\n            timeout = options.timeout || 70000;\n            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\n            return [4 /*yield*/, Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];\n          case 2:\n            response = _b.sent();\n            // If service was deleted, interrupted response throws an error.\n            if (!response) {\n              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\n            }\n            error = _errorForResponse(response.status, response.json, this.serializer);\n            if (error) {\n              throw error;\n            }\n            if (!response.json) {\n              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\n            }\n            responseData = response.json.data;\n            // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n            if (typeof responseData === 'undefined') {\n              // Consider the response malformed.\n              throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n            }\n            decodedData = this.serializer.decode(responseData);\n            return [2 /*return*/, {\n              data: decodedData\n            }];\n        }\n      });\n    });\n  };\n  return Service;\n}();\nfunction clearTimeoutWrapper(timer, promise) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, promise];\n        case 1:\n          result = _a.sent();\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          clearTimeout(timer);\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Functions.\r\n */\nvar FUNCTIONS_TYPE = 'functions';\nfunction registerFunctions(instance, fetchImpl) {\n  var namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  function factory(container, regionOrCustomDomain) {\n    // Dependencies\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var messagingProvider = container.getProvider('messaging');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);\n  }\n  instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\nvar name = \"@firebase/functions\";\nvar version = \"0.6.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterFunctions(firebase, fetch.bind(self));\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["../src/api/error.ts","../src/context.ts","../src/serializer.ts","../src/api/service.ts","../src/config.ts","../index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    regionOrCustomDomain?: string\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace, fetch.bind(self));\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}