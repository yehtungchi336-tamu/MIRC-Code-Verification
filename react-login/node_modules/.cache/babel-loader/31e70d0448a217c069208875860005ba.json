{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport useLatest from 'use-latest';\nvar useBeforeunload = function useBeforeunload(handler) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\"Expected `handler` to be of type `function`, but received type `\" + typeof handler + \"`\");\n    }\n  }\n  var handlerRef = useLatest(handler);\n  useEffect(function () {\n    var handleBeforeunload = function handleBeforeunload(event) {\n      var returnValue;\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      } // Chrome requires `returnValue` to be set.\n\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n    children = _ref$children === void 0 ? null : _ref$children,\n    onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired\n  };\n}\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"sources":["../src/useBeforeunload.js","../src/Beforeunload.js"],"names":["useBeforeunload","handler","process","env","NODE_ENV","TypeError","handlerRef","useLatest","useEffect","handleBeforeunload","event","returnValue","current","defaultPrevented","window","addEventListener","removeEventListener","Beforeunload","children","onBeforeunload","propTypes","PropTypes","any","func","isRequired"],"mappings":";;;IAGMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;EACnC,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IACzC,IAAI,OAAOD,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,IAAI,IAAhD,EAAsD;MACpD,MAAM,IAAII,SAAJ,CAAA,kEAAA,GACoE,OAAOJ,OAD3E,GAAA,GAAA,CAAN;IAGD;EACF;EAED,IAAMK,UAAU,GAAGC,SAAS,CAACN,OAAD,CAA5B;EAEAO,SAAS,CAAC,YAAM;IACd,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;MACpC,IAAIC,WAAJ;MACA,IAAIL,UAAU,CAACM,OAAXN,IAAsB,IAA1B,EAAgC;QAC9BK,WAAW,GAAGL,UAAU,CAACM,OAAXN,CAAmBI,KAAnBJ,CAAdK;MACD,CAJmC,CAAA;;MAOpC,IAAID,KAAK,CAACG,gBAAV,EAA4B;QAC1BH,KAAK,CAACC,WAAND,GAAoB,EAApBA;MACD;MAED,IAAI,OAAOC,WAAP,KAAuB,QAA3B,EAAqC;QACnCD,KAAK,CAACC,WAAND,GAAoBC,WAApBD;QACA,OAAOC,WAAP;MACD;IACF,CAfD;IAiBAG,MAAM,CAACC,gBAAPD,CAAwB,cAAxBA,EAAwCL,kBAAxCK,CAAAA;IAEA,OAAO,YAAM;MACXA,MAAM,CAACE,mBAAPF,CAA2B,cAA3BA,EAA2CL,kBAA3CK,CAAAA;IACD,CAFD;EAGD,CAvBQ,EAuBN,EAvBM,CAATN,CAXmC,CAAA;AAmCpC,CAAA;;ICnCKS,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAyC;EAAA,IAAA,aAAA,GAAA,IAAA,CAAtCC,QAAsC;IAAtCA,QAAsC,GAAA,aAAA,KAAA,KAAA,CAAA,GAA3B,IAA2B,GAAA,aAAA;IAArBC,cAAqB,GAAA,IAAA,CAArBA,cAAqB;EAC5DnB,eAAe,CAACmB,cAAD,CAAfnB;EACA,OAAOkB,QAAP;AACD,CAAA;AAED,IAAIhB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;EACzCe,YAAY,CAACG,SAAbH,GAAyB;IACvBC,QAAQ,EAAEG,SAAS,CAACC,GADG;IAEvBH,cAAc,EAAEE,SAAS,CAACE,IAAVF,CAAeG;EAFR,CAAzBP;AAID","sourcesContent":["import { useEffect } from 'react';\nimport useLatest from 'use-latest';\n\nconst useBeforeunload = (handler) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\n        `Expected \\`handler\\` to be of type \\`function\\`, but received type \\`${typeof handler}\\``\n      );\n    }\n  }\n\n  const handlerRef = useLatest(handler);\n\n  useEffect(() => {\n    const handleBeforeunload = (event) => {\n      let returnValue;\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      }\n\n      // Chrome requires `returnValue` to be set.\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired,\n  };\n}\n\nexport default Beforeunload;\n"]},"metadata":{},"sourceType":"module"}