{"ast":null,"code":"import firebase from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { __awaiter, __generator, __spread, __values, __assign } from 'tslib';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\nvar name = \"@firebase/installations\";\nvar version = \"0.4.19\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PENDING_TIMEOUT_MS = 10000;\nvar PACKAGE_VERSION = \"w:\" + version;\nvar INTERNAL_AUTH_VERSION = 'FIS_v2';\nvar INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nvar TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\nvar SERVICE = 'installations';\nvar SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: \"{$valueName}\"', _a[\"not-registered\" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.', _a[\"installation-not-found\" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.', _a[\"request-failed\" /* REQUEST_FAILED */] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"', _a[\"app-offline\" /* APP_OFFLINE */] = 'Could not process request. Application offline.', _a[\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */] = \"Can't delete installation while there is a pending registration request.\", _a);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\" /* REQUEST_FAILED */);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getInstallationsEndpoint(_a) {\n  var projectId = _a.projectId;\n  return INSTALLATIONS_API_URL + \"/projects/\" + projectId + \"/installations\";\n}\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2 /* COMPLETED */,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\nfunction getErrorFromResponse(requestName, response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var responseJson, errorData;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, response.json()];\n        case 1:\n          responseJson = _a.sent();\n          errorData = responseJson.error;\n          return [2 /*return*/, ERROR_FACTORY.create(\"request-failed\" /* REQUEST_FAILED */, {\n            requestName: requestName,\n            serverCode: errorData.code,\n            serverMessage: errorData.message,\n            serverStatus: errorData.status\n          })];\n      }\n    });\n  });\n}\nfunction getHeaders(_a) {\n  var apiKey = _a.apiKey;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\nfunction getHeadersWithAuth(appConfig, _a) {\n  var refreshToken = _a.refreshToken;\n  var headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\nfunction retryIfServerError(fn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, fn()];\n        case 1:\n          result = _a.sent();\n          if (result.status >= 500 && result.status < 600) {\n            // Internal Server Error. Retry request.\n            return [2 /*return*/, fn()];\n          }\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\nfunction getAuthorizationHeader(refreshToken) {\n  return INTERNAL_AUTH_VERSION + \" \" + refreshToken;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createInstallationRequest(appConfig, _a) {\n  var fid = _a.fid;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          endpoint = getInstallationsEndpoint(appConfig);\n          headers = getHeaders(appConfig);\n          body = {\n            fid: fid,\n            authVersion: INTERNAL_AUTH_VERSION,\n            appId: appConfig.appId,\n            sdkVersion: PACKAGE_VERSION\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4 /*yield*/, retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n        case 1:\n          response = _b.sent();\n          if (!response.ok) return [3 /*break*/, 3];\n          return [4 /*yield*/, response.json()];\n        case 2:\n          responseValue = _b.sent();\n          registeredInstallationEntry = {\n            fid: responseValue.fid || fid,\n            registrationStatus: 2 /* COMPLETED */,\n            refreshToken: responseValue.refreshToken,\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n          };\n          return [2 /*return*/, registeredInstallationEntry];\n        case 3:\n          return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];\n        case 4:\n          throw _b.sent();\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a promise that resolves after given time passes. */\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction bufferToBase64UrlSafe(array) {\n  var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nvar INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    var fidByteArray = new Uint8Array(17);\n    var crypto_1 = self.crypto || self.msCrypto;\n    crypto_1.getRandomValues(fidByteArray);\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 112 + fidByteArray[0] % 16;\n    var fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray) {\n  var b64String = bufferToBase64UrlSafe(fidByteArray);\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a string key that can be used to identify the app. */\nfunction getKey(appConfig) {\n  return appConfig.appName + \"!\" + appConfig.appId;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\nfunction fidChanged(appConfig, fid) {\n  var key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\nfunction removeCallback(appConfig, callback) {\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    return;\n  }\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\nfunction callFidChangeCallbacks(key, fid) {\n  var e_1, _a;\n  var callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n  try {\n    for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n      var callback = callbacks_1_1.value;\n      callback(fid);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\nfunction broadcastFidChange(key, fid) {\n  var channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({\n      key: key,\n      fid: fid\n    });\n  }\n  closeBroadcastChannel();\n}\nvar broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = function (e) {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DATABASE_NAME = 'firebase-installations-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\nvar dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nfunction set(appConfig, value) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx, objectStore, oldValue;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          objectStore = tx.objectStore(OBJECT_STORE_NAME);\n          return [4 /*yield*/, objectStore.get(key)];\n        case 2:\n          oldValue = _a.sent();\n          return [4 /*yield*/, objectStore.put(value, key)];\n        case 3:\n          _a.sent();\n          return [4 /*yield*/, tx.complete];\n        case 4:\n          _a.sent();\n          if (!oldValue || oldValue.fid !== value.fid) {\n            fidChanged(appConfig, value.fid);\n          }\n          return [2 /*return*/, value];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\nfunction remove(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n        case 2:\n          _a.sent();\n          return [4 /*yield*/, tx.complete];\n        case 3:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\nfunction update(appConfig, updateFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx, store, oldValue, newValue;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          store = tx.objectStore(OBJECT_STORE_NAME);\n          return [4 /*yield*/, store.get(key)];\n        case 2:\n          oldValue = _a.sent();\n          newValue = updateFn(oldValue);\n          if (!(newValue === undefined)) return [3 /*break*/, 4];\n          return [4 /*yield*/, store.delete(key)];\n        case 3:\n          _a.sent();\n          return [3 /*break*/, 6];\n        case 4:\n          return [4 /*yield*/, store.put(newValue, key)];\n        case 5:\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          return [4 /*yield*/, tx.complete];\n        case 7:\n          _a.sent();\n          if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n            fidChanged(appConfig, newValue.fid);\n          }\n          return [2 /*return*/, newValue];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\nfunction getInstallationEntry(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registrationPromise, installationEntry;\n    var _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, update(appConfig, function (oldEntry) {\n            var installationEntry = updateOrCreateInstallationEntry(oldEntry);\n            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\n            registrationPromise = entryWithPromise.registrationPromise;\n            return entryWithPromise.installationEntry;\n          })];\n        case 1:\n          installationEntry = _b.sent();\n          if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];\n          _a = {};\n          return [4 /*yield*/, registrationPromise];\n        case 2:\n          // FID generation failed. Waiting for the FID from the server.\n          return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];\n        case 3:\n          return [2 /*return*/, {\n            installationEntry: installationEntry,\n            registrationPromise: registrationPromise\n          }];\n      }\n    });\n  });\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  var entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0 /* NOT_STARTED */\n  };\n\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\n  if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\n      return {\n        installationEntry: installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n    // Try registering. Change status to IN_PROGRESS.\n    var inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1 /* IN_PROGRESS */,\n      registrationTime: Date.now()\n    };\n    var registrationPromise = registerInstallation(appConfig, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise: registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\n    return {\n      installationEntry: installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return {\n      installationEntry: installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\nfunction registerInstallation(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registeredInstallationEntry, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 7]);\n          return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];\n        case 1:\n          registeredInstallationEntry = _a.sent();\n          return [2 /*return*/, set(appConfig, registeredInstallationEntry)];\n        case 2:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];\n          // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n          return [4 /*yield*/, remove(appConfig)];\n        case 3:\n          // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n          _a.sent();\n          return [3 /*break*/, 6];\n        case 4:\n          // Registration failed. Set FID as not registered.\n          return [4 /*yield*/, set(appConfig, {\n            fid: installationEntry.fid,\n            registrationStatus: 0 /* NOT_STARTED */\n          })];\n\n        case 5:\n          // Registration failed. Set FID as not registered.\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          throw e_1;\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/** Call if FID registration is pending in another request. */\nfunction waitUntilFidRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry, _a, installationEntry, registrationPromise;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, updateInstallationRequest(appConfig)];\n        case 1:\n          entry = _b.sent();\n          _b.label = 2;\n        case 2:\n          if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\n          // createInstallation request still in progress.\n          return [4 /*yield*/, sleep(100)];\n        case 3:\n          // createInstallation request still in progress.\n          _b.sent();\n          return [4 /*yield*/, updateInstallationRequest(appConfig)];\n        case 4:\n          entry = _b.sent();\n          return [3 /*break*/, 2];\n        case 5:\n          if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];\n          return [4 /*yield*/, getInstallationEntry(appConfig)];\n        case 6:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n          if (registrationPromise) {\n            return [2 /*return*/, registrationPromise];\n          } else {\n            // if there is no registrationPromise, entry is registered.\n            return [2 /*return*/, installationEntry];\n          }\n        case 7:\n          return [2 /*return*/, entry];\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0 /* NOT_STARTED */\n    };\n  }\n\n  return entry;\n}\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1 /* IN_PROGRESS */ && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction generateAuthTokenRequest(_a, installationEntry) {\n  var appConfig = _a.appConfig,\n    platformLoggerProvider = _a.platformLoggerProvider;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          platformLogger = platformLoggerProvider.getImmediate({\n            optional: true\n          });\n          if (platformLogger) {\n            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n          }\n          body = {\n            installation: {\n              sdkVersion: PACKAGE_VERSION\n            }\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4 /*yield*/, retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n        case 1:\n          response = _b.sent();\n          if (!response.ok) return [3 /*break*/, 3];\n          return [4 /*yield*/, response.json()];\n        case 2:\n          responseValue = _b.sent();\n          completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n          return [2 /*return*/, completedAuthToken];\n        case 3:\n          return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];\n        case 4:\n          throw _b.sent();\n      }\n    });\n  });\n}\nfunction getGenerateAuthTokenEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid + \"/authTokens:generate\";\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\nfunction refreshAuthToken(dependencies, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenPromise, entry, authToken, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, update(dependencies.appConfig, function (oldEntry) {\n            if (!isEntryRegistered(oldEntry)) {\n              throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\n            }\n\n            var oldAuthToken = oldEntry.authToken;\n            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n              // There is a valid token in the DB.\n              return oldEntry;\n            } else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\n              // There already is a token request in progress.\n              tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n              return oldEntry;\n            } else {\n              // No token or token expired.\n              if (!navigator.onLine) {\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\n              }\n\n              var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n              tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n              return inProgressEntry;\n            }\n          })];\n        case 1:\n          entry = _b.sent();\n          if (!tokenPromise) return [3 /*break*/, 3];\n          return [4 /*yield*/, tokenPromise];\n        case 2:\n          _a = _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          _a = entry.authToken;\n          _b.label = 4;\n        case 4:\n          authToken = _a;\n          return [2 /*return*/, authToken];\n      }\n    });\n  });\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\nfunction waitUntilAuthTokenRequest(dependencies, forceRefresh) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry, authToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];\n        case 1:\n          entry = _a.sent();\n          _a.label = 2;\n        case 2:\n          if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\n          // generateAuthToken still in progress.\n          return [4 /*yield*/, sleep(100)];\n        case 3:\n          // generateAuthToken still in progress.\n          _a.sent();\n          return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];\n        case 4:\n          entry = _a.sent();\n          return [3 /*break*/, 2];\n        case 5:\n          authToken = entry.authToken;\n          if (authToken.requestStatus === 0 /* NOT_STARTED */) {\n            // The request timed out or failed in a different call. Try again.\n            return [2 /*return*/, refreshAuthToken(dependencies, forceRefresh)];\n          } else {\n            return [2 /*return*/, authToken];\n          }\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\n    }\n\n    var oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return __assign(__assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0 /* NOT_STARTED */\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\nfunction fetchAuthTokenFromServer(dependencies, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 8]);\n          return [4 /*yield*/, generateAuthTokenRequest(dependencies, installationEntry)];\n        case 1:\n          authToken = _a.sent();\n          updatedInstallationEntry = __assign(__assign({}, installationEntry), {\n            authToken: authToken\n          });\n          return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];\n        case 2:\n          _a.sent();\n          return [2 /*return*/, authToken];\n        case 3:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];\n          // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n          return [4 /*yield*/, remove(dependencies.appConfig)];\n        case 4:\n          // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n          _a.sent();\n          return [3 /*break*/, 7];\n        case 5:\n          updatedInstallationEntry = __assign(__assign({}, installationEntry), {\n            authToken: {\n              requestStatus: 0 /* NOT_STARTED */\n            }\n          });\n          return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];\n        case 6:\n          _a.sent();\n          _a.label = 7;\n        case 7:\n          throw e_1;\n        case 8:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2 /* COMPLETED */;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2 /* COMPLETED */ && !isAuthTokenExpired(authToken);\n}\nfunction isAuthTokenExpired(authToken) {\n  var now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  var inProgressAuthToken = {\n    requestStatus: 1 /* IN_PROGRESS */,\n    requestTime: Date.now()\n  };\n  return __assign(__assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1 /* IN_PROGRESS */ && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getId(dependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, installationEntry, registrationPromise;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, getInstallationEntry(dependencies.appConfig)];\n        case 1:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n          if (registrationPromise) {\n            registrationPromise.catch(console.error);\n          } else {\n            // If the installation is already registered, update the authentication\n            // token if needed.\n            refreshAuthToken(dependencies).catch(console.error);\n          }\n          return [2 /*return*/, installationEntry.fid];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getToken(dependencies, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, completeInstallationRegistration(dependencies.appConfig)];\n        case 1:\n          _a.sent();\n          return [4 /*yield*/, refreshAuthToken(dependencies, forceRefresh)];\n        case 2:\n          authToken = _a.sent();\n          return [2 /*return*/, authToken.token];\n      }\n    });\n  });\n}\nfunction completeInstallationRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registrationPromise;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getInstallationEntry(appConfig)];\n        case 1:\n          registrationPromise = _a.sent().registrationPromise;\n          if (!registrationPromise) return [3 /*break*/, 3];\n          // A createInstallation request is in progress. Wait until it finishes.\n          return [4 /*yield*/, registrationPromise];\n        case 2:\n          // A createInstallation request is in progress. Wait until it finishes.\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction deleteInstallationRequest(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, request, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          endpoint = getDeleteEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          request = {\n            method: 'DELETE',\n            headers: headers\n          };\n          return [4 /*yield*/, retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n        case 1:\n          response = _a.sent();\n          if (!!response.ok) return [3 /*break*/, 3];\n          return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];\n        case 2:\n          throw _a.sent();\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction getDeleteEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction deleteInstallation(dependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var appConfig, entry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          appConfig = dependencies.appConfig;\n          return [4 /*yield*/, update(appConfig, function (oldEntry) {\n            if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\n              // Delete the unregistered entry without sending a deleteInstallation request.\n              return undefined;\n            }\n            return oldEntry;\n          })];\n        case 1:\n          entry = _a.sent();\n          if (!entry) return [3 /*break*/, 6];\n          if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];\n          // Can't delete while trying to register.\n          throw ERROR_FACTORY.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\n        case 2:\n          if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];\n          if (!!navigator.onLine) return [3 /*break*/, 3];\n          throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\n        case 3:\n          return [4 /*yield*/, deleteInstallationRequest(appConfig, entry)];\n        case 4:\n          _a.sent();\n          return [4 /*yield*/, remove(appConfig)];\n        case 5:\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n */\nfunction _onIdChange(_a, callback) {\n  var appConfig = _a.appConfig;\n  addCallback(appConfig, callback);\n  return function () {\n    removeCallback(appConfig, callback);\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction extractAppConfig(app) {\n  var e_1, _a;\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n  // Required app config keys\n  var configKeys = ['projectId', 'apiKey', 'appId'];\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n      if (!app.options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\n    valueName: valueName\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerInstallations(instance) {\n  var installationsName = 'installations';\n  instance.INTERNAL.registerComponent(new Component(installationsName, function (container) {\n    var app = container.getProvider('app').getImmediate();\n    // Throws if app isn't configured properly.\n    var appConfig = extractAppConfig(app);\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    var dependencies = {\n      appConfig: appConfig,\n      platformLoggerProvider: platformLoggerProvider\n    };\n    var installations = {\n      app: app,\n      getId: function getId() {\n        return _getId(dependencies);\n      },\n      getToken: function getToken(forceRefresh) {\n        return _getToken(dependencies, forceRefresh);\n      },\n      delete: function _delete() {\n        return deleteInstallation(dependencies);\n      },\n      onIdChange: function onIdChange(callback) {\n        return _onIdChange(dependencies, callback);\n      }\n    };\n    return installations;\n  }, \"PUBLIC\" /* PUBLIC */));\n  instance.registerVersion(name, version);\n}\nregisterInstallations(firebase);\nexport { registerInstallations };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;AAmBO,IAAMA,kBAAkB,GAAG,KAAK;AAEhC,IAAMC,eAAe,GAAG,OAAKC,OAAS;AACtC,IAAMC,qBAAqB,GAAG,QAAQ;AAEtC,IAAMC,qBAAqB,GAChC,iDAAiD;AAE5C,IAAMC,uBAAuB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AAE/C,IAAMC,OAAO,GAAG,eAAe;AAC/B,IAAMC,YAAY,GAAG,eAAe;;AC9B3C;;;;;;;;;;;;;;;;;AA6BA,IAAMC,qBAAqB,aACzBC,kEACE,iDAAiD,EACnDA,4CAA4B,0CAA0C,EACtEA,4DAAoC,kCAAkC,EACtEA,4CACE,4FAA4F,EAC9FA,sCAAyB,iDAAiD,EAC1EA,sEACE,0EAA0E,KAC7E;AAYM,IAAMC,aAAa,GAAG,IAAIC,YAAY,CAC3CL,OAAO,EACPC,YAAY,EACZC,qBAAqB,CACtB;AAUD;SACgBI,aAAa,CAACC,KAAc;EAC1C,OACEA,KAAK,YAAYC,aAAa,IAC9BD,KAAK,CAACE,IAAI,CAACC,QAAQ,uCAA0B;AAEjD;;ACvEA;;;;;;;;;;;;;;;;SA+BgBC,wBAAwB,CAACR,EAAwB;MAAtBS,SAAS;EAClD,OAAUd,qBAAqB,kBAAac,SAAS,mBAAgB;AACvE;SAEgBC,gCAAgC,CAC9CC,QAAmC;EAEnC,OAAO;IACLC,KAAK,EAAED,QAAQ,CAACC,KAAK;IACrBC,aAAa;IACbC,SAAS,EAAEC,iCAAiC,CAACJ,QAAQ,CAACG,SAAS,CAAC;IAChEE,YAAY,EAAEC,IAAI,CAACC,GAAG;GACvB;AACH;SAEsBC,oBAAoB,CACxCC,WAAmB,EACnBT,QAAkB;;;;;;UAEkB,qBAAMA,QAAQ,CAACU,IAAI,EAAE;;UAAnDC,YAAY,GAAkBtB,SAAqB;UACnDuB,SAAS,GAAGD,YAAY,CAAClB,KAAK;UACpC,sBAAOH,aAAa,CAACuB,MAAM,wCAA2B;YACpDJ,WAAW;YACXK,UAAU,EAAEF,SAAS,CAACjB,IAAI;YAC1BoB,aAAa,EAAEH,SAAS,CAACI,OAAO;YAChCC,YAAY,EAAEL,SAAS,CAACM;WACzB,CAAC;MAAC;;;;SAGWC,UAAU,CAAC9B,EAAqB;MAAnB+B,MAAM;EACjC,OAAO,IAAIC,OAAO,CAAC;IACjB,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE,kBAAkB;IAC1B,gBAAgB,EAAEF;GACnB,CAAC;AACJ;SAEgBG,kBAAkB,CAChCC,SAAoB,EACpBnC,EAA6C;MAA3CoC,YAAY;EAEd,IAAMC,OAAO,GAAGP,UAAU,CAACK,SAAS,CAAC;EACrCE,OAAO,CAACC,MAAM,CAAC,eAAe,EAAEC,sBAAsB,CAACH,YAAY,CAAC,CAAC;EACrE,OAAOC,OAAO;AAChB;AAUA;;;;;SAKsBG,kBAAkB,CACtCC,EAA2B;;;;;;UAEZ,qBAAMA,EAAE,EAAE;;UAAnBC,MAAM,GAAG1C,SAAU;UAEzB,IAAI0C,MAAM,CAACb,MAAM,IAAI,GAAG,IAAIa,MAAM,CAACb,MAAM,GAAG,GAAG,EAAE;;YAE/C,sBAAOY,EAAE,EAAE;;UAGb,sBAAOC,MAAM;MAAC;;;;AAGhB,SAAS3B,iCAAiC,CAAC4B,iBAAyB;;EAElE,OAAOC,MAAM,CAACD,iBAAiB,CAACE,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACtD;AAEA,SAASN,sBAAsB,CAACH,YAAoB;EAClD,OAAU1C,qBAAqB,SAAI0C,YAAc;AACnD;;AC9GA;;;;;;;;;;;;;;;;SAiCsBU,yBAAyB,CAC7CX,SAAoB,EACpBnC,EAAoC;MAAlC+C,GAAG;;;;;;UAECC,QAAQ,GAAGxC,wBAAwB,CAAC2B,SAAS,CAAC;UAE9CE,OAAO,GAAGP,UAAU,CAACK,SAAS,CAAC;UAC/Bc,IAAI,GAAG;YACXF,GAAG;YACHG,WAAW,EAAExD,qBAAqB;YAClCyD,KAAK,EAAEhB,SAAS,CAACgB,KAAK;YACtBC,UAAU,EAAE5D;WACb;UAEK6D,OAAO,GAAgB;YAC3BC,MAAM,EAAE,MAAM;YACdjB,OAAO;YACPY,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;WAC1B;UAEgB,qBAAMT,kBAAkB,CAAC;YAAM,YAAK,CAACQ,QAAQ,EAAEK,OAAO,CAAC;UAAA,EAAC;;UAAnE1C,QAAQ,GAAG8C,SAAwD;eACrE9C,QAAQ,CAAC+C,EAAE,EAAX;UACgD,qBAAM/C,QAAQ,CAACU,IAAI,EAAE;;UAAjEsC,aAAa,GAA+BF,SAAqB;UACjEG,2BAA2B,GAAgC;YAC/Db,GAAG,EAAEY,aAAa,CAACZ,GAAG,IAAIA,GAAG;YAC7Bc,kBAAkB;YAClBzB,YAAY,EAAEuB,aAAa,CAACvB,YAAY;YACxC0B,SAAS,EAAEpD,gCAAgC,CAACiD,aAAa,CAACG,SAAS;WACpE;UACD,sBAAOF,2BAA2B;;UAE5B,qBAAMzC,oBAAoB,CAAC,qBAAqB,EAAER,QAAQ,CAAC;;UAAjE,MAAM8C,SAA2D;MAAC;;;;;AChEtE;;;;;;;;;;;;;;;;AAiBA;SACgBM,KAAK,CAACC,EAAU;EAC9B,OAAO,IAAIC,OAAO,CAAO,iBAAO;IAC9BC,UAAU,CAACC,OAAO,EAAEH,EAAE,CAAC;GACxB,CAAC;AACJ;;ACtBA;;;;;;;;;;;;;;;;SAiBgBI,qBAAqB,CAACC,KAAiB;EACrD,IAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAY,OAAnBD,MAAM,WAAiBH,KAAK,GAAE;EAC/C,OAAOC,GAAG,CAACzB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpD;;ACpBA;;;;;;;;;;;;;;;;AAmBO,IAAM6B,iBAAiB,GAAG,mBAAmB;AAC7C,IAAMC,WAAW,GAAG,EAAE;AAE7B;;;;SAIgBC,WAAW;EACzB,IAAI;;;IAGF,IAAMC,YAAY,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;IACvC,IAAMC,QAAM,GACVC,IAAI,CAACC,MAAM,IAAMD,IAAyC,CAACE,QAAQ;IACrEH,QAAM,CAACI,eAAe,CAACN,YAAY,CAAC;;IAGpCA,YAAY,CAAC,CAAC,CAAC,GAAG,GAAU,GAAIA,YAAY,CAAC,CAAC,CAAC,GAAG,EAAW;IAE7D,IAAM9B,GAAG,GAAGqC,MAAM,CAACP,YAAY,CAAC;IAEhC,OAAOH,iBAAiB,CAACW,IAAI,CAACtC,GAAG,CAAC,GAAGA,GAAG,GAAG4B,WAAW;GACvD,CAAC,WAAM;;IAEN,OAAOA,WAAW;;AAEtB;AAEA;AACA,SAASS,MAAM,CAACP,YAAwB;EACtC,IAAMS,SAAS,GAAGlB,qBAAqB,CAACS,YAAY,CAAC;;;EAIrD,OAAOS,SAAS,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;AAChC;;ACtDA;;;;;;;;;;;;;;;;AAmBA;SACgBC,MAAM,CAACrD,SAAoB;EACzC,OAAUA,SAAS,CAACsD,OAAO,SAAItD,SAAS,CAACgB,KAAO;AAClD;;ACtBA;;;;;;;;;;;;;;;;AAqBA,IAAMuC,kBAAkB,GAAyC,IAAIC,GAAG,EAAE;AAE1E;;;;SAIgBC,UAAU,CAACzD,SAAoB,EAAEY,GAAW;EAC1D,IAAM8C,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;EAE7B2D,sBAAsB,CAACD,GAAG,EAAE9C,GAAG,CAAC;EAChCgD,kBAAkB,CAACF,GAAG,EAAE9C,GAAG,CAAC;AAC9B;SAEgBiD,WAAW,CACzB7D,SAAoB,EACpB8D,QAA4B;;;EAI5BC,mBAAmB,EAAE;EAErB,IAAML,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;EAE7B,IAAIgE,WAAW,GAAGT,kBAAkB,CAACU,GAAG,CAACP,GAAG,CAAC;EAC7C,IAAI,CAACM,WAAW,EAAE;IAChBA,WAAW,GAAG,IAAIE,GAAG,EAAE;IACvBX,kBAAkB,CAACY,GAAG,CAACT,GAAG,EAAEM,WAAW,CAAC;;EAE1CA,WAAW,CAACI,GAAG,CAACN,QAAQ,CAAC;AAC3B;SAEgBO,cAAc,CAC5BrE,SAAoB,EACpB8D,QAA4B;EAE5B,IAAMJ,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;EAE7B,IAAMgE,WAAW,GAAGT,kBAAkB,CAACU,GAAG,CAACP,GAAG,CAAC;EAE/C,IAAI,CAACM,WAAW,EAAE;IAChB;;EAGFA,WAAW,CAACM,MAAM,CAACR,QAAQ,CAAC;EAC5B,IAAIE,WAAW,CAACO,IAAI,KAAK,CAAC,EAAE;IAC1BhB,kBAAkB,CAACe,MAAM,CAACZ,GAAG,CAAC;;;EAIhCc,qBAAqB,EAAE;AACzB;AAEA,SAASb,sBAAsB,CAACD,GAAW,EAAE9C,GAAW;;EACtD,IAAM6D,SAAS,GAAGlB,kBAAkB,CAACU,GAAG,CAACP,GAAG,CAAC;EAC7C,IAAI,CAACe,SAAS,EAAE;IACd;;;IAGF,KAAuB,oCAAS,gGAAE;MAA7B,IAAMX,QAAQ;MACjBA,QAAQ,CAAClD,GAAG,CAAC;;;;;;;;;;;;;AAEjB;AAEA,SAASgD,kBAAkB,CAACF,GAAW,EAAE9C,GAAW;EAClD,IAAM8D,OAAO,GAAGX,mBAAmB,EAAE;EACrC,IAAIW,OAAO,EAAE;IACXA,OAAO,CAACC,WAAW,CAAC;MAAEjB,GAAG;MAAE9C,GAAG;IAAA,CAAE,CAAC;;EAEnC4D,qBAAqB,EAAE;AACzB;AAEA,IAAII,gBAAgB,GAA4B,IAAI;AACpD;AACA,SAASb,mBAAmB;EAC1B,IAAI,CAACa,gBAAgB,IAAI,kBAAkB,IAAI/B,IAAI,EAAE;IACnD+B,gBAAgB,GAAG,IAAIC,gBAAgB,CAAC,uBAAuB,CAAC;IAChED,gBAAgB,CAACE,SAAS,GAAG,WAAC;MAC5BnB,sBAAsB,CAACoB,CAAC,CAACC,IAAI,CAACtB,GAAG,EAAEqB,CAAC,CAACC,IAAI,CAACpE,GAAG,CAAC;KAC/C;;EAEH,OAAOgE,gBAAgB;AACzB;AAEA,SAASJ,qBAAqB;EAC5B,IAAIjB,kBAAkB,CAACgB,IAAI,KAAK,CAAC,IAAIK,gBAAgB,EAAE;IACrDA,gBAAgB,CAACK,KAAK,EAAE;IACxBL,gBAAgB,GAAG,IAAI;;AAE3B;;AC7GA;;;;;;;;;;;;;;;;AAuBA,IAAMM,aAAa,GAAG,iCAAiC;AACvD,IAAMC,gBAAgB,GAAG,CAAC;AAC1B,IAAMC,iBAAiB,GAAG,8BAA8B;AAExD,IAAIC,SAAS,GAAuB,IAAI;AACxC,SAASC,YAAY;EACnB,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAGE,MAAM,CAACL,aAAa,EAAEC,gBAAgB,EAAE,mBAAS;;;;;;MAM3D,QAAQK,SAAS,CAACC,UAAU;QAC1B,KAAK,CAAC;UACJD,SAAS,CAACE,iBAAiB,CAACN,iBAAiB,CAAC;MAAC;KAEpD,CAAC;;EAEJ,OAAOC,SAAS;AAClB;AAcA;SACsBlB,GAAG,CACvBnE,SAAoB,EACpB2F,KAAgB;;;;;;UAEVjC,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;UAClB,qBAAMsF,YAAY,EAAE;;UAAzBM,EAAE,GAAG/H,SAAoB;UACzBgI,EAAE,GAAGD,EAAE,CAACE,WAAW,CAACV,iBAAiB,EAAE,WAAW,CAAC;UACnDW,WAAW,GAAGF,EAAE,CAACE,WAAW,CAACX,iBAAiB,CAAC;UACpC,qBAAMW,WAAW,CAAC9B,GAAG,CAACP,GAAG,CAAC;;UAArCsC,QAAQ,GAAGnI,SAA0B;UAC3C,qBAAMkI,WAAW,CAACE,GAAG,CAACN,KAAK,EAAEjC,GAAG,CAAC;;UAAjC7F,SAAiC;UACjC,qBAAMgI,EAAE,CAACK,QAAQ;;UAAjBrI,SAAiB;UAEjB,IAAI,CAACmI,QAAQ,IAAIA,QAAQ,CAACpF,GAAG,KAAK+E,KAAK,CAAC/E,GAAG,EAAE;YAC3C6C,UAAU,CAACzD,SAAS,EAAE2F,KAAK,CAAC/E,GAAG,CAAC;;UAGlC,sBAAO+E,KAAK;MAAC;;;;AAGf;SACsBQ,MAAM,CAACnG,SAAoB;;;;;;UACzC0D,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;UAClB,qBAAMsF,YAAY,EAAE;;UAAzBM,EAAE,GAAG/H,SAAoB;UACzBgI,EAAE,GAAGD,EAAE,CAACE,WAAW,CAACV,iBAAiB,EAAE,WAAW,CAAC;UACzD,qBAAMS,EAAE,CAACE,WAAW,CAACX,iBAAiB,CAAC,CAACd,MAAM,CAACZ,GAAG,CAAC;;UAAnD7F,SAAmD;UACnD,qBAAMgI,EAAE,CAACK,QAAQ;;UAAjBrI,SAAiB;;;;;;AAGnB;;;;;;SAMsBuI,MAAM,CAC1BpG,SAAoB,EACpBqG,QAAqE;;;;;;UAE/D3C,GAAG,GAAGL,MAAM,CAACrD,SAAS,CAAC;UAClB,qBAAMsF,YAAY,EAAE;;UAAzBM,EAAE,GAAG/H,SAAoB;UACzBgI,EAAE,GAAGD,EAAE,CAACE,WAAW,CAACV,iBAAiB,EAAE,WAAW,CAAC;UACnDkB,KAAK,GAAGT,EAAE,CAACE,WAAW,CAACX,iBAAiB,CAAC;UACC,qBAAMkB,KAAK,CAACrC,GAAG,CAACP,GAAG,CAAC;;UAA9DsC,QAAQ,GAAkCnI,SAAoB;UAC9D0I,QAAQ,GAAGF,QAAQ,CAACL,QAAQ,CAAC;gBAE/BO,QAAQ,KAAKC,SAAS,GAAtB;UACF,qBAAMF,KAAK,CAAChC,MAAM,CAACZ,GAAG,CAAC;;UAAvB7F,SAAuB;;;UAEvB,qBAAMyI,KAAK,CAACL,GAAG,CAACM,QAAQ,EAAE7C,GAAG,CAAC;;UAA9B7F,SAA8B;;;UAEhC,qBAAMgI,EAAE,CAACK,QAAQ;;UAAjBrI,SAAiB;UAEjB,IAAI0I,QAAQ,KAAK,CAACP,QAAQ,IAAIA,QAAQ,CAACpF,GAAG,KAAK2F,QAAQ,CAAC3F,GAAG,CAAC,EAAE;YAC5D6C,UAAU,CAACzD,SAAS,EAAEuG,QAAQ,CAAC3F,GAAG,CAAC;;UAGrC,sBAAO2F,QAAQ;MAAC;;;;;AClHlB;;;;;;;;;;;;;;;;AAqCA;;;;SAIsBE,oBAAoB,CACxCzG,SAAoB;;;;;;;UAIM,qBAAMoG,MAAM,CAACpG,SAAS,EAAE,kBAAQ;YACxD,IAAM0G,iBAAiB,GAAGC,+BAA+B,CAACC,QAAQ,CAAC;YACnE,IAAMC,gBAAgB,GAAGC,8BAA8B,CACrD9G,SAAS,EACT0G,iBAAiB,CAClB;YACDK,mBAAmB,GAAGF,gBAAgB,CAACE,mBAAmB;YAC1D,OAAOF,gBAAgB,CAACH,iBAAiB;WAC1C,CAAC;;UARIA,iBAAiB,GAAGpF,SAQxB;gBAEEoF,iBAAiB,CAAC9F,GAAG,KAAK4B,WAAW,GAArC;;UAE0B,qBAAMuE,mBAAoB;;;UAAtD,uBAASlJ,oBAAiB,GAAEyD,SAA0B;;UAGxD,sBAAO;YACLoF,iBAAiB;YACjBK,mBAAmB;WACpB;MAAC;;;;AAGJ;;;;AAIA,SAASJ,+BAA+B,CACtCC,QAAuC;EAEvC,IAAMI,KAAK,GAAsBJ,QAAQ,IAAI;IAC3ChG,GAAG,EAAE6B,WAAW,EAAE;IAClBf,kBAAkB;GACnB;;EAED,OAAOuF,oBAAoB,CAACD,KAAK,CAAC;AACpC;AAEA;;;;;;;AAOA,SAASF,8BAA8B,CACrC9G,SAAoB,EACpB0G,iBAAoC;EAEpC,IAAIA,iBAAiB,CAAChF,kBAAkB,0BAAgC;IACtE,IAAI,CAACwF,SAAS,CAACC,MAAM,EAAE;;MAErB,IAAMC,4BAA4B,GAAGtF,OAAO,CAACuF,MAAM,CACjDvJ,aAAa,CAACuB,MAAM,iCAAuB,CAC5C;MACD,OAAO;QACLqH,iBAAiB;QACjBK,mBAAmB,EAAEK;OACtB;;;IAIH,IAAME,eAAe,GAAgC;MACnD1G,GAAG,EAAE8F,iBAAiB,CAAC9F,GAAG;MAC1Bc,kBAAkB;MAClB6F,gBAAgB,EAAEzI,IAAI,CAACC,GAAG;KAC3B;IACD,IAAMgI,mBAAmB,GAAGS,oBAAoB,CAC9CxH,SAAS,EACTsH,eAAe,CAChB;IACD,OAAO;MAAEZ,iBAAiB,EAAEY,eAAe;MAAEP,mBAAmB;IAAA,CAAE;GACnE,MAAM,IACLL,iBAAiB,CAAChF,kBAAkB,0BACpC;IACA,OAAO;MACLgF,iBAAiB;MACjBK,mBAAmB,EAAEU,wBAAwB,CAACzH,SAAS;KACxD;GACF,MAAM;IACL,OAAO;MAAE0G,iBAAiB;IAAA,CAAE;;AAEhC;AAEA;AACA,SAAec,oBAAoB,CACjCxH,SAAoB,EACpB0G,iBAA8C;;;;;;;UAGR,qBAAM/F,yBAAyB,CACjEX,SAAS,EACT0G,iBAAiB,CAClB;;UAHKjF,2BAA2B,GAAG5D,SAGnC;UACD,sBAAOsG,GAAG,CAACnE,SAAS,EAAEyB,2BAA2B,CAAC;;;gBAE9CzD,aAAa,CAAC0J,GAAC,CAAC,IAAIA,GAAC,CAACC,UAAU,CAACrI,UAAU,KAAK,GAAG,GAAnD;;;UAGF,qBAAM6G,MAAM,CAACnG,SAAS,CAAC;;;;UAAvBnC,SAAuB;;;;UAGvB,qBAAMsG,GAAG,CAACnE,SAAS,EAAE;YACnBY,GAAG,EAAE8F,iBAAiB,CAAC9F,GAAG;YAC1Bc,kBAAkB;WACnB,CAAC;;;;UAHF7D,SAGE;;;UAEJ,MAAM6J,GAAC;;;;;;;AAIX;AACA,SAAeD,wBAAwB,CACrCzH,SAAoB;;;;;;UAMW,qBAAM4H,yBAAyB,CAAC5H,SAAS,CAAC;;UAArEgH,KAAK,GAAsB1F,SAA0C;;;gBAClE0F,KAAK,CAACtF,kBAAkB,yBAA8B;;UAE3D,qBAAME,KAAK,CAAC,GAAG,CAAC;;;UAAhBN,SAAgB;UAER,qBAAMsG,yBAAyB,CAAC5H,SAAS,CAAC;;UAAlDgH,KAAK,GAAG1F,SAA0C;;;gBAGhD0F,KAAK,CAACtF,kBAAkB,yBAA8B,EAAtD;UAKE,qBAAM+E,oBAAoB,CAACzG,SAAS,CAAC;;UAHnCnC,KAGFyD,SAAqC,EAFvCoF,iBAAiB,yBACjBK,mBAAmB;UAGrB,IAAIA,mBAAmB,EAAE;YACvB,sBAAOA,mBAAmB;WAC3B,MAAM;;YAEL,sBAAOL,iBAAgD;;;UAI3D,sBAAOM,KAAK;MAAC;;;;AAGf;;;;;;;;AAQA,SAASY,yBAAyB,CAChC5H,SAAoB;EAEpB,OAAOoG,MAAM,CAACpG,SAAS,EAAE,kBAAQ;IAC/B,IAAI,CAAC4G,QAAQ,EAAE;MACb,MAAM9I,aAAa,CAACuB,MAAM,uDAAkC;;;IAE9D,OAAO4H,oBAAoB,CAACL,QAAQ,CAAC;GACtC,CAAC;AACJ;AAEA,SAASK,oBAAoB,CAACD,KAAwB;EACpD,IAAIa,8BAA8B,CAACb,KAAK,CAAC,EAAE;IACzC,OAAO;MACLpG,GAAG,EAAEoG,KAAK,CAACpG,GAAG;MACdc,kBAAkB;KACnB;;;EAGH,OAAOsF,KAAK;AACd;AAEA,SAASa,8BAA8B,CACrCnB,iBAAoC;EAEpC,OACEA,iBAAiB,CAAChF,kBAAkB,4BACpCgF,iBAAiB,CAACa,gBAAgB,GAAGnK,kBAAkB,GAAG0B,IAAI,CAACC,GAAG,EAAE;AAExE;;AClOA;;;;;;;;;;;;;;;;SAiCsB+I,wBAAwB,CAC5CjK,EAA2D,EAC3D6I,iBAA8C;MAD5C1G,SAAS;IAAE+H,sBAAsB;;;;;;UAG7BlH,QAAQ,GAAGmH,4BAA4B,CAAChI,SAAS,EAAE0G,iBAAiB,CAAC;UAErExG,OAAO,GAAGH,kBAAkB,CAACC,SAAS,EAAE0G,iBAAiB,CAAC;UAG1DuB,cAAc,GAAGF,sBAAsB,CAACG,YAAY,CAAC;YACzDC,QAAQ,EAAE;WACX,CAAC;UACF,IAAIF,cAAc,EAAE;YAClB/H,OAAO,CAACC,MAAM,CAAC,mBAAmB,EAAE8H,cAAc,CAACG,qBAAqB,EAAE,CAAC;;UAGvEtH,IAAI,GAAG;YACXuH,YAAY,EAAE;cACZpH,UAAU,EAAE5D;;WAEf;UAEK6D,OAAO,GAAgB;YAC3BC,MAAM,EAAE,MAAM;YACdjB,OAAO;YACPY,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;WAC1B;UAEgB,qBAAMT,kBAAkB,CAAC;YAAM,YAAK,CAACQ,QAAQ,EAAEK,OAAO,CAAC;UAAA,EAAC;;UAAnE1C,QAAQ,GAAG8C,SAAwD;eACrE9C,QAAQ,CAAC+C,EAAE,EAAX;UAC+C,qBAAM/C,QAAQ,CAACU,IAAI,EAAE;;UAAhEsC,aAAa,GAA8BF,SAAqB;UAChEgH,kBAAkB,GAAuB/J,gCAAgC,CAC7EiD,aAAa,CACd;UACD,sBAAO8G,kBAAkB;;UAEnB,qBAAMtJ,oBAAoB,CAAC,qBAAqB,EAAER,QAAQ,CAAC;;UAAjE,MAAM8C,SAA2D;MAAC;;;;AAItE,SAAS0G,4BAA4B,CACnChI,SAAoB,EACpBnC,EAAoC;MAAlC+C,GAAG;EAEL,OAAUvC,wBAAwB,CAAC2B,SAAS,CAAC,SAAIY,GAAG,yBAAsB;AAC5E;;AC9EA;;;;;;;;;;;;;;;;AAiCA;;;;;;SAMsB2H,gBAAgB,CACpCC,YAAkC,EAClCC,YAAoB;EAApB;IAAAA,oBAAoB;EAAA;;;;;;UAGN,qBAAMrC,MAAM,CAACoC,YAAY,CAACxI,SAAS,EAAE,kBAAQ;YACzD,IAAI,CAAC0I,iBAAiB,CAAC9B,QAAQ,CAAC,EAAE;cAChC,MAAM9I,aAAa,CAACuB,MAAM,uCAA0B;;;YAGtD,IAAMsJ,YAAY,GAAG/B,QAAQ,CAACjF,SAAS;YACvC,IAAI,CAAC8G,YAAY,IAAIG,gBAAgB,CAACD,YAAY,CAAC,EAAE;;cAEnD,OAAO/B,QAAQ;aAChB,MAAM,IAAI+B,YAAY,CAACjK,aAAa,0BAAgC;;cAEnEmK,YAAY,GAAGC,yBAAyB,CAACN,YAAY,EAAEC,YAAY,CAAC;cACpE,OAAO7B,QAAQ;aAChB,MAAM;;cAEL,IAAI,CAACM,SAAS,CAACC,MAAM,EAAE;gBACrB,MAAMrJ,aAAa,CAACuB,MAAM,iCAAuB;;;cAGnD,IAAMiI,eAAe,GAAGyB,mCAAmC,CAACnC,QAAQ,CAAC;cACrEiC,YAAY,GAAGG,wBAAwB,CAACR,YAAY,EAAElB,eAAe,CAAC;cACtE,OAAOA,eAAe;;WAEzB,CAAC;;UAvBIN,KAAK,GAAG1F,SAuBZ;eAEgBuH,YAAY,EAAZ;UACd,qBAAMA,YAAY;;UAAlBhL,cAAkB;;;UAClBA,KAACmJ,KAAK,CAACrF,SAAgC;;;UAFrCA,SAAS,KAE4B;UAC3C,sBAAOA,SAAS;MAAC;;;;AAGnB;;;;;;AAMA,SAAemH,yBAAyB,CACtCN,YAAkC,EAClCC,YAAqB;;;;;;UAMT,qBAAMQ,sBAAsB,CAACT,YAAY,CAACxI,SAAS,CAAC;;UAA5DgH,KAAK,GAAGnJ,SAAoD;;;gBACzDmJ,KAAK,CAACrF,SAAS,CAACjD,aAAa,yBAA8B;;UAEhE,qBAAMkD,KAAK,CAAC,GAAG,CAAC;;;UAAhB/D,SAAgB;UAER,qBAAMoL,sBAAsB,CAACT,YAAY,CAACxI,SAAS,CAAC;;UAA5DgH,KAAK,GAAGnJ,SAAoD;;;UAGxD8D,SAAS,GAAGqF,KAAK,CAACrF,SAAS;UACjC,IAAIA,SAAS,CAACjD,aAAa,0BAAgC;;YAEzD,sBAAO6J,gBAAgB,CAACC,YAAY,EAAEC,YAAY,CAAC;WACpD,MAAM;YACL,sBAAO9G,SAAS;;MACjB;;;;AAGH;;;;;;;;AAQA,SAASsH,sBAAsB,CAC7BjJ,SAAoB;EAEpB,OAAOoG,MAAM,CAACpG,SAAS,EAAE,kBAAQ;IAC/B,IAAI,CAAC0I,iBAAiB,CAAC9B,QAAQ,CAAC,EAAE;MAChC,MAAM9I,aAAa,CAACuB,MAAM,uCAA0B;;;IAGtD,IAAMsJ,YAAY,GAAG/B,QAAQ,CAACjF,SAAS;IACvC,IAAIuH,2BAA2B,CAACP,YAAY,CAAC,EAAE;MAC7C,6BACK/B,QAAQ;QACXjF,SAAS,EAAE;UAAEjD,aAAa;QAAA;MAA6B;;;IAI3D,OAAOkI,QAAQ;GAChB,CAAC;AACJ;AAEA,SAAeoC,wBAAwB,CACrCR,YAAkC,EAClC9B,iBAA8C;;;;;;;UAG1B,qBAAMoB,wBAAwB,CAC9CU,YAAY,EACZ9B,iBAAiB,CAClB;;UAHK/E,SAAS,GAAG9D,SAGjB;UACKsL,wBAAwB,yBACzBzC,iBAAiB;YACpB/E,SAAS;UAAA,EACV;UACD,qBAAMwC,GAAG,CAACqE,YAAY,CAACxI,SAAS,EAAEmJ,wBAAwB,CAAC;;UAA3DtL,SAA2D;UAC3D,sBAAO8D,SAAS;;;gBAGd3D,aAAa,CAAC0J,GAAC,CAAC,KACfA,GAAC,CAACC,UAAU,CAACrI,UAAU,KAAK,GAAG,IAAIoI,GAAC,CAACC,UAAU,CAACrI,UAAU,KAAK,GAAG,CAAC,GADpE;;;UAKA,qBAAM6G,MAAM,CAACqC,YAAY,CAACxI,SAAS,CAAC;;;;UAApCnC,SAAoC;;;UAE9BsL,wBAAwB,yBACzBzC,iBAAiB;YACpB/E,SAAS,EAAE;cAAEjD,aAAa;YAAA;UAA6B,EACxD;UACD,qBAAMyF,GAAG,CAACqE,YAAY,CAACxI,SAAS,EAAEmJ,wBAAwB,CAAC;;UAA3DtL,SAA2D;;;UAE7D,MAAM6J,GAAC;;;;;;;;AAIX,SAASgB,iBAAiB,CACxBhC,iBAAgD;EAEhD,OACEA,iBAAiB,KAAKF,SAAS,IAC/BE,iBAAiB,CAAChF,kBAAkB;AAExC;;AAEA,SAASkH,gBAAgB,CAACjH,SAAoB;EAC5C,OACEA,SAAS,CAACjD,aAAa,0BACvB,CAAC0K,kBAAkB,CAACzH,SAAS,CAAC;AAElC;AAEA,SAASyH,kBAAkB,CAACzH,SAA6B;EACvD,IAAM5C,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE;EACtB,OACEA,GAAG,GAAG4C,SAAS,CAAC9C,YAAY,IAC5B8C,SAAS,CAAC9C,YAAY,GAAG8C,SAAS,CAAChD,SAAS,GAAGI,GAAG,GAAGtB,uBAAuB;AAEhF;AAEA;AACA,SAASsL,mCAAmC,CAC1CnC,QAAqC;EAErC,IAAMyC,mBAAmB,GAAwB;IAC/C3K,aAAa;IACb4K,WAAW,EAAExK,IAAI,CAACC,GAAG;GACtB;EACD,6BACK6H,QAAQ;IACXjF,SAAS,EAAE0H;EAAmB;AAElC;AAEA,SAASH,2BAA2B,CAACvH,SAAoB;EACvD,OACEA,SAAS,CAACjD,aAAa,4BACvBiD,SAAS,CAAC2H,WAAW,GAAGlM,kBAAkB,GAAG0B,IAAI,CAACC,GAAG,EAAE;AAE3D;;ACnNA;;;;;;;;;;;;;;;;SAqBsBwK,MAAK,CACzBf,YAAkC;;;;;;UAEiB,qBAAM/B,oBAAoB,CAC3E+B,YAAY,CAACxI,SAAS,CACvB;;UAFKnC,KAA6CyD,SAElD,EAFOoF,iBAAiB,yBAAEK,mBAAmB;UAI9C,IAAIA,mBAAmB,EAAE;YACvBA,mBAAmB,CAACyC,KAAK,CAACC,OAAO,CAACxL,KAAK,CAAC;WACzC,MAAM;;;YAGLsK,gBAAgB,CAACC,YAAY,CAAC,CAACgB,KAAK,CAACC,OAAO,CAACxL,KAAK,CAAC;;UAGrD,sBAAOyI,iBAAiB,CAAC9F,GAAG;MAAC;;;;;ACpC/B;;;;;;;;;;;;;;;;SAsBsB8I,SAAQ,CAC5BlB,YAAkC,EAClCC,YAAoB;EAApB;IAAAA,oBAAoB;EAAA;;;;;;UAEpB,qBAAMkB,gCAAgC,CAACnB,YAAY,CAACxI,SAAS,CAAC;;UAA9DnC,SAA8D;UAI5C,qBAAM0K,gBAAgB,CAACC,YAAY,EAAEC,YAAY,CAAC;;UAA9D9G,SAAS,GAAG9D,SAAkD;UACpE,sBAAO8D,SAAS,CAAClD,KAAK;MAAC;;;;AAGzB,SAAekL,gCAAgC,CAC7C3J,SAAoB;;;;;;UAEY,qBAAMyG,oBAAoB,CAACzG,SAAS,CAAC;;UAA7D+G,mBAAmB,GAAKlJ,SAAqC,oBAA1C;eAEvBkJ,mBAAmB,EAAnB;;UAEF,qBAAMA,mBAAmB;;;UAAzBlJ,SAAyB;;;;;;;;;ACzC7B;;;;;;;;;;;;;;;;SA0BsB+L,yBAAyB,CAC7C5J,SAAoB,EACpB0G,iBAA8C;;;;;;UAExC7F,QAAQ,GAAGgJ,iBAAiB,CAAC7J,SAAS,EAAE0G,iBAAiB,CAAC;UAE1DxG,OAAO,GAAGH,kBAAkB,CAACC,SAAS,EAAE0G,iBAAiB,CAAC;UAC1DxF,OAAO,GAAgB;YAC3BC,MAAM,EAAE,QAAQ;YAChBjB,OAAO;WACR;UAEgB,qBAAMG,kBAAkB,CAAC;YAAM,YAAK,CAACQ,QAAQ,EAAEK,OAAO,CAAC;UAAA,EAAC;;UAAnE1C,QAAQ,GAAGX,SAAwD;eACrE,CAACW,QAAQ,CAAC+C,EAAE,EAAZ;UACI,qBAAMvC,oBAAoB,CAAC,qBAAqB,EAAER,QAAQ,CAAC;;UAAjE,MAAMX,SAA2D;;;;;;;;AAIrE,SAASgM,iBAAiB,CACxB7J,SAAoB,EACpBnC,EAAoC;MAAlC+C,GAAG;EAEL,OAAUvC,wBAAwB,CAAC2B,SAAS,CAAC,SAAIY,GAAK;AACxD;;ACjDA;;;;;;;;;;;;;;;;SAuBsBkJ,kBAAkB,CACtCtB,YAAkC;;;;;;UAE1BxI,SAAS,GAAKwI,YAAY,UAAjB;UAEH,qBAAMpC,MAAM,CAACpG,SAAS,EAAE,kBAAQ;YAC5C,IAAI4G,QAAQ,IAAIA,QAAQ,CAAClF,kBAAkB,0BAAgC;;cAEzE,OAAO8E,SAAS;;YAElB,OAAOI,QAAQ;WAChB,CAAC;;UANII,KAAK,GAAGnJ,SAMZ;eAEEmJ,KAAK,EAAL;gBACEA,KAAK,CAACtF,kBAAkB,yBAA8B,EAAtD;;UAEF,MAAM5D,aAAa,CAACuB,MAAM,iEAAuC;;gBACxD2H,KAAK,CAACtF,kBAAkB,uBAA4B,EAApD;eACL,CAACwF,SAAS,CAACC,MAAM,EAAjB;UACF,MAAMrJ,aAAa,CAACuB,MAAM,iCAAuB;;UAEjD,qBAAMuK,yBAAyB,CAAC5J,SAAS,EAAEgH,KAAK,CAAC;;UAAjDnJ,SAAiD;UACjD,qBAAMsI,MAAM,CAACnG,SAAS,CAAC;;UAAvBnC,SAAuB;;;;;;;;;AC7C/B;;;;;;;;;;;;;;;;AAuBA;;;;SAIgBkM,WAAU,CACxBlM,EAAmC,EACnCiG,QAA4B;MAD1B9D,SAAS;EAGX6D,WAAW,CAAC7D,SAAS,EAAE8D,QAAQ,CAAC;EAEhC,OAAO;IACLO,cAAc,CAACrE,SAAS,EAAE8D,QAAQ,CAAC;GACpC;AACH;;ACpCA;;;;;;;;;;;;;;;;SAsBgBkG,gBAAgB,CAACC,GAAgB;;EAC/C,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACC,OAAO,EAAE;IACxB,MAAMC,oBAAoB,CAAC,mBAAmB,CAAC;;EAGjD,IAAI,CAACF,GAAG,CAACG,IAAI,EAAE;IACb,MAAMD,oBAAoB,CAAC,UAAU,CAAC;;;EAIxC,IAAME,UAAU,GAAiC,CAC/C,WAAW,EACX,QAAQ,EACR,OAAO,CACR;;IAED,KAAsB,sCAAU,qGAAE;MAA7B,IAAMC,OAAO;MAChB,IAAI,CAACL,GAAG,CAACC,OAAO,CAACI,OAAO,CAAC,EAAE;QACzB,MAAMH,oBAAoB,CAACG,OAAO,CAAC;;;;;;;;;;;;;;EAIvC,OAAO;IACLhH,OAAO,EAAE2G,GAAG,CAACG,IAAI;IACjB9L,SAAS,EAAE2L,GAAG,CAACC,OAAO,CAAC5L,SAAU;IACjCsB,MAAM,EAAEqK,GAAG,CAACC,OAAO,CAACtK,MAAO;IAC3BoB,KAAK,EAAEiJ,GAAG,CAACC,OAAO,CAAClJ;GACpB;AACH;AAEA,SAASmJ,oBAAoB,CAACI,SAAiB;EAC7C,OAAOzM,aAAa,CAACuB,MAAM,8DAAsC;IAC/DkL,SAAS;GACV,CAAC;AACJ;;ACxDA;;;;;;;;;;;;;;;;SAqCgBC,qBAAqB,CAACC,QAA4B;EAChE,IAAMC,iBAAiB,GAAG,eAAe;EAEzCD,QAAQ,CAACE,QAAQ,CAACC,iBAAiB,CACjC,IAAIC,SAAS,CACXH,iBAAiB,EACjB,mBAAS;IACP,IAAMT,GAAG,GAAGa,SAAS,CAACC,WAAW,CAAC,KAAK,CAAC,CAAC7C,YAAY,EAAE;;IAGvD,IAAMlI,SAAS,GAAGgK,gBAAgB,CAACC,GAAG,CAAC;IACvC,IAAMlC,sBAAsB,GAAG+C,SAAS,CAACC,WAAW,CAAC,iBAAiB,CAAC;IACvE,IAAMvC,YAAY,GAAyB;MACzCxI,SAAS;MACT+H,sBAAsB;KACvB;IAED,IAAMiD,aAAa,GAA4C;MAC7Df,GAAG;MACHV,KAAK,EAAE;QAAM,aAAK,CAACf,YAAY,CAAC;MAAA;MAChCkB,QAAQ,EAAE,kBAACjB,YAAsB;QAC/B,gBAAQ,CAACD,YAAY,EAAEC,YAAY,CAAC;OAAA;MACtCnE,MAAM,EAAE;QAAM,yBAAkB,CAACkE,YAAY,CAAC;MAAA;MAC9CuB,UAAU,EAAE,oBAACjG,QAA4B;QACvC,kBAAU,CAAC0E,YAAY,EAAE1E,QAAQ,CAAC;;KACrC;IACD,OAAOkH,aAAa;GACrB,wBAEF,CACF;EAEDP,QAAQ,CAACQ,eAAe,CAACb,IAAI,EAAE9M,OAAO,CAAC;AACzC;AAEAkN,qBAAqB,CAACU,QAA8B,CAAC","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","_a","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","json","responseJson","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","_b","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","setTimeout","resolve","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto_1","self","crypto","msCrypto","getRandomValues","encode","test","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDb","upgradeDB","oldVersion","createObjectStore","value","db","tx","transaction","objectStore","oldValue","put","complete","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installationEntry","updateOrCreateInstallationEntry","oldEntry","entryWithPromise","triggerRegistrationIfNecessary","registrationPromise","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","e_1","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","completedAuthToken","refreshAuthToken","dependencies","forceRefresh","isEntryRegistered","oldAuthToken","isAuthTokenValid","tokenPromise","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallation","onIdChange","extractAppConfig","app","options","getMissingValueError","name","configKeys","keyName","valueName","registerInstallations","instance","installationsName","INTERNAL","registerComponent","Component","container","getProvider","installations","registerVersion","firebase"],"sources":["../src/util/constants.ts","../src/util/errors.ts","../src/api/common.ts","../src/api/create-installation-request.ts","../src/util/sleep.ts","../src/helpers/buffer-to-base64-url-safe.ts","../src/helpers/generate-fid.ts","../src/util/get-key.ts","../src/helpers/fid-changed.ts","../src/helpers/idb-manager.ts","../src/helpers/get-installation-entry.ts","../src/api/generate-auth-token-request.ts","../src/helpers/refresh-auth-token.ts","../src/functions/get-id.ts","../src/functions/get-token.ts","../src/api/delete-installation-request.ts","../src/functions/delete-installation.ts","../src/functions/on-id-change.ts","../src/helpers/extract-app-config.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  deleteInstallation,\n  getId,\n  getToken,\n  IdChangeCallbackFn,\n  IdChangeUnsubscribeFn,\n  onIdChange\n} from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseDependencies } from './interfaces/firebase-dependencies';\n\nimport { name, version } from '../package.json';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  instance.INTERNAL.registerComponent(\n    new Component(\n      installationsName,\n      container => {\n        const app = container.getProvider('app').getImmediate();\n\n        // Throws if app isn't configured properly.\n        const appConfig = extractAppConfig(app);\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        const dependencies: FirebaseDependencies = {\n          appConfig,\n          platformLoggerProvider\n        };\n\n        const installations: FirebaseInstallations & FirebaseService = {\n          app,\n          getId: () => getId(dependencies),\n          getToken: (forceRefresh?: boolean) =>\n            getToken(dependencies, forceRefresh),\n          delete: () => deleteInstallation(dependencies),\n          onIdChange: (callback: IdChangeCallbackFn): IdChangeUnsubscribeFn =>\n            onIdChange(dependencies, callback)\n        };\n        return installations;\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}