{"ast":null,"code":"/*!\nFullCalendar v5.5.0\nDocs & License: https://fullcalendar.io/\n(c) 2020 Adam Shaw\n*/\nimport './main.css';\nimport { getDateMeta, buildNavLinkData, getDayClassNames, createElement, RenderHook, formatDayString, BaseComponent, Fragment, createFormatter, EventRoot, isMultiDayRange, buildSegTimeText, memoize, ViewRoot, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, DateComponent, startOfDay, addDays, identity, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nvar ListViewHeaderRow = /** @class */function (_super) {\n  __extends(ListViewHeaderRow, _super);\n  function ListViewHeaderRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ListViewHeaderRow.prototype.render = function () {\n    var _a = this.props,\n      dayDate = _a.dayDate,\n      todayRange = _a.todayRange;\n    var _b = this.context,\n      theme = _b.theme,\n      dateEnv = _b.dateEnv,\n      options = _b.options,\n      viewApi = _b.viewApi;\n    var dayMeta = getDateMeta(dayDate, todayRange);\n    // will ever be falsy?\n    var text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';\n    // will ever be falsy? also, BAD NAME \"alt\"\n    var sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n    var navLinkData = options.navLinks ? buildNavLinkData(dayDate) : null;\n    var hookProps = __assign({\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      text: text,\n      sideText: sideText,\n      navLinkData: navLinkData\n    }, dayMeta);\n    var classNames = ['fc-list-day'].concat(getDayClassNames(dayMeta, theme));\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.dayHeaderClassNames,\n      content: options.dayHeaderContent,\n      defaultContent: renderInnerContent,\n      didMount: options.dayHeaderDidMount,\n      willUnmount: options.dayHeaderWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"tr\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-date\": formatDayString(dayDate)\n      }, createElement(\"th\", {\n        colSpan: 3\n      }, createElement(\"div\", {\n        className: 'fc-list-day-cushion ' + theme.getClass('tableCellShaded'),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n  return ListViewHeaderRow;\n}(BaseComponent);\nfunction renderInnerContent(props) {\n  var navLinkAttrs = props.navLinkData // is there a type for this?\n  ? {\n    'data-navlink': props.navLinkData,\n    tabIndex: 0\n  } : {};\n  return createElement(Fragment, null, props.text && createElement(\"a\", __assign({\n    className: \"fc-list-day-text\"\n  }, navLinkAttrs), props.text), props.sideText && createElement(\"a\", __assign({\n    className: \"fc-list-day-side-text\"\n  }, navLinkAttrs), props.sideText));\n}\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short'\n});\nvar ListViewEventRow = /** @class */function (_super) {\n  __extends(ListViewEventRow, _super);\n  function ListViewEventRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ListViewEventRow.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var seg = props.seg;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n    return createElement(EventRoot, {\n      seg: seg,\n      timeText: \"\" // BAD. because of all-day content\n      ,\n      disableDragging: true,\n      disableResizing: true,\n      defaultContent: renderEventInnerContent,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday,\n      isSelected: props.isSelected,\n      isDragging: props.isDragging,\n      isResizing: props.isResizing,\n      isDateSelecting: props.isDateSelecting\n    }, function (rootElRef, classNames, innerElRef, innerContent, hookProps) {\n      return createElement(\"tr\", {\n        className: ['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' '),\n        ref: rootElRef\n      }, buildTimeContent(seg, timeFormat, context), createElement(\"td\", {\n        className: \"fc-list-event-graphic\"\n      }, createElement(\"span\", {\n        className: \"fc-list-event-dot\",\n        style: {\n          borderColor: hookProps.borderColor || hookProps.backgroundColor\n        }\n      })), createElement(\"td\", {\n        className: \"fc-list-event-title\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n  return ListViewEventRow;\n}(BaseComponent);\nfunction renderEventInnerContent(props) {\n  var event = props.event;\n  var url = event.url;\n  var anchorAttrs = url ? {\n    href: url\n  } : {};\n  return createElement(\"a\", __assign({}, anchorAttrs), event.title);\n}\nfunction buildTimeContent(seg, timeFormat, context) {\n  var options = context.options;\n  if (options.displayEventTime !== false) {\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    var doAllDay = false;\n    var timeText = void 0;\n    if (eventDef.allDay) {\n      doAllDay = true;\n    } else if (isMultiDayRange(seg.eventRange.range)) {\n      // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n      } else {\n        doAllDay = true;\n      }\n    } else {\n      timeText = buildSegTimeText(seg, timeFormat, context);\n    }\n    if (doAllDay) {\n      var hookProps = {\n        text: context.options.allDayText,\n        view: context.viewApi\n      };\n      return createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.allDayClassNames,\n        content: options.allDayContent,\n        defaultContent: renderAllDayInner,\n        didMount: options.allDayDidMount,\n        willUnmount: options.allDayWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          className: ['fc-list-event-time'].concat(classNames).join(' '),\n          ref: rootElRef\n        }, innerContent);\n      });\n    }\n    return createElement(\"td\", {\n      className: \"fc-list-event-time\"\n    }, timeText);\n  }\n  return null;\n}\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nvar ListView = /** @class */function (_super) {\n  __extends(ListView, _super);\n  function ListView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.setRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    return _this;\n  }\n  ListView.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var extraClassNames = ['fc-list', context.theme.getClass('table'), context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''];\n    var _b = this.computeDateVars(props.dateProfile),\n      dayDates = _b.dayDates,\n      dayRanges = _b.dayRanges;\n    var eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.setRootEl\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(Scroller, {\n        liquid: !props.isHeightAuto,\n        overflowX: props.isHeightAuto ? 'visible' : 'hidden',\n        overflowY: props.isHeightAuto ? 'visible' : 'auto'\n      }, eventSegs.length > 0 ? _this.renderSegList(eventSegs, dayDates) : _this.renderEmptyMessage()));\n    });\n  };\n  ListView.prototype.renderEmptyMessage = function () {\n    var _a = this.context,\n      options = _a.options,\n      viewApi = _a.viewApi;\n    var hookProps = {\n      text: options.noEventsText,\n      view: viewApi\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.noEventsClassNames,\n      content: options.noEventsContent,\n      defaultContent: renderNoEventsInner,\n      didMount: options.noEventsDidMount,\n      willUnmount: options.noEventsWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        className: ['fc-list-empty'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(\"div\", {\n        className: \"fc-list-empty-cushion\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n  ListView.prototype.renderSegList = function (allSegs, dayDates) {\n    var _a = this.context,\n      theme = _a.theme,\n      options = _a.options;\n    var segsByDay = groupSegsByDay(allSegs); // sparse array\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      var innerNodes = [];\n      for (var dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n        var daySegs = segsByDay[dayIndex];\n        if (daySegs) {\n          // sparse array, so might be undefined\n          var dayStr = dayDates[dayIndex].toISOString();\n          // append a day header\n          innerNodes.push(createElement(ListViewHeaderRow, {\n            key: dayStr,\n            dayDate: dayDates[dayIndex],\n            todayRange: todayRange\n          }));\n          daySegs = sortEventSegs(daySegs, options.eventOrder);\n          for (var _i = 0, daySegs_1 = daySegs; _i < daySegs_1.length; _i++) {\n            var seg = daySegs_1[_i];\n            innerNodes.push(createElement(ListViewEventRow, __assign({\n              key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */,\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: false\n            }, getSegMeta(seg, todayRange, nowDate))));\n          }\n        }\n      }\n      return createElement(\"table\", {\n        className: 'fc-list-table ' + theme.getClass('table')\n      }, createElement(\"tbody\", null, innerNodes));\n    });\n  };\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n  };\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n    return segs;\n  };\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var dateEnv = this.context.dateEnv;\n    var nextDayThreshold = this.context.options.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg);\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n    return segs;\n  };\n  return ListView;\n}(DateComponent);\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text;\n}\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n}\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs) {\n  var segsByDay = []; // sparse array\n  var i;\n  var seg;\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n  }\n  return segsByDay;\n}\nvar OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter,\n  listDaySideFormat: createFalsableFormatter,\n  noEventsClassNames: identity,\n  noEventsContent: identity,\n  noEventsDidMount: identity,\n  noEventsWillUnmount: identity\n};\nfunction createFalsableFormatter(input) {\n  return input === false ? null : createFormatter(input);\n}\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    list: {\n      component: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      }\n    },\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDaySideFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      }\n    },\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      }\n    }\n  }\n});\nexport default main;\nexport { ListView };","map":{"version":3,"mappings":"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","names":["__extends","ListViewHeaderRow","props","dayDate","todayRange","context","theme","dateEnv","options","viewApi","dayMeta","getDateMeta","text","listDayFormat","format","sideText","listDaySideFormat","navLinkData","navLinks","buildNavLinkData","hookProps","date","toDate","view","classNames","concat","getDayClassNames","createElement","RenderHook","dayHeaderClassNames","content","dayHeaderContent","defaultContent","renderInnerContent","didMount","dayHeaderDidMount","willUnmount","dayHeaderWillUnmount","rootElRef","customClassNames","innerElRef","innerContent","ref","className","join","formatDayString","colSpan","getClass","BaseComponent","navLinkAttrs","tabIndex","Fragment","DEFAULT_TIME_FORMAT","createFormatter","hour","minute","meridiem","ListViewEventRow","timeFormat","eventTimeFormat","EventRoot","seg","timeText","disableDragging","disableResizing","renderEventInnerContent","isPast","isFuture","isToday","isSelected","isDragging","isResizing","isDateSelecting","event","url","buildTimeContent","style","borderColor","backgroundColor","anchorAttrs","href","title","displayEventTime","eventDef","eventRange","def","eventInstance","instance","doAllDay","allDay","isMultiDayRange","range","isStart","buildSegTimeText","start","end","isEnd","allDayText","allDayClassNames","allDayContent","renderAllDayInner","allDayDidMount","allDayWillUnmount","_this","memoize","computeDateVars","_eventStoreToSegs","rootEl","registerInteractiveComponent","el","unregisterInteractiveComponent","ListView","extraClassNames","stickyHeaderDates","dateProfile","dayDates","dayRanges","eventSegs","eventStoreToSegs","eventStore","eventUiBases","ViewRoot","viewSpec","elRef","setRootEl","Scroller","liquid","isHeightAuto","overflowX","overflowY","length","renderSegList","renderEmptyMessage","noEventsText","noEventsClassNames","noEventsContent","renderNoEventsInner","noEventsDidMount","noEventsWillUnmount","allSegs","segsByDay","groupSegsByDay","NowTimer","unit","nowDate","innerNodes","dayIndex","daySegs","dayStr","toISOString","push","key","sortEventSegs","eventOrder","daySegs_1","_i","instanceId","getSegMeta","eventRangesToSegs","sliceEventStore","activeRange","nextDayThreshold","fg","eventRanges","segs","eventRanges_1","eventRangeToSegs","segRange","intersectRanges","component","valueOf","add","DateComponent","dayStart","startOfDay","renderRange","viewEnd","addDays","i","OPTION_REFINERS","createFalsableFormatter","identity","input","createPlugin","optionRefiners","views","list","buttonTextKey","month","day","year","listDay","type","duration","days","weekday","listWeek","weeks","listMonth","listYear"],"sources":["src/ListViewHeaderRow.tsx","src/ListViewEventRow.tsx","src/ListView.tsx","src/options.ts","src/main.ts"],"sourcesContent":["import {\n  BaseComponent, DateMarker, createElement, DateRange, getDateMeta,\n  RenderHook, buildNavLinkData, DayHeaderContentArg, getDayClassNames, formatDayString, Fragment,\n} from '@fullcalendar/common'\n\nexport interface ListViewHeaderRowProps {\n  dayDate: DateMarker\n  todayRange: DateRange\n}\n\ninterface HookProps extends DayHeaderContentArg { // doesn't enforce much since DayCellContentArg allow extra props\n  text: string\n  sideText: string\n}\n\nexport class ListViewHeaderRow extends BaseComponent<ListViewHeaderRowProps> {\n  render() {\n    let { dayDate, todayRange } = this.props\n    let { theme, dateEnv, options, viewApi } = this.context\n    let dayMeta = getDateMeta(dayDate, todayRange)\n\n    // will ever be falsy?\n    let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''\n\n    // will ever be falsy? also, BAD NAME \"alt\"\n    let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : ''\n\n    let navLinkData = options.navLinks\n      ? buildNavLinkData(dayDate)\n      : null\n\n    let hookProps: HookProps = {\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      text,\n      sideText,\n      navLinkData,\n      ...dayMeta,\n    }\n\n    let classNames = ['fc-list-day'].concat(\n      getDayClassNames(dayMeta, theme),\n    )\n\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return (\n      <RenderHook<HookProps>\n        hookProps={hookProps}\n        classNames={options.dayHeaderClassNames}\n        content={options.dayHeaderContent}\n        defaultContent={renderInnerContent}\n        didMount={options.dayHeaderDidMount}\n        willUnmount={options.dayHeaderWillUnmount}\n      >\n        {(rootElRef, customClassNames, innerElRef, innerContent) => (\n          <tr\n            ref={rootElRef}\n            className={classNames.concat(customClassNames).join(' ')}\n            data-date={formatDayString(dayDate)}\n          >\n            <th colSpan={3}>\n              <div className={'fc-list-day-cushion ' + theme.getClass('tableCellShaded')} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </th>\n          </tr>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderInnerContent(props: HookProps) {\n  let navLinkAttrs = props.navLinkData // is there a type for this?\n    ? { 'data-navlink': props.navLinkData, tabIndex: 0 }\n    : {}\n\n  return (\n    <Fragment>\n      {props.text && (\n        <a className=\"fc-list-day-text\" {...navLinkAttrs}>\n          {props.text}\n        </a>\n      )}\n      {props.sideText && (\n        <a className=\"fc-list-day-side-text\" {...navLinkAttrs}>\n          {props.sideText}\n        </a>\n      )}\n    </Fragment>\n  )\n}\n","import {\n  MinimalEventProps, BaseComponent, ViewContext, createElement, AllDayContentArg,\n  Seg, isMultiDayRange, DateFormatter, buildSegTimeText, createFormatter, EventContentArg, EventRoot, ComponentChildren, RenderHook,\n} from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short',\n})\n\nexport class ListViewEventRow extends BaseComponent<MinimalEventProps> {\n  render() {\n    let { props, context } = this\n    let { seg } = props\n\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT\n\n    return (\n      <EventRoot\n        seg={seg}\n        timeText=\"\" // BAD. because of all-day content\n        disableDragging\n        disableResizing\n        defaultContent={renderEventInnerContent}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n        isSelected={props.isSelected}\n        isDragging={props.isDragging}\n        isResizing={props.isResizing}\n        isDateSelecting={props.isDateSelecting}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, hookProps) => (\n          <tr className={['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' ')} ref={rootElRef}>\n            {buildTimeContent(seg, timeFormat, context)}\n            <td className=\"fc-list-event-graphic\">\n              <span className=\"fc-list-event-dot\" style={{ borderColor: hookProps.borderColor || hookProps.backgroundColor }} />\n            </td>\n            <td className=\"fc-list-event-title\" ref={innerElRef}>\n              {innerContent}\n            </td>\n          </tr>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderEventInnerContent(props: EventContentArg) {\n  let { event } = props\n  let url = event.url\n  let anchorAttrs = url ? { href: url } : {}\n\n  return (\n    <a {...anchorAttrs}>\n      {/* TODO: document how whole row become clickable */}\n      {event.title}\n    </a>\n  )\n}\n\nfunction buildTimeContent(seg: Seg, timeFormat: DateFormatter, context: ViewContext): ComponentChildren {\n  let { options } = context\n\n  if (options.displayEventTime !== false) {\n    let eventDef = seg.eventRange.def\n    let eventInstance = seg.eventRange.instance\n    let doAllDay = false\n    let timeText: string\n\n    if (eventDef.allDay) {\n      doAllDay = true\n    } else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          eventInstance.range.start,\n          seg.end,\n        )\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          seg.start,\n          eventInstance.range.end,\n        )\n      } else {\n        doAllDay = true\n      }\n    } else {\n      timeText = buildSegTimeText(\n        seg,\n        timeFormat,\n        context,\n      )\n    }\n\n    if (doAllDay) {\n      let hookProps: AllDayContentArg = {\n        text: context.options.allDayText,\n        view: context.viewApi,\n      }\n\n      return (\n        <RenderHook<AllDayContentArg> // needed?\n          hookProps={hookProps}\n          classNames={options.allDayClassNames}\n          content={options.allDayContent}\n          defaultContent={renderAllDayInner}\n          didMount={options.allDayDidMount}\n          willUnmount={options.allDayWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td className={['fc-list-event-time'].concat(classNames).join(' ')} ref={rootElRef}>\n              {innerContent}\n            </td>\n          )}\n        </RenderHook>\n      )\n    }\n\n    return (\n      <td className=\"fc-list-event-time\">\n        {timeText}\n      </td>\n    )\n  }\n\n  return null\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  createElement,\n  ViewProps,\n  Scroller,\n  DateMarker,\n  addDays,\n  startOfDay,\n  DateRange,\n  intersectRanges,\n  DateProfile,\n  EventUiHash,\n  EventRenderRange,\n  sliceEventStore,\n  EventStore,\n  memoize,\n  Seg,\n  VNode,\n  sortEventSegs,\n  getSegMeta,\n  NowTimer,\n  ViewRoot,\n  RenderHook,\n  DateComponent,\n  ViewApi,\n  MountArg,\n} from '@fullcalendar/common'\nimport { ListViewHeaderRow } from './ListViewHeaderRow'\nimport { ListViewEventRow } from './ListViewEventRow'\n\nexport interface NoEventsContentArg {\n  text: string\n  view: ViewApi\n}\n\nexport type NoEventsMountArg = MountArg<NoEventsContentArg>\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nexport class ListView extends DateComponent<ViewProps> {\n  private computeDateVars = memoize(computeDateVars)\n  private eventStoreToSegs = memoize(this._eventStoreToSegs)\n\n  render() {\n    let { props, context } = this\n\n    let extraClassNames = [\n      'fc-list',\n      context.theme.getClass('table'), // just for the outer border. will be on div\n      context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : '',\n    ]\n\n    let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile)\n    let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges)\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.setRootEl}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <Scroller\n              liquid={!props.isHeightAuto}\n              overflowX={props.isHeightAuto ? 'visible' : 'hidden'}\n              overflowY={props.isHeightAuto ? 'visible' : 'auto'}\n            >\n              {eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage()}\n            </Scroller>\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  setRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { // TODO: make aware that it doesn't do Hits\n        el: rootEl,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  renderEmptyMessage() {\n    let { options, viewApi } = this.context\n    let hookProps: NoEventsContentArg = {\n      text: options.noEventsText,\n      view: viewApi,\n    }\n\n    return (\n      <RenderHook<NoEventsContentArg> // needed???\n        hookProps={hookProps}\n        classNames={options.noEventsClassNames}\n        content={options.noEventsContent}\n        defaultContent={renderNoEventsInner}\n        didMount={options.noEventsDidMount}\n        willUnmount={options.noEventsWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div className={['fc-list-empty'].concat(classNames).join(' ')} ref={rootElRef}>\n            <div className=\"fc-list-empty-cushion\" ref={innerElRef}>\n              {innerContent}\n            </div>\n          </div>\n        )}\n      </RenderHook>\n    )\n  }\n\n  renderSegList(allSegs: Seg[], dayDates: DateMarker[]) {\n    let { theme, options } = this.context\n    let segsByDay = groupSegsByDay(allSegs) // sparse array\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          let innerNodes: VNode[] = []\n\n          for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n            let daySegs = segsByDay[dayIndex]\n\n            if (daySegs) { // sparse array, so might be undefined\n              let dayStr = dayDates[dayIndex].toISOString()\n\n              // append a day header\n              innerNodes.push(\n                <ListViewHeaderRow\n                  key={dayStr}\n                  dayDate={dayDates[dayIndex]}\n                  todayRange={todayRange}\n                />,\n              )\n\n              daySegs = sortEventSegs(daySegs, options.eventOrder)\n\n              for (let seg of daySegs) {\n                innerNodes.push(\n                  <ListViewEventRow\n                    key={dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */}\n                    seg={seg}\n                    isDragging={false}\n                    isResizing={false}\n                    isDateSelecting={false}\n                    isSelected={false}\n                    {...getSegMeta(seg, todayRange, nowDate)}\n                  />,\n                )\n              }\n            }\n          }\n\n          return (\n            <table className={'fc-list-table ' + theme.getClass('table')}>\n              <tbody>{innerNodes}</tbody>\n            </table>\n          )\n        }}\n      </NowTimer>\n    )\n  }\n\n  _eventStoreToSegs(eventStore: EventStore, eventUiBases: EventUiHash, dayRanges: DateRange[]): Seg[] {\n    return this.eventRangesToSegs(\n      sliceEventStore(\n        eventStore,\n        eventUiBases,\n        this.props.dateProfile.activeRange,\n        this.context.options.nextDayThreshold,\n      ).fg,\n      dayRanges,\n    )\n  }\n\n  eventRangesToSegs(eventRanges: EventRenderRange[], dayRanges: DateRange[]) {\n    let segs = []\n\n    for (let eventRange of eventRanges) {\n      segs.push(...this.eventRangeToSegs(eventRange, dayRanges))\n    }\n\n    return segs\n  }\n\n  eventRangeToSegs(eventRange: EventRenderRange, dayRanges: DateRange[]) {\n    let { dateEnv } = this.context\n    let { nextDayThreshold } = this.context.options\n    let range = eventRange.range\n    let allDay = eventRange.def.allDay\n    let dayIndex\n    let segRange\n    let seg\n    let segs = []\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex])\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex,\n        }\n\n        segs.push(seg)\n\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (\n          !seg.isEnd && !allDay &&\n          dayIndex + 1 < dayRanges.length &&\n          range.end <\n            dateEnv.add(\n              dayRanges[dayIndex + 1].start,\n              nextDayThreshold,\n            )\n        ) {\n          seg.end = range.end\n          seg.isEnd = true\n          break\n        }\n      }\n    }\n\n    return segs\n  }\n}\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text\n}\n\nfunction computeDateVars(dateProfile: DateProfile) {\n  let dayStart = startOfDay(dateProfile.renderRange.start)\n  let viewEnd = dateProfile.renderRange.end\n  let dayDates: DateMarker[] = []\n  let dayRanges: DateRange[] = []\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart)\n\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1),\n    })\n\n    dayStart = addDays(dayStart, 1)\n  }\n\n  return { dayDates, dayRanges }\n}\n\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs): Seg[][] {\n  let segsByDay = [] // sparse array\n  let i\n  let seg\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n      .push(seg)\n  }\n\n  return segsByDay\n}\n","import {\n  identity,\n  Identity,\n  ClassNamesGenerator,\n  CustomContentGenerator,\n  DidMountHandler,\n  WillUnmountHandler,\n  createFormatter,\n  FormatterInput,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  NoEventsContentArg,\n  NoEventsMountArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter, // defaults specified in list plugins\n  listDaySideFormat: createFalsableFormatter, // \"\n\n  noEventsClassNames: identity as Identity<ClassNamesGenerator<NoEventsContentArg>>,\n  noEventsContent: identity as Identity<CustomContentGenerator<NoEventsContentArg>>,\n  noEventsDidMount: identity as Identity<DidMountHandler<NoEventsMountArg>>,\n  noEventsWillUnmount: identity as Identity<WillUnmountHandler<NoEventsMountArg>>,\n\n  // noEventsText is defined in base options\n}\n\nfunction createFalsableFormatter(input: FormatterInput | false) {\n  return input === false ? null : createFormatter(input)\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { ListView } from './ListView'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { ListView }\nexport * from './api-type-deps'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    list: {\n      component: ListView,\n      buttonTextKey: 'list', // what to lookup in locale files\n      listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: { days: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: { weeks: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is more important\n      listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    },\n\n    listMonth: {\n      type: 'list',\n      duration: { month: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: { year: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}