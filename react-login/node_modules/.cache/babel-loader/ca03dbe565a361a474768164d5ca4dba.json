{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'javascript-time-ago';\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter';\nimport { getDate } from './helpers/date';\nimport Updater from './Updater';\nimport { style as styleType } from './PropTypes';\nfunction ReactTimeAgo(_ref) {\n  var date = _ref.date,\n    future = _ref.future,\n    timeStyle = _ref.timeStyle,\n    round = _ref.round,\n    minTimeLeft = _ref.minTimeLeft,\n    tooltip = _ref.tooltip,\n    Component = _ref.component,\n    container = _ref.container,\n    wrapperComponent = _ref.wrapperComponent,\n    wrapperProps = _ref.wrapperProps,\n    locale = _ref.locale,\n    locales = _ref.locales,\n    formatVerboseDate = _ref.formatVerboseDate,\n    verboseDateFormat = _ref.verboseDateFormat,\n    updateInterval = _ref.updateInterval,\n    tick = _ref.tick,\n    rest = _objectWithoutProperties(_ref, ['date', 'future', 'timeStyle', 'round', 'minTimeLeft', 'tooltip', 'component', 'container', 'wrapperComponent', 'wrapperProps', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']);\n\n  // Get the list of preferred locales.\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    }\n    // Add `javascript-time-ago` default locale.\n    return locales.concat(TimeAgo.getDefaultLocale());\n  }, [locale, locales]);\n\n  // Create `javascript-time-ago` formatter instance.\n  var timeAgo = useMemo(function () {\n    return new TimeAgo(preferredLocales);\n  }, [preferredLocales]);\n\n  // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n  date = useMemo(function () {\n    return getDate(date);\n  }, [date]);\n\n  // Formats the `date`.\n  var formatDate = useCallback(function () {\n    var now = Date.now();\n    var stopUpdates = void 0;\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n        getTimeToNextUpdate: true,\n        now: now,\n        future: future,\n        round: round\n      }),\n      _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n      formattedDate = _timeAgo$format2[0],\n      timeToNextUpdate = _timeAgo$format2[1];\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo]);\n  var formatDateRef = useRef();\n  formatDateRef.current = formatDate;\n  var _useMemo = useMemo(formatDate, []),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    _formattedDate = _useMemo2[0],\n    _nextUpdateTime = _useMemo2[1];\n  var _useState = useState(_formattedDate),\n    _useState2 = _slicedToArray(_useState, 2),\n    formattedDate = _useState2[0],\n    setFormattedDate = _useState2[1];\n\n  // The component sets the \"verbose date\" tooltip after the component \n  // has mounted rather than on the first render. \n  // The reason is that otherwise React would complain that \n  // server-side-rendered markup doesn't match client-side-rendered one.\n\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    shouldSetTooltipText = _useState4[0],\n    setShouldSetTooltipText = _useState4[1];\n  var updater = useRef();\n  useEffect(function () {\n    if (tick) {\n      updater.current = Updater.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  useEffect(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n        _formatDate2 = _slicedToArray(_formatDate, 1),\n        _formattedDate2 = _formatDate2[0];\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]);\n  useEffect(function () {\n    setShouldSetTooltipText(true);\n  }, []);\n\n  // Create verbose date formatter for the tooltip text.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n  var verboseDateFormatter = useMemo(function () {\n    if (typeof window !== 'undefined') {\n      return createVerboseDateFormatter(preferredLocales, verboseDateFormat);\n    }\n  }, [preferredLocales, verboseDateFormat]);\n\n  // Format verbose date for the tooltip.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n  var verboseDate = useMemo(function () {\n    if (typeof window !== 'undefined') {\n      if (formatVerboseDate) {\n        return formatVerboseDate(date);\n      }\n      return verboseDateFormatter(date);\n    }\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n  var result = React.createElement(Component, _extends({\n    date: date,\n    verboseDate: shouldSetTooltipText ? verboseDate : undefined,\n    tooltip: tooltip\n  }, rest), formattedDate);\n  var WrapperComponent = wrapperComponent || container;\n  if (WrapperComponent) {\n    return React.createElement(WrapperComponent, _extends({}, wrapperProps, {\n      verboseDate: shouldSetTooltipText ? verboseDate : undefined\n    }), result);\n  }\n  return result;\n}\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Alternatively to `locale`, one could pass `locales`:\n  // A list of preferred locales (ordered).\n  // Will choose the first supported locale from the list.\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // If set to `true`, then will stop at \"zero point\"\n  // when going from future dates to past dates.\n  // In other words, even if the `date` has passed,\n  // it will still render as if `date` is `now`.\n  future: PropTypes.bool,\n  // Date/time formatting style.\n  // See `javascript-time-ago` docs on \"Styles\" for more info.\n  // E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\n  timeStyle: styleType,\n  // `round` parameter of `javascript-time-ago`.\n  // See `javascript-time-ago` docs on \"Rounding\" for more info.\n  // Examples: \"round\", \"floor\".\n  round: PropTypes.string,\n  // If specified, the time won't \"tick\" past this threshold (in seconds).\n  // For example, if `minTimeLeft` is `60 * 60`\n  // then the time won't \"tick\" past \"in 1 hour\".\n  minTimeLeft: PropTypes.number,\n  // A React component to render the relative time label.\n  // Receives properties:\n  // * date: Date — The date.\n  // * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\n  // * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\n  // * children: string — The relative time label.\n  // * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\n  component: PropTypes.elementType.isRequired,\n  // Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\n  // Is `true` by default.\n  // Can be set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // Verbose date formatter.\n  // By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for formatting verbose date.\n  // See `Intl.DateTimeFormat` docs for more info.\n  verboseDateFormat: PropTypes.object,\n  // (deprecated)\n  // How often the component refreshes itself.\n  // Instead, consider using `getNextTimeToUpdate()` feature\n  // of `javascript-time-ago` styles.\n  updateInterval: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.shape({\n    threshold: PropTypes.number,\n    interval: PropTypes.number.isRequired\n  }))]),\n  // (deprecated).\n  // Set to `false` to disable automatic refresh of the component.\n  // Is `true` by default.\n  // I guess no one actually turns that off.\n  tick: PropTypes.bool,\n  // (advanced)\n  // A React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // Also receives `wrapperProps`, if they're passed.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  // See the \"Tooltip\" readme section for more info.\n  // Another example could be having `wrapperComponent`\n  // being rerendered every time the component refreshes itself.\n  wrapperComponent: PropTypes.func,\n  // Custom `props` passed to `wrapperComponent`.\n  wrapperProps: PropTypes.object\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Use a `<time/>` tag by default.\n  component: Time,\n  // Use HTML `tooltip` attribute to show a verbose date tooltip.\n  tooltip: true,\n  // `Intl.DateTimeFormat` for verbose date.\n  // Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit'\n    // timeZoneName: 'short'\n  },\n\n  // Automatically refreshes itself.\n  tick: true\n\n  // The component schedules a next refresh every time it renders.\n  // There's no need to rerender this component unless its props change.\n};\nReactTimeAgo = React.memo(ReactTimeAgo);\nexport default ReactTimeAgo;\n\n// `setTimeout()` has a bug where it fires immediately\n// when the interval is longer than about `24.85` days.\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\nvar SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647;\nfunction getSafeTimeoutInterval(interval) {\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL);\n}\n\n// A thousand years is practically a metaphor for \"infinity\".\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR;\nfunction Time(_ref2) {\n  var date = _ref2.date,\n    verboseDate = _ref2.verboseDate,\n    tooltip = _ref2.tooltip,\n    children = _ref2.children,\n    rest = _objectWithoutProperties(_ref2, ['date', 'verboseDate', 'tooltip', 'children']);\n  var isoString = useMemo(function () {\n    return date.toISOString();\n  }, [date]);\n  return React.createElement('time', _extends({}, rest, {\n    dateTime: isoString,\n    title: tooltip ? verboseDate : undefined\n  }), children);\n}\nTime.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n  verboseDate: PropTypes.string,\n  tooltip: PropTypes.bool.isRequired,\n  children: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["React","useEffect","useState","useRef","useCallback","useMemo","PropTypes","TimeAgo","createVerboseDateFormatter","getDate","Updater","style","styleType","ReactTimeAgo","date","future","timeStyle","round","minTimeLeft","tooltip","component","Component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","now","Date","stopUpdates","getTime","undefined","maxNow","formattedDate","timeToNextUpdate","format","getTimeToNextUpdate","INFINITY","formatDateRef","current","_formattedDate","_nextUpdateTime","setFormattedDate","shouldSetTooltipText","setShouldSetTooltipText","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","verboseDateFormatter","window","verboseDate","result","WrapperComponent","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","elementType","func","object","shape","threshold","interval","defaultProps","Time","weekday","day","month","year","hour","minute","second","memo","SET_TIMEOUT_MAX_SAFE_INTERVAL","getSafeTimeoutInterval","Math","min","YEAR","children","isoString","toISOString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport Updater from './Updater'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => new TimeAgo(preferredLocales), [preferredLocales])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = Date.now()\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\t// The component sets the \"verbose date\" tooltip after the component \r\n\t// has mounted rather than on the first render. \r\n\t// The reason is that otherwise React would complain that \r\n\t// server-side-rendered markup doesn't match client-side-rendered one.\r\n\tconst [shouldSetTooltipText, setShouldSetTooltipText] = useState()\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShouldSetTooltipText(true)\r\n\t}, [])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tif (formatVerboseDate) {\r\n\t\t\t\treturn formatVerboseDate(date)\r\n\t\t\t}\r\n\t\t\treturn verboseDateFormatter(date)\r\n\t\t}\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.func,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// `setTimeout()` has a bug where it fires immediately\r\n// when the interval is longer than about `24.85` days.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647\r\nfunction getSafeTimeoutInterval(interval) {\r\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL)\r\n}\r\n\r\n// A thousand years is practically a metaphor for \"infinity\".\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR\r\n\r\nfunction Time({\r\n\tdate,\r\n\tverboseDate,\r\n\ttooltip,\r\n\tchildren,\r\n\t...rest\r\n}) {\r\n\tconst isoString = useMemo(() => date.toISOString(), [date])\r\n\treturn (\r\n\t\t<time\r\n\t\t\t{...rest}\r\n\t\t\tdateTime={isoString}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined}>\r\n\t\t\t{children}\r\n\t\t</time>\r\n\t)\r\n}\r\n\r\nTime.propTypes = {\r\n\tdate: PropTypes.instanceOf(Date).isRequired,\r\n\tverboseDate: PropTypes.string,\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\tchildren: PropTypes.string.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}