{"ast":null,"code":"import { intlDateTimeFormatSupported, intlDateTimeFormatSupportedLocale } from './locale';\nimport Cache from './cache';\nvar cache = new Cache();\n\n/**\r\n * Creates verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\nexport default function createVerboseDateFormatter(locales, format) {\n  // Fall back to `date.toString()` for old web browsers.\n  // https://caniuse.com/#search=intl\n  if (!intlDateTimeFormatSupported()) {\n    return function (date) {\n      return date.toString();\n    };\n  }\n\n  // If none of the `locales` are supported\n  // a default system locale will be used.\n  var locale = resolveLocale(locales);\n\n  // `Intl.DateTimeFormat` format caching key.\n  // E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\n  // Didn't benchmark what's faster:\n  // creating a new `Intl.DateTimeFormat` instance\n  // or stringifying a small JSON `format`.\n  // Perhaps strigifying JSON `format` is faster.\n  var formatFingerprint = JSON.stringify(format);\n\n  // Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\n  // (`locale` can be `undefined` therefore `String(locale)`)\n  var formatter = cache.get(String(locale), formatFingerprint) || cache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format));\n\n  // Return date formatter\n  return function (date) {\n    return formatter.format(date);\n  };\n}\n\n// Caching locale resolving for optimizing pages \n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\n// For example, it could be 25 milliseconds for 200 calls.\nvar resolvedLocales = {};\n\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\nfunction resolveLocale(locales) {\n  var localesFingerprint = locales.toString();\n  if (resolvedLocales[localesFingerprint]) {\n    return resolvedLocales[localesFingerprint];\n  }\n  return resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales);\n}","map":{"version":3,"sources":["../../source/helpers/verboseDateFormatter.js"],"names":["intlDateTimeFormatSupported","intlDateTimeFormatSupportedLocale","Cache","cache","createVerboseDateFormatter","locales","format","date","toString","locale","resolveLocale","formatFingerprint","JSON","stringify","formatter","get","String","put","Intl","DateTimeFormat","resolvedLocales","localesFingerprint"],"mappings":"AAAA,SACCA,2BADD,EAECC,iCAFD,QAGO,UAHP;AAKA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAMC,KAAAA,GAAQ,IAAID,KAAJ,EAAd;;AAEA;;;;;;;;;;;;;;;AAeA,eAAe,SAASE,0BAAT,CAAoCC,OAApC,EAA6CC,MAA7C,EAAqD;EACnE;EACA;EACA,IAAI,CAACN,2BAAAA,EAAL,EAAoC;IACnC,OAAO,UAAA,IAAA,EAAA;MAAA,OAAQO,IAAAA,CAAKC,QAALD,EAAR;IAAA,CAAP;EACA;;EAED;EACA;EACA,IAAME,MAAAA,GAASC,aAAAA,CAAcL,OAAdK,CAAf;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMC,iBAAAA,GAAoBC,IAAAA,CAAKC,SAALD,CAAeN,MAAfM,CAA1B;;EAEA;EACA;EACA,IAAME,SAAAA,GAAYX,KAAAA,CAAMY,GAANZ,CAAUa,MAAAA,CAAOP,MAAPO,CAAVb,EAA0BQ,iBAA1BR,CAAAA,IACjBA,KAAAA,CAAMc,GAANd,CAAUa,MAAAA,CAAOP,MAAPO,CAAVb,EAA0BQ,iBAA1BR,EAA6C,IAAIe,IAAAA,CAAKC,cAAT,CAAwBV,MAAxB,EAAgCH,MAAhC,CAA7CH,CADD;;EAGA;EACA,OAAO,UAAA,IAAA,EAAA;IAAA,OAAQW,SAAAA,CAAUR,MAAVQ,CAAiBP,IAAjBO,CAAR;EAAA,CAAP;AACA;;AAED;AACA;AACA;AACA;AACA,IAAMM,eAAAA,GAAkB,CAAA,CAAxB;;AAEA;;;;;AAKA,SAASV,aAAT,CAAuBL,OAAvB,EAAgC;EAC/B,IAAMgB,kBAAAA,GAAqBhB,OAAAA,CAAQG,QAARH,EAA3B;EACA,IAAIe,eAAAA,CAAgBC,kBAAhBD,CAAJ,EAAyC;IACxC,OAAOA,eAAAA,CAAgBC,kBAAhBD,CAAP;EACA;EACD,OAAOA,eAAAA,CAAgBC,kBAAhBD,CAAAA,GAAsCnB,iCAAAA,CAAkCI,OAAlCJ,CAA7C;AACA","sourcesContent":["import {\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n} from './locale'\r\n\r\nimport Cache from './cache'\r\n\r\nconst cache = new Cache()\r\n\r\n/**\r\n * Creates verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nexport default function createVerboseDateFormatter(locales, format) {\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!intlDateTimeFormatSupported()) {\r\n\t\treturn date => date.toString()\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = resolveLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined` therefore `String(locale)`)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}\r\n\r\n// Caching locale resolving for optimizing pages \r\n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\r\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\r\n// For example, it could be 25 milliseconds for 200 calls.\r\nconst resolvedLocales = {}\r\n\r\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\r\nfunction resolveLocale(locales) {\r\n\tconst localesFingerprint = locales.toString()\r\n\tif (resolvedLocales[localesFingerprint]) {\r\n\t\treturn resolvedLocales[localesFingerprint] \r\n\t}\r\n\treturn resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales)\r\n}"]},"metadata":{},"sourceType":"module"}