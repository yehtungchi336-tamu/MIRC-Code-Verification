{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n// Manages the updates of all `<ReactTimeAgo/>` elements on a page.\n\n// The reasons for going with `requestAnimationFrame()`:\n// * `requestAnimationFrame` won't be called when a tab is in background.\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\n\n// `requestAnimationFrame()` polyfill for old browsers.\nimport requestAnimationFrame from 'raf';\nimport binarySearch from './helpers/binarySearch';\nexport default {\n  instances: [],\n  add: function add(instance) {\n    var _this = this;\n    var wasIdle = this.instances.length === 0;\n    _add(this.instances, instance);\n    if (wasIdle) {\n      this.start();\n    }\n    return {\n      stop: function stop() {\n        remove(_this.instances, instance);\n        if (_this.instances.length === 0) {\n          _this.stop();\n        }\n      },\n      forceUpdate: function forceUpdate() {\n        updateInstance(instance, _this.instances);\n      }\n    };\n  },\n  tick: function tick() {\n    var now = Date.now();\n    while (true) {\n      var instance = this.instances[0];\n      if (now >= instance.nextUpdateTime) {\n        updateInstance(instance, this.instances);\n      } else {\n        break;\n      }\n    }\n  },\n  scheduleNextTick: function scheduleNextTick() {\n    var _this2 = this;\n    this.scheduledTick = requestAnimationFrame(function () {\n      _this2.tick();\n      _this2.scheduleNextTick();\n    });\n  },\n  start: function start() {\n    this.scheduleNextTick();\n  },\n  stop: function stop() {\n    requestAnimationFrame.cancel(this.scheduledTick);\n  }\n};\nfunction _updateInstance(instance) {\n  var _instance$getNextValu = instance.getNextValue(),\n    _instance$getNextValu2 = _slicedToArray(_instance$getNextValu, 2),\n    value = _instance$getNextValu2[0],\n    nextUpdateTime = _instance$getNextValu2[1];\n  instance.setValue(value);\n  instance.nextUpdateTime = nextUpdateTime;\n}\nfunction updateInstance(instance, instances) {\n  _updateInstance(instance);\n  remove(instances, instance);\n  _add(instances, instance);\n}\nfunction _add(instances, instance) {\n  var i = findTargetIndex(instances, instance);\n  instances.splice(i, 0, instance);\n}\nfunction remove(instances, instance) {\n  var i = instances.indexOf(instance);\n  instances.splice(i, 1);\n}\nfunction findTargetIndex(instances, instance) {\n  var nextUpdateTime = instance.nextUpdateTime;\n  return binarySearch(instances, function (instance) {\n    if (instance.nextUpdateTime === nextUpdateTime) {\n      return 0;\n    } else if (instance.nextUpdateTime > nextUpdateTime) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["../source/Updater.js"],"names":["requestAnimationFrame","binarySearch","instances","add","instance","wasIdle","length","start","stop","remove","forceUpdate","updateInstance","tick","now","Date","nextUpdateTime","scheduleNextTick","scheduledTick","cancel","_updateInstance","value","getNextValue","setValue","i","findTargetIndex","splice","indexOf"],"mappings":"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","sourcesContent":["// Manages the updates of all `<ReactTimeAgo/>` elements on a page.\r\n\r\n// The reasons for going with `requestAnimationFrame()`:\r\n// * `requestAnimationFrame` won't be called when a tab is in background.\r\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\r\n\r\n// `requestAnimationFrame()` polyfill for old browsers.\r\nimport requestAnimationFrame from 'raf'\r\n\r\nimport binarySearch from './helpers/binarySearch'\r\n\r\nexport default {\r\n\tinstances: [],\r\n\tadd(instance) {\r\n\t\tconst wasIdle = this.instances.length === 0\r\n\t\tadd(this.instances, instance)\r\n\t\tif (wasIdle) {\r\n\t\t\tthis.start()\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstop: () => {\r\n\t\t\t\tremove(this.instances, instance)\r\n\t\t\t\tif (this.instances.length === 0) {\r\n\t\t\t\t\tthis.stop()\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tforceUpdate: () => {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\ttick() {\r\n\t\tconst now = Date.now()\r\n\t\twhile (true) {\r\n\t\t\tconst instance = this.instances[0]\r\n\t\t\tif (now >= instance.nextUpdateTime) {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t} else {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tscheduleNextTick() {\r\n\t\tthis.scheduledTick = requestAnimationFrame(() => {\r\n\t\t\tthis.tick()\r\n\t\t\tthis.scheduleNextTick()\r\n\t\t})\r\n\t},\r\n\tstart() {\r\n\t\tthis.scheduleNextTick()\r\n\t},\r\n\tstop() {\r\n\t\trequestAnimationFrame.cancel(this.scheduledTick)\r\n\t}\r\n}\r\n\r\nfunction _updateInstance(instance) {\r\n\tconst [value, nextUpdateTime] = instance.getNextValue()\r\n\tinstance.setValue(value)\r\n\tinstance.nextUpdateTime = nextUpdateTime\r\n}\r\n\r\nfunction updateInstance(instance, instances) {\r\n\t_updateInstance(instance)\r\n\tremove(instances, instance)\r\n\tadd(instances, instance)\r\n}\r\n\r\nfunction add(instances, instance) {\r\n\tconst i = findTargetIndex(instances, instance)\r\n\tinstances.splice(i, 0, instance)\r\n}\r\n\r\nfunction remove(instances, instance) {\r\n\tconst i = instances.indexOf(instance)\r\n\tinstances.splice(i, 1)\t\r\n}\r\n\r\nfunction findTargetIndex(instances, instance) {\r\n\tconst { nextUpdateTime } = instance\r\n\treturn binarySearch(instances, (instance) => {\r\n\t\tif (instance.nextUpdateTime === nextUpdateTime) {\r\n\t\t\treturn 0\r\n\t\t} else if (instance.nextUpdateTime > nextUpdateTime) {\r\n\t\t\treturn 1\r\n\t\t} else {\r\n\t\t\treturn -1\r\n\t\t}\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}