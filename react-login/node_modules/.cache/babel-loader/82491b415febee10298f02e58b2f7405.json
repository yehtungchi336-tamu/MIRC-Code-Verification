{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __spread, __values, __extends, __assign, __read, __awaiter, __generator } from 'tslib';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, stringLength, errorPrefix, validateArgCount, validateCallback, Deferred, assertionError, safeGet, map, validateContextObject, deepCopy, isMobileCordova, base64Encode, isAdmin, isValidFormat, isEmpty, isReactNative, querystring } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\nvar DOMStorageWrapper = /** @class */function () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n  return DOMStorageWrapper;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\nvar MemoryStorage = /** @class */function () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n  MemoryStorage.prototype.get = function (key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  };\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n  return MemoryStorage;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\nvar createStoragefor = function createStoragefor(domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\nvar sha1 = function sha1(str) {\n  var utf8Bytes = stringToByteArray(str);\n  var sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\nvar buildLogMessage_ = function buildLogMessage_() {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = '';\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\nvar enableLogging = function enableLogging(logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\nvar log = function log() {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\nvar logWrapper = function logWrapper(prefix) {\n  return function () {\n    var varArgs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n    log.apply(void 0, __spread([prefix], varArgs));\n  };\n};\n/**\r\n * @param {...string} varArgs\r\n */\nvar error = function error() {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spread(varArgs));\n  logClient.error(message);\n};\n/**\r\n * @param {...string} varArgs\r\n */\nvar fatal = function fatal() {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, __spread(varArgs));\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} varArgs\r\n */\nvar warn = function warn() {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spread(varArgs));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n    var wrappedFn_1 = function wrappedFn_1() {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn_1, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn_1);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\nvar nameCompare = function nameCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\nvar stringCompare = function stringCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\nvar requireKey = function requireKey(key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  var keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (var k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  var key = '{';\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n  var len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  var dataSegs = [];\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  var ebits = 11,\n    fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  var bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join('');\n  // Return the data as a hex string. --MJL\n  var hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\nvar errorForServerCode = function errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nvar INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nvar INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\nvar tryParseInt = function tryParseInt(str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\nvar exceptionGuard = function exceptionGuard(fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\nvar beingCrawled = function beingCrawled() {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n  var timeout = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nvar Path = /** @class */function () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      var copyTo = 0;\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function get() {\n      return new Path('');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n    return null;\n  };\n  Path.prototype.toString = function () {\n    var pathString = '';\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  };\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n    var pieces = [];\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  };\n  return Path;\n}(); // end Path\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nvar ValidationPath = /** @class */function () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function get() {\n      return 32;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function get() {\n      return 768;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @param {string} child */\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  };\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n  return ValidationPath;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nvar FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nvar LAST_SESSION_PARAM = 'ls';\nvar APPLICATION_ID_PARAM = 'p';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\nvar RepoInfo = /** @class */function () {\n  /**\r\n   * @param host Hostname portion of the url for the repo\r\n   * @param secure Whether or not this repo is accessed over ssl\r\n   * @param namespace The namespace represented by the repo\r\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {\n    if (nodeAdmin === void 0) {\n      nodeAdmin = false;\n    }\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;\n  };\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n    var pairs = [];\n    each(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  };\n  /** @return {string} */\n  RepoInfo.prototype.toURLString = function () {\n    var protocol = this.secure ? 'https://' : 'http://';\n    var query = this.includeNamespaceInQueryParams ? \"?ns=\" + this.namespace : '';\n    return \"\" + protocol + this.host + \"/\" + query;\n  };\n  return RepoInfo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n  var results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  try {\n    for (var _b = __values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n      if (segment.length === 0) {\n        continue;\n      }\n      var kv = segment.split('=');\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return results;\n}\nvar parseRepoInfo = function parseRepoInfo(dataURL, nodeAdmin) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\nvar parseDatabaseURL = function parseDatabaseURL(dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  var secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    var slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    var questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    var hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      var dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\nvar isValidKey = function isValidKey(key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\nvar isValidPathString = function isValidPathString(pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\nvar isValidPriority = function isValidPriority(priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\nvar validateFirebaseDataArg = function validateFirebaseDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\nvar validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\nvar validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n  var i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\nvar validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  var errorPrefix$1 = errorPrefix(fnName, argumentNumber, optional);\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nvar validatePriority = function validatePriority(fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nvar validateEventType = function validateEventType(fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\nvar validateKey = function validateKey(fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\nvar validatePathString = function validatePathString(fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nvar validateRootPathString = function validateRootPathString(fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nvar validateUrl = function validateUrl(fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\nvar validateBoolean = function validateBoolean(fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @constructor\r\n */\nvar OnDisconnect = /** @class */function () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n  OnDisconnect.prototype.remove = function (onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  return OnDisconnect;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar TransactionResult = /** @class */function () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  TransactionResult.prototype.toJSON = function () {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n  return TransactionResult;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nvar PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nvar MIN_PUSH_CHAR = '-';\nvar MAX_PUSH_CHAR = 'z';\nvar MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nvar nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  var lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\nvar successor = function successor(key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  var keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  var next = new Array(key.length);\n  for (var i_1 = 0; i_1 < next.length; i_1++) {\n    next[i_1] = key.charAt(i_1);\n  }\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n  var i = next.length - 1;\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n  var source = next[i];\n  var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nvar predecessor = function predecessor(key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  var keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  var next = new Array(key.length);\n  for (var i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\nvar NamedNode = /** @class */function () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n  return NamedNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @constructor\r\n */\nvar Index = /** @class */function () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  return Index;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __EMPTY_NODE;\nvar KeyIndex = /** @class */function (_super) {\n  __extends(KeyIndex, _super);\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n  return KeyIndex;\n}(Index);\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_NODE;\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\nvar priorityHashText = function priorityHashText(priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nvar LeafNode = /** @class */function () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function get() {\n      return __childrenNodeConstructor;\n    },\n    set: function set(val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      var type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar nodeFromJSON;\nvar MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\nvar PriorityIndex = /** @class */function (_super) {\n  __extends(PriorityIndex, _super);\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n  return PriorityIndex;\n}(Index);\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nvar SortedMapIterator = /** @class */function () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n    this.nodeStack_ = [];\n    var cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    var node = this.nodeStack_.pop();\n    var result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  };\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nvar LLRBNode = /** @class */function () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    var n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    var blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nvar LLRBEmptyNode = /** @class */function () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nvar SortedMap = /** @class */function () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\nvar Base12Num = /** @class */function () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function logBase2(num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n    var bitMask = function bitMask(bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\nvar buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  var buildBalancedTree = function buildBalancedTree(low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  var buildFrom12Array = function buildFrom12Array(base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n    var buildPennant = function buildPennant(chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    var attachPennant = function attachPennant(pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _defaultIndexMap;\nvar fallbackObject = {};\nvar IndexMap = /** @class */function () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function get() {\n      assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  };\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    var newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    var indexName = indexDefinition.toString();\n    var newIndexSet = __assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    var newIndexes = __assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n    var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {\n      var index = safeGet(_this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  return IndexMap;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\nvar ChildrenNode = /** @class */function () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function get() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n        newIndexMap = void 0;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    var obj = {};\n    var numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = [];\n      // eslint-disable-next-line guard-for-in\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\nvar MaxNode = /** @class */function (_super) {\n  __extends(MaxNode, _super);\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\nvar ValueIndex = /** @class */function (_super) {\n  __extends(ValueIndex, _super);\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n  return ValueIndex;\n}(Index);\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\nvar PathIndex = /** @class */function (_super) {\n  __extends(PathIndex, _super);\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n    _this.indexPath_ = indexPath_;\n    assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n  return PathIndex;\n}(Index);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nvar DataSnapshot = /** @class */function () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  DataSnapshot.prototype.val = function () {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  DataSnapshot.prototype.exportVal = function () {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  };\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n  DataSnapshot.prototype.exists = function () {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n  DataSnapshot.prototype.child = function (childPathString) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n  DataSnapshot.prototype.getPriority = function () {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n    var childrenNode = this.node_;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n  DataSnapshot.prototype.hasChildren = function () {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  };\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function get() {\n      return this.ref_.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n  DataSnapshot.prototype.numChildren = function () {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n  DataSnapshot.prototype.getRef = function () {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\nvar DataEvent = /** @class */function () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  };\n  return DataEvent;\n}();\nvar CancelEvent = /** @class */function () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n  return CancelEvent;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents registration for 'value' events.\r\n */\nvar ValueEventRegistration = /** @class */function () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\nvar ChildEventRegistration = /** @class */function () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child( /** @type {!string} */change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.matches = function (other) {\n    var _this = this;\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherKeys = Object.keys(other.callbacks_);\n        var thisKeys = Object.keys(this.callbacks_);\n        var otherCount = otherKeys.length;\n        var thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey = otherKeys[0];\n            var thisKey = thisKeys[0];\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(function (eventType) {\n              return other.callbacks_[eventType] === _this.callbacks_[eventType];\n            });\n          }\n        }\n      }\n    }\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n  return ChildEventRegistration;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nvar Query = /** @class */function () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function get() {\n      assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function set(val) {\n      __referenceConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n        if (startName !== MIN_NAME && !(params.hasStartAfter() && startName === MAX_NAME)) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n        if (endName !== MAX_NAME && !(params.hasEndBefore() && endName === MIN_NAME)) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n  Query.prototype.getRef = function () {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n  Query.prototype.off = function (eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n  Query.prototype.get = function () {\n    return this.repo.getValue(this);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param failureCallbackOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\n    var _this = this;\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    var firstCall = true;\n    var deferred = new Deferred();\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(function () {});\n    var onceCallback = function onceCallback(snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        _this.off(eventType, onceCallback);\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n    this.on(eventType, onceCallback, /*cancel=*/function (err) {\n      _this.off(eventType, onceCallback);\n      if (ret.cancel) {\n        ret.cancel.bind(ret.context)(err);\n      }\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n  Query.prototype.limitToFirst = function (limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n  Query.prototype.limitToLast = function (limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n  Query.prototype.orderByChild = function (path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n  Query.prototype.orderByKey = function () {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n  Query.prototype.orderByPriority = function () {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n  Query.prototype.orderByValue = function () {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    }\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  Query.prototype.startAfter = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);\n    validateKey('Query.startAfter', 2, name, true);\n    var newParams = this.queryParams_.startAfter(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' + 'or equalTo).');\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' + 'equalTo).');\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  Query.prototype.endBefore = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);\n    validateKey('Query.endBefore', 2, name, true);\n    var newParams = this.queryParams_.endBefore(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' + 'equalTo).');\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n  Query.prototype.equalTo = function (value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n  Query.prototype.toString = function () {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  };\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n  Query.prototype.isEqual = function (other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n    return ret;\n  };\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Query;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ExistingValueProvider = /** @class */function () {\n  function ExistingValueProvider(node_) {\n    this.node_ = node_;\n  }\n  ExistingValueProvider.prototype.getImmediateChild = function (childName) {\n    var child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  };\n  ExistingValueProvider.prototype.node = function () {\n    return this.node_;\n  };\n  return ExistingValueProvider;\n}();\nvar DeferredValueProvider = /** @class */function () {\n  function DeferredValueProvider(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  DeferredValueProvider.prototype.getImmediateChild = function (childName) {\n    var childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  };\n  DeferredValueProvider.prototype.node = function () {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  };\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\nvar generateWithValues = function generateWithValues(values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\nvar resolveDeferredLeafValue = function resolveDeferredLeafValue(value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nvar resolveScalarDeferredValue = function resolveScalarDeferredValue(op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nvar resolveComplexDeferredValue = function resolveComplexDeferredValue(op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  var delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  var existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!Path} path path to which write is relative\r\n * @param {!Node} node new data written at path\r\n * @param {!SyncTree} syncTree current data\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\nvar resolveDeferredValueTree = function resolveDeferredValueTree(path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\nvar resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\nvar SparseSnapshotTree = /** @class */function () {\n  function SparseSnapshotTree() {\n    this.value = null;\n    this.children = new Map();\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return The retrieved node, or null.\r\n   */\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      var childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        var childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @param data The new data, or null.\r\n   */\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      var childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n      var child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return True if this node should now be removed.\r\n   */\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value;\n          this.value = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        var childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          var safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param prefixPath Path to look up node for.\r\n   * @param func The function to invoke for each tree.\r\n   */\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param func The function to invoke for each child.\r\n   */\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    this.children.forEach(function (tree, key) {\n      func(key, tree);\n    });\n  };\n  return SparseSnapshotTree;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\nvar OperationSource = /** @class */function () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n  OperationSource.User = new OperationSource( /*fromUser=*/true, false, null, /*tagged=*/false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n  OperationSource.Server = new OperationSource(false, /*fromServer=*/true, null, /*tagged=*/false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false, /*fromServer=*/true, queryId, /*tagged=*/true);\n  };\n  return OperationSource;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AckUserWrite = /** @class */function () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n  return AckUserWrite;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\nvar EmptyChildren = function EmptyChildren() {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nvar ImmutableTree = /** @class */function () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar ListenComplete = /** @class */function () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n  return ListenComplete;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar Overwrite = /** @class */function () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n  return Overwrite;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar Merge = /** @class */function () {\n  function Merge( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n  return Merge;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nvar CacheNode = /** @class */function () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n  return CacheNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\nvar ViewCache = /** @class */function () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false), new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false));\n  return ViewCache;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\nvar Change = /** @class */function () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  };\n  //event types\n  /** Event type for a child added */\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n  Change.VALUE = 'value';\n  return Change;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\nvar IndexedFilter = /** @class */function () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  return IndexedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ChildChangeAccumulator = /** @class */function () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      var oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.delete(childKey);\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n  return ChildChangeAccumulator;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar NoCompleteChildSource_ = /** @class */function () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\nvar WriteTreeCompleteChildSource = /** @class */function () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n  return WriteTreeCompleteChildSource;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @constructor\r\n * @struct\r\n */\nvar ProcessorResult = /** @class */function () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\nvar ViewProcessor = /** @class */function () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals( /** @type {!Node} */oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange( /** @type {!Node} */newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n        serverNode = void 0;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront();\n          // update child\n          var newEventChild = void 0;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this;\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this;\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    var curViewCache = viewCache;\n    var viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n        var newChild = _this.applyMerge_(serverChild, childTree);\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    var filterServerNode = viewCache.getServerCache().isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    var serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n  return ViewProcessor;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\nvar EventGenerator = /** @class */function () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName( /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n  return EventGenerator;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\nvar View = /** @class */function () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache();\n    // Don't filter server node with other filter than index, wait for tagged listen\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n    if (cancelError) {\n      assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n    if (eventRegistration) {\n      var remaining = [];\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n  return View;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nvar SyncPoint = /** @class */function () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function get() {\n      assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function set(val) {\n      assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SyncPoint.prototype.isEmpty = function () {\n    return this.views.size === 0;\n  };\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var e_1, _a;\n    var queryId = operation.source.queryId;\n    if (queryId !== null) {\n      var view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events = [];\n      try {\n        for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var view = _c.value;\n          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return events;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      var viewCache = new ViewCache(new CacheNode( /** @type {!Node} */eventCache, eventCacheComplete, false), new CacheNode( /** @type {!Node} */serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var e_2, _a;\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      try {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (var _b = __values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = __read(_c.value, 2),\n            viewQueryId = _d[0],\n            view = _d[1];\n          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n          if (view.isEmpty()) {\n            this.views.delete(viewQueryId);\n            // We'll deal with complete views later.\n            if (!view.getQuery().getQueryParams().loadsAllData()) {\n              removed.push(view.getQuery());\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      var view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n  SyncPoint.prototype.getQueryViews = function () {\n    var e_3, _a;\n    var result = [];\n    try {\n      for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        if (!view.getQuery().getQueryParams().loadsAllData()) {\n          result.push(view);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return result;\n  };\n  /**\r\n   * @param path The path to the desired complete snapshot\r\n   * @return A complete cache, if it exists\r\n   */\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var e_4, _a;\n    var serverCache = null;\n    try {\n      for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        serverCache = serverCache || view.getCompleteServerCache(path);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    return serverCache;\n  };\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  };\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n  SyncPoint.prototype.getCompleteView = function () {\n    var e_5, _a;\n    try {\n      for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        if (view.getQuery().getQueryParams().loadsAllData()) {\n          return view;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return null;\n  };\n  return SyncPoint;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nvar CompoundWrite = /** @class */function () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    each(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param path The path to check for\r\n   * @return Whether there is a complete write at that path\r\n   */\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param path The path to get a complete write\r\n   * @return The node if complete at that path, or null otherwise.\r\n   */\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return A list of all complete children.\r\n   */\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  };\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return Whether this CompoundWrite is empty\r\n   */\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param node The node to apply this CompoundWrite to\r\n   * @return The node with all writes applied\r\n   */\n  CompoundWrite.prototype.apply = function (node) {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  };\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  return CompoundWrite;\n}();\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\nvar WriteTree = /** @class */function () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        each(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function filter(write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      });\n      // Add any complete children we have from the set\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   */\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   */\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (var childName in writeRecord.children) {\n        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   */\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   */\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   */\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          } else ;\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else ;\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  };\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\nvar WriteTreeRef = /** @class */function () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n  return WriteTreeRef;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\nvar SyncTree = /** @class */function () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param revert True if the given write failed and needs to be reverted\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        each(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n    var serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param eventRegistration If null, all callbacks are removed.\r\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return Cancel events, if cancelError was provided.\r\n   */\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this;\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n              newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    }\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   *\r\n   * @param path The path to the data we want\r\n   * @param writeIdsToExclude A specific set to be excluded\r\n   */\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   */\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n        each(childMap, function (_key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   *\r\n   * @return The normalized query\r\n   */\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef();\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @return This method can return events to support synchronous data sources\r\n   */\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n          each(childMap, function (_key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n    return events;\n  };\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function hashFn() {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function onComplete(status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query, /*eventRegistration*/null, error);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   */\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   */\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   */\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap.get(tag);\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   */\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   */\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   */\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache, /*serverCache=*/null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n   *\r\n   * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n   *\r\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   */\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_, /*serverCache=*/null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty);\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n    var syncPoint = syncPointTree.get(Path.Empty);\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   */\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\nvar SnapshotHolder = /** @class */function () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n  return SnapshotHolder;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\nvar StatsCollection = /** @class */function () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  };\n  StatsCollection.prototype.get = function () {\n    return deepCopy(this.counters_);\n  };\n  return StatsCollection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar StatsManager = /** @class */function () {\n  function StatsManager() {}\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n    return this.collections_[hashString];\n  };\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n    return this.reporters_[hashString];\n  };\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\nvar StatsListener = /** @class */function () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n    var delta = __assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  };\n  return StatsListener;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\nvar StatsReporter = /** @class */function () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n  return StatsReporter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\nvar EventQueue = /** @class */function () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n      if (eventList) {\n        var eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n    this.recursionDepth_--;\n  };\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\nvar EventList = /** @class */function () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n  return EventList;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nvar EventEmitter = /** @class */function () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} varArgs\r\n   */\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = __spread(this.listeners_[eventType]);\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n  return EventEmitter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @extends {EventEmitter}\r\n */\nvar VisibilityMonitor = /** @class */function (_super) {\n  __extends(VisibilityMonitor, _super);\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n    var hidden;\n    var visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    _this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n  return VisibilityMonitor;\n}(EventEmitter);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\nvar OnlineMonitor = /** @class */function (_super) {\n  __extends(OnlineMonitor, _super);\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n    _this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n  return OnlineMonitor;\n}(EventEmitter);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\nvar PacketReceiver = /** @class */function () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n    this.pendingResponses[requestNum] = data;\n    var _loop_1 = function _loop_1() {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n      var _loop_2 = function _loop_2(i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n        return \"break\";\n      }\n      this_1.currentResponseNum++;\n    };\n    var this_1 = this;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n      if (state_1 === \"break\") break;\n    }\n  };\n  return PacketReceiver;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\nvar BrowserPollConnection = /** @class */function () {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      _this.onClosed_();\n      _this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a = __read(args, 5),\n          command = _a[0],\n          arg1 = _a[1],\n          arg2 = _a[2],\n          arg3 = _a[3],\n          arg4 = _a[4];\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a = __read(args, 2),\n          pN = _a[0],\n          data = _a[1];\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n      if (_this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      var connectURL = _this.urlFn(urlParams);\n      _this.log_('Connecting via long-poll to ' + connectURL);\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  };\n  // Static method, use string literal so it can be accessed in a generic way\n  BrowserPollConnection.isAvailable = function () {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    var base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\nvar FirebaseIFrameScriptHolder = /** @class */function () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      var script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      var iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this;\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    var onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      var curDataString = '';\n      var i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this;\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    var doNewRequest = function doNewRequest() {\n      _this.outstandingRequests.delete(serial);\n      _this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    var readyStateCB = function readyStateCB() {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n              loadCB();\n            }\n          };\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n            _this.close();\n          };\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n  return FirebaseIFrameScriptHolder;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = '';\n// SDK_VERSION should be set before any database instance is created\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\nvar WebSocketConnection = /** @class */function () {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      if (isNodeSdk()) {\n        var device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        var options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n      _this.everConnected_ = true;\n    };\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n      _this.mySock = null;\n      _this.onClosed_();\n    };\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var error = e.message || e.data;\n      if (error) {\n        _this.log_(error);\n      }\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  WebSocketConnection.prototype.start = function () {};\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n      _this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\nvar TransportManager = /** @class */function () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function get() {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n      try {\n        for (var _b = __values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n  return TransportManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nvar UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\nvar Connection = /** @class */function () {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n  Connection.prototype.start_ = function () {\n    var _this = this;\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            _this.isHealthy_ = true;\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n            _this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n    return function (message) {\n      if (_this.state_ !== 2 /* DISCONNECTED */) {\n        if (conn === _this.rx_) {\n          _this.onPrimaryMessageReceived_(message);\n        } else if (conn === _this.secondaryConn_) {\n          _this.onSecondaryMessageReceived_(message);\n        } else {\n          _this.log_('message on old connection');\n        }\n      }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  };\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  };\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  };\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1 /* CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2 /* DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n  return Connection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nvar ServerActions = /** @class */function () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n  ServerActions.prototype.reportStats = function (stats) {};\n  return ServerActions;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nvar GET_CONNECT_TIMEOUT = 3 * 1000;\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nvar PersistentConnection = /** @class */function (_super) {\n  __extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param repoInfo_ Data about the namespace we are connecting to\r\n   * @param applicationId_ The Firebase App ID for this project\r\n   * @param onDataUpdate_ A callback for new data from the server\r\n   */\n  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n    _this.repoInfo_ = repoInfo_;\n    _this.applicationId_ = applicationId_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    /** Map<path, Map<queryId, ListenSpec>> */\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingGets_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.outstandingGetCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    _this.scheduleConnect_(0);\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n    return _this;\n  }\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  PersistentConnection.prototype.get = function (query) {\n    var _this = this;\n    var deferred = new Deferred();\n    var request = {\n      p: query.path.toString(),\n      q: query.queryObject()\n    };\n    var outstandingGet = {\n      action: 'g',\n      request: request,\n      onComplete: function onComplete(message) {\n        var payload = message['d'];\n        if (message['s'] === 'ok') {\n          _this.onDataUpdate_(request['p'], payload, /*isMerge*/false, /*tag*/null);\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    var index = this.outstandingGets_.length - 1;\n    if (!this.connected_) {\n      setTimeout(function () {\n        var get = _this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete _this.outstandingGets_[index];\n        _this.outstandingGetCount_--;\n        if (_this.outstandingGetCount_ === 0) {\n          _this.outstandingGets_ = [];\n        }\n        _this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n  PersistentConnection.prototype.sendGet_ = function (index) {\n    var _this = this;\n    var get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, function (message) {\n      delete _this.outstandingGets_[index];\n      _this.outstandingGetCount_--;\n      if (_this.outstandingGetCount_ === 0) {\n        _this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  };\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/p: pathString\n    };\n    var action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[/*data*/'d'];\n      var status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[/*status*/'s'];\n        var data = res[/*data*/'d'] || 'error';\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/p: pathString\n    };\n    var action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this;\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      var request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, function (result) {\n        var status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          var errorReason = result[/* data */'d'];\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n      _this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  };\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  };\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  };\n  PersistentConnection.prototype.establishConnection_ = function () {\n    var _this = this;\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n      var closeFn_1 = function closeFn_1() {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n      var sendRequestFn = function sendRequestFn(msg) {\n        assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, /* onKill= */function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error) {\n        self_1.log_('Failed to get token: ' + error);\n        if (!canceled_1) {\n          if (_this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn_1();\n        }\n      });\n    }\n  };\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n    var listen;\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  };\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b;\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n        try {\n          for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (var i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  };\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  };\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nvar ReadonlyRestClient = /** @class */function (_super) {\n  __extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n    _this.listens_ = {};\n    return _this;\n  }\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\n    // Mark this listener so we can tell if it's removed.\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  ReadonlyRestClient.prototype.get = function (query) {\n    var _this = this;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    var pathString = query.path.toString();\n    var deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\n    // no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken( /*forceRefresh=*/false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + querystring(queryStringParameters);\n      _this.log_('Sending REST request for ' + url);\n      var xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          var res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  };\n  return ReadonlyRestClient;\n}(ServerActions);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\nvar Repo = /** @class */function () {\n  function Repo(repoInfo_, forceRestClient_, app, authTokenProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.app = app;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = new SparseSnapshotTree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  Repo.prototype.start = function () {\n    var _this = this;\n    this.stats_ = StatsManager.getCollection(this.repoInfo_);\n    if (this.forceRestClient_ || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), this.authTokenProvider_);\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = this.app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), this.authTokenProvider_, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n    this.authTokenProvider_.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(this.repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactionsInit_();\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n        var node = _this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: function stopListening() {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: function stopListening(query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  };\n  /**\r\n   * @return The URL corresponding to the root of this Firebase.\r\n   */\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return The namespace represented by the repo.\r\n   */\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   */\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   */\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    var affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  };\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n    each(updates, function (key, value) {\n      _this.updateInfo_(key, value);\n    });\n  };\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n  /**\r\n   * The purpose of `getValue` is to return the latest known value\r\n   * satisfying `query`.\r\n   *\r\n   * This method will first check for in-memory cached values\r\n   * belonging to active listeners. If they are found, such values\r\n   * are considered to be the most up-to-date.\r\n   *\r\n   * If the client is not connected, this method will try to\r\n   * establish a connection and request the value for `query`. If\r\n   * the client is not able to retrieve the query result, it reports\r\n   * an error.\r\n   *\r\n   * @param query - The query to surface a value for.\r\n   */\n  Repo.prototype.getValue = function (query) {\n    var _this = this;\n    // Only active queries are cached. There is no persisted cache.\n    var cached = this.serverSyncTree_.calcCompleteEventCache(query.path);\n    if (!cached.isEmpty()) {\n      return Promise.resolve(new DataSnapshot(cached, query.getRef(), query.getQueryParams().getIndex()));\n    }\n    return this.server_.get(query).then(function (payload) {\n      var node = nodeFromJSON$1(payload);\n      var events = _this.serverSyncTree_.applyServerOverwrite(query.path, node);\n      _this.eventQueue_.raiseEventsAtPath(query.path, events);\n      return Promise.resolve(new DataSnapshot(node, query.getRef(), query.getQueryParams().getIndex()));\n    }, function (err) {\n      _this.log_('get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err));\n    });\n  };\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), function (status, errorReason) {\n      var success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    });\n    // Start with our existing data and merge each child into it.\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    each(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      each(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n        _this.rerunTransactions_(affectedPath);\n      });\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   */\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {\n      var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n      var affectedPath = _this.abortTransactions_(path);\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n    if (isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        each(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n    if (typeof console === 'undefined') {\n      return;\n    }\n    var stats;\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    each(stats, function (stat, value) {\n      var paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (var i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  };\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n  Repo.prototype.log_ = function () {\n    var varArgs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n    var prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log.apply(void 0, __spread([prefix], varArgs));\n  };\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n          var error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          error.code = code;\n          callback(error);\n        }\n      });\n    }\n  };\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function get() {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Repo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\nvar RangedFilter = /** @class */function () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    var filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n  return RangedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\nvar LimitedFilter = /** @class */function () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        var iterator = void 0;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        var count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n          cmp = function cmp(a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n        var count = 0;\n        var foundStartPost = false;\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n      cmp = function cmp(a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    var oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n  return LimitedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\nvar QueryParams = /** @class */function () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  QueryParams.prototype.hasStartAfter = function () {\n    return this.startAfterSet_;\n  };\n  QueryParams.prototype.hasEndBefore = function () {\n    return this.endBeforeSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n  QueryParams.prototype.getIndexStartValue = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n  QueryParams.prototype.getIndexStartName = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n  QueryParams.prototype.getIndexEndValue = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n  QueryParams.prototype.getIndexEndName = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n  QueryParams.prototype.getLimit = function () {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  };\n  QueryParams.prototype.startAfter = function (indexValue, key) {\n    var childKey;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    var params = this.startAt(indexValue, childKey);\n    params.startAfterSet_ = true;\n    return params;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  };\n  QueryParams.prototype.endBefore = function (indexValue, key) {\n    var childKey;\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    var params = this.endAt(indexValue, childKey);\n    params.endBeforeSet_ = true;\n    return params;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n    if (this.isDefault()) {\n      return qs;\n    }\n    var orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Reference = /** @class */function (_super) {\n  __extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n  function Reference(repo, path) {\n    var _this = this;\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    }\n    // call Query's constructor, passing in the repo and path.\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n  Reference.prototype.getKey = function () {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n  Reference.prototype.child = function (pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n  Reference.prototype.getParent = function () {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n  Reference.prototype.getRoot = function () {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  };\n  /** @return {!Database} */\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.set = function (newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new Deferred();\n    this.repo.setWithPriority(this.path, newVal, /*priority=*/null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    }\n    var deferred = new Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.remove = function (onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    }\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n    var deferred = new Deferred();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(function () {});\n    }\n    var promiseComplete = function promiseComplete(error, committed, snapshot) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n  Reference.prototype.push = function (value, onComplete) {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n    if (typeof onComplete === 'function') {\n      promise.catch(function () {});\n    }\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function get() {\n      return this.databaseProp();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function get() {\n      return this.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function get() {\n      return this.getParent();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function get() {\n      return this.getRoot();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Node in a Tree.\r\n */\nvar TreeNode = /** @class */function () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nvar Tree = /** @class */function () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n      next = path.getFront();\n    while (next !== null) {\n      var childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n  Tree.prototype.setValue = function (value) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n    each(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action, /*includeSelf=*/true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n  return Tree;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n/**\r\n * @enum {number}\r\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\n  // Temporary state used to mark transactions that need to be aborted.\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.transactionsInit_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path);\n  // Add a watch to make sure we get server updates.\n  var valueCallback = function valueCallback() {};\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  var unwatcher = function unwatcher() {\n    watchRef.off('value', valueCallback);\n  };\n  // Initialize transaction.\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    var priorityForNode = void 0;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  }\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    });\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this;\n  // Mark transactions as sent and increment retry count!\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path;\n  // Send the put.\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n    var events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\n      // There may be pending transactions that we can now send.\n      _this.sendReadyTransactions_();\n      _this.eventQueue_.raiseEventsForChangedPath(path, events);\n      // Finally, trigger onComplete callbacks.\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n          } else {\n            queue[i].status = TransactionStatus.RUN;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  var callbacks = [];\n  var events = [];\n  // Ignore all of the sets we're going to re-run.\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n      abortReason = void 0;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front;\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  var transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n  var nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n  var queue = node.getValue();\n  if (queue) {\n    var to = 0;\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    var events = [];\n    var lastSent = -1;\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nvar FirebaseAuthTokenProvider = /** @class */function () {\n  function FirebaseAuthTokenProvider(app_, authProvider_) {\n    var _this = this;\n    this.app_ = app_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.get().then(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n  FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n  FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(function () {\n        return listener(null);\n      }, 0);\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n  FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n  FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  };\n  return FirebaseAuthTokenProvider;\n}();\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nvar EmulatorAdminTokenProvider = /** @class */function () {\n  function EmulatorAdminTokenProvider() {}\n  EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  };\n  EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  };\n  EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) {};\n  EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () {};\n  EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';\n  return EmulatorAdminTokenProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\nvar RepoManager = /** @class */function () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n    this.useRestClient_ = false;\n  }\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  };\n  // TODO(koss): Remove these functions unless used in tests?\n  RepoManager.prototype.interrupt = function () {\n    var e_1, _a, e_2, _b;\n    try {\n      for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n        try {\n          for (var _e = (e_2 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].interrupt();\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  RepoManager.prototype.resume = function () {\n    var e_3, _a, e_4, _b;\n    try {\n      for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n        try {\n          for (var _e = (e_4 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].resume();\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\r\n   * Update an existing repo in place to point to a new host/port.\r\n   */\n  RepoManager.prototype.applyEmulatorSettings = function (repo, host, port) {\n    repo.repoInfo_ = new RepoInfo(host + \":\" + port, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n    if (repo.repoInfo_.nodeAdmin) {\n      repo.authTokenProvider_ = new EmulatorAdminTokenProvider();\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n  RepoManager.prototype.databaseFromApp = function (app, authProvider, url, nodeAdmin) {\n    var dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n      }\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = app.options.projectId + \"-default-rtdb.firebaseio.com\";\n    }\n    var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    var repoInfo = parsedUrl.repoInfo;\n    var isEmulator;\n    var dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorAdminTokenProvider() : new FirebaseAuthTokenProvider(app, authProvider);\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n    var repo = this.createRepo(repoInfo, app, authTokenProvider);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.key) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n    repo.interrupt();\n    delete appRepos[repo.key];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n  RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {\n    var appRepos = safeGet(this.repos_, app.name);\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n    var repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n  return RepoManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\nvar Database = /** @class */function () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repoInternal_\r\n   */\n  function Database(repoInternal_) {\n    var _this = this;\n    this.repoInternal_ = repoInternal_;\n    /** Track if the instance has been used (root or repo accessed) */\n    this.instanceStarted_ = false;\n    this.INTERNAL = {\n      delete: function _delete() {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.checkDeleted_('delete');\n            RepoManager.getInstance().deleteRepo(this.repo_);\n            this.repoInternal_ = null;\n            this.rootInternal_ = null;\n            return [2 /*return*/];\n          });\n        });\n      }\n    };\n\n    if (!(repoInternal_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n  }\n  Object.defineProperty(Database.prototype, \"repo_\", {\n    get: function get() {\n      if (!this.instanceStarted_) {\n        this.repoInternal_.start();\n        this.instanceStarted_ = true;\n      }\n      return this.repoInternal_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"root_\", {\n    get: function get() {\n      if (!this.rootInternal_) {\n        this.rootInternal_ = new Reference(this.repo_, Path.Empty);\n      }\n      return this.rootInternal_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function get() {\n      return this.repo_.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host the emulator host (ex: localhost)\r\n   * @param port the emulator port (ex: 8080)\r\n   */\n  Database.prototype.useEmulator = function (host, port) {\n    this.checkDeleted_('useEmulator');\n    if (this.instanceStarted_) {\n      fatal('Cannot call useEmulator() after instance has already been initialized.');\n      return;\n    }\n    // Modify the repo to apply emulator settings\n    RepoManager.getInstance().applyEmulatorSettings(this.repoInternal_, host, port);\n  };\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n    if (!this.repo_.repoInfo_.isCustomHost() && repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repoInternal_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  };\n  // Make individual repo go offline.\n  Database.prototype.goOffline = function () {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n  Database.prototype.goOnline = function () {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: function increment(delta) {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n  return Database;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\nvar forceLongPolling = function forceLongPolling() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\nvar forceWebSockets = function forceWebSockets() {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\nvar isWebSocketsAvailable = function isWebSocketsAvailable() {\n  return WebSocketConnection['isAvailable']();\n};\nvar setSecurityDebugCallback = function setSecurityDebugCallback(ref, callback) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\nvar stats = function stats(ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\nvar statsIncrementCounter = function statsIncrementCounter(ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\nvar dataUpdateCount = function dataUpdateCount(ref) {\n  return ref.repo.dataUpdateCount;\n};\nvar interceptServerData = function interceptServerData(ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app A valid FirebaseApp-like object\r\n * @param url A valid Firebase databaseURL\r\n * @param version custom version e.g. firebase-admin version\r\n * @param customAuthImpl custom auth implementation\r\n */\nfunction initStandalone(_a) {\n  var app = _a.app,\n    url = _a.url,\n    version = _a.version,\n    customAuthImpl = _a.customAuthImpl,\n    namespace = _a.namespace,\n    _b = _a.nodeAdmin,\n    nodeAdmin = _b === void 0 ? false : _b;\n  setSDKVersion(version);\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  var authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\n  authProvider.setComponent(new Component('auth-internal', function () {\n    return customAuthImpl;\n  }, \"PRIVATE\" /* PRIVATE */));\n  return {\n    instance: RepoManager.getInstance().databaseFromApp(app, authProvider, url, nodeAdmin),\n    namespace: namespace\n  };\n}\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\nvar hijackHash = function hijackHash(newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\nvar queryIdentifier = function queryIdentifier(query) {\n  return query.queryIdentifier();\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\nvar forceRestClient = function forceRestClient(_forceRestClient) {\n  RepoManager.getInstance().forceRestClient(_forceRestClient);\n};\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\nvar name = \"@firebase/database\";\nvar version = \"0.9.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ServerValue = Database.ServerValue;\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n  // Register the Database Service with the 'firebase' namespace.\n  var namespace = instance.INTERNAL.registerComponent(new Component('database', function (container, url) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps(\n  // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\nregisterDatabase(firebase);\nexport { DataSnapshot, Database, OnDisconnect, Query, Reference, ServerValue, enableLogging, registerDatabase };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;EAOE,2BAAoBA,WAAoB;IAApB,gBAAW,GAAXA,WAAW;;IALvB,YAAO,GAAG,WAAW;;;;;;EAW7BC,+BAAG,GAAH,UAAIC,GAAW,EAAEC,KAAqB;IACpC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,IAAI,CAACH,WAAW,CAACI,UAAU,CAAC,IAAI,CAACC,aAAa,CAACH,GAAG,CAAC,CAAC;KACrD,MAAM;MACL,IAAI,CAACF,WAAW,CAACM,OAAO,CAAC,IAAI,CAACD,aAAa,CAACH,GAAG,CAAC,EAAEK,SAAS,CAACJ,KAAK,CAAC,CAAC;;GAEtE;;;;;EAMDF,+BAAG,GAAH,UAAIC,GAAW;IACb,IAAMM,SAAS,GAAG,IAAI,CAACR,WAAW,CAACS,OAAO,CAAC,IAAI,CAACJ,aAAa,CAACH,GAAG,CAAC,CAAC;IACnE,IAAIM,SAAS,IAAI,IAAI,EAAE;MACrB,OAAO,IAAI;KACZ,MAAM;MACL,OAAOE,QAAQ,CAACF,SAAS,CAAC;;GAE7B;;;;EAKDP,kCAAM,GAAN,UAAOC,GAAW;IAChB,IAAI,CAACF,WAAW,CAACI,UAAU,CAAC,IAAI,CAACC,aAAa,CAACH,GAAG,CAAC,CAAC;GACrD;;;;;EAQDD,yCAAa,GAAb,UAAcU,IAAY;IACxB,OAAO,IAAI,CAACC,OAAO,GAAGD,IAAI;GAC3B;EAEDV,oCAAQ,GAAR;IACE,OAAO,IAAI,CAACD,WAAW,CAACa,QAAQ,EAAE;GACnC;EACH,wBAAC;AAAD,CAAC;;ACnFD;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;EAAA;IACU,WAAM,GAA6B,EAAE;IAqB7C,sBAAiB,GAAG,IAAI;;EAnBxBC,2BAAG,GAAH,UAAIZ,GAAW,EAAEC,KAAqB;IACpC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,IAAI,CAACY,MAAM,CAACb,GAAG,CAAC;KACxB,MAAM;MACL,IAAI,CAACa,MAAM,CAACb,GAAG,CAAC,GAAGC,KAAK;;GAE3B;EAEDW,2BAAG,GAAH,UAAIZ,GAAW;IACb,IAAIc,QAAQ,CAAC,IAAI,CAACD,MAAM,EAAEb,GAAG,CAAC,EAAE;MAC9B,OAAO,IAAI,CAACa,MAAM,CAACb,GAAG,CAAC;;IAEzB,OAAO,IAAI;GACZ;EAEDY,8BAAM,GAAN,UAAOZ,GAAW;IAChB,OAAO,IAAI,CAACa,MAAM,CAACb,GAAG,CAAC;GACxB;EAGH,oBAAC;AAAD,CAAC;;AChDD;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBC,cAAsB;EAEtB,IAAI;;;IAGF,IACE,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACD,cAAc,CAAC,KAAK,WAAW,EAC7C;;MAEA,IAAME,UAAU,GAAGD,MAAM,CAACD,cAAc,CAAC;MACzCE,UAAU,CAACd,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC;MAChDc,UAAU,CAAChB,UAAU,CAAC,mBAAmB,CAAC;MAC1C,OAAO,IAAIH,iBAAiB,CAACmB,UAAU,CAAC;;GAE3C,CAAC,OAAOC,CAAC,EAAE;;;EAIZ,OAAO,IAAIP,aAAa,EAAE;AAC5B,CAAC;AAED;AACO,IAAMQ,iBAAiB,GAAGL,gBAAgB,CAAC,cAAc,CAAC;AAEjE;AACO,IAAMM,cAAc,GAAGN,gBAAgB,CAAC,gBAAgB,CAAC;;AC1DhE;;;;;;;;;;;;;;;;AAiCA,IAAMO,SAAS,GAAG,IAAIC,MAAM,CAAC,oBAAoB,CAAC;AAElD;;;;AAIO,IAAMC,aAAa,GAAkB;EAC1C,IAAIC,EAAE,GAAG,CAAC;EACV,OAAO;IACL,OAAOA,EAAE,EAAE;GACZ;AACH,CAAC,EAAG;AAEJ;;;;;AAKO,IAAMC,IAAI,GAAG,cAAUC,GAAW;EACvC,IAAMC,SAAS,GAAGC,iBAAiB,CAACF,GAAG,CAAC;EACxC,IAAMD,IAAI,GAAG,IAAII,IAAI,EAAE;EACvBJ,IAAI,CAACK,MAAM,CAACH,SAAS,CAAC;EACtB,IAAMI,SAAS,GAAGN,IAAI,CAACO,MAAM,EAAE;EAC/B,OAAOC,MAAM,CAACC,eAAe,CAACH,SAAS,CAAC;AAC1C,CAAC;AAED;;;;;AAKA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAG;EAAU;OAAA,UAAqB,EAArBC,qBAAqB,EAArBA,IAAqB;IAArBC;;EACjC,IAAIC,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAME,GAAG,GAAGJ,OAAO,CAACE,CAAC,CAAC;IACtB,IACEG,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IACjBA,GAAG,IACF,OAAOA,GAAG,KAAK,QAAQ;;IAEvB,OAAQA,GAAW,CAACD,MAAM,KAAK,QAAS,EAC1C;MACAF,OAAO,IAAIH,gBAAgB,CAACS,KAAK,CAAC,IAAI,EAAEH,GAAG,CAAC;KAC7C,MAAM,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAClCH,OAAO,IAAIlC,SAAS,CAACqC,GAAG,CAAC;KAC1B,MAAM;MACLH,OAAO,IAAIG,GAAG;;IAEhBH,OAAO,IAAI,GAAG;;EAGhB,OAAOA,OAAO;AAChB,CAAC;AAED;;;;AAIO,IAAIO,MAAM,GAAiC,IAAI;AAEtD;;;;;AAKA,IAAIC,SAAS,GAAG,IAAI;AAEpB;;;;;IAKaC,aAAa,GAAG,SAAhBA,aAAa,CACxBC,OAAgD,EAChDC,UAAoB;EAEpBC,MAAM,CACJ,CAACD,UAAU,IAAID,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,EACpD,4CAA4C,CAC7C;EACD,IAAIA,OAAO,KAAK,IAAI,EAAE;IACpB3B,SAAS,CAAC8B,QAAQ,GAAGC,QAAQ,CAACC,OAAO;IACrCR,MAAM,GAAGxB,SAAS,CAACiC,GAAG,CAACC,IAAI,CAAClC,SAAS,CAAC;IACtC,IAAI4B,UAAU,EAAE;MACd7B,cAAc,CAACoC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC;;GAE9C,MAAM,IAAI,OAAOR,OAAO,KAAK,UAAU,EAAE;IACxCH,MAAM,GAAGG,OAAO;GACjB,MAAM;IACLH,MAAM,GAAG,IAAI;IACbzB,cAAc,CAACqC,MAAM,CAAC,iBAAiB,CAAC;;AAE5C;AAEA;;;;AAIO,IAAMH,GAAG,GAAG,SAANA,GAAG,GAAG;EAAU;OAAA,UAAqB,EAArBlB,qBAAqB,EAArBA,IAAqB;IAArBC;;EAC3B,IAAIS,SAAS,KAAK,IAAI,EAAE;IACtBA,SAAS,GAAG,KAAK;IACjB,IAAID,MAAM,KAAK,IAAI,IAAIzB,cAAc,CAACsC,GAAG,CAAC,iBAAiB,CAAC,KAAK,IAAI,EAAE;MACrEX,aAAa,CAAC,IAAI,CAAC;;;EAIvB,IAAIF,MAAM,EAAE;IACV,IAAMP,OAAO,GAAGH,gBAAgB,CAACS,KAAK,CAAC,IAAI,EAAEP,OAAO,CAAC;IACrDQ,MAAM,CAACP,OAAO,CAAC;;AAEnB,CAAC;AAED;;;;AAIO,IAAMqB,UAAU,GAAG,SAAbA,UAAU,CACrBC,MAAc;EAEd,OAAO;IAAU;SAAA,UAAqB,EAArBxB,qBAAqB,EAArBA,IAAqB;MAArBC;;IACfiB,GAAG,yBAACM,MAAM,GAAKvB,OAAO;GACvB;AACH,CAAC;AAED;;;AAGO,IAAMwB,KAAK,GAAG,SAARA,KAAK,GAAG;EAAU;OAAA,UAAoB,EAApBzB,qBAAoB,EAApBA,IAAoB;IAApBC;;EAC7B,IAAMC,OAAO,GAAG,2BAA2B,GAAGH,gBAAgB,wBAAIE,OAAO,EAAC;EAC1EhB,SAAS,CAACwC,KAAK,CAACvB,OAAO,CAAC;AAC1B,CAAC;AAED;;;AAGO,IAAMwB,KAAK,GAAG,SAARA,KAAK,GAAG;EAAU;OAAA,UAAoB,EAApB1B,qBAAoB,EAApBA,IAAoB;IAApBC;;EAC7B,IAAMC,OAAO,GAAG,2BAAyBH,gBAAgB,wBAAIE,OAAO,EAAG;EACvEhB,SAAS,CAACwC,KAAK,CAACvB,OAAO,CAAC;EACxB,MAAM,IAAIyB,KAAK,CAACzB,OAAO,CAAC;AAC1B,CAAC;AAED;;;AAGO,IAAM0B,IAAI,GAAG,SAAPA,IAAI,GAAG;EAAU;OAAA,UAAqB,EAArB5B,qBAAqB,EAArBA,IAAqB;IAArBC;;EAC5B,IAAMC,OAAO,GAAG,oBAAoB,GAAGH,gBAAgB,wBAAIE,OAAO,EAAC;EACnEhB,SAAS,CAAC2C,IAAI,CAAC1B,OAAO,CAAC;AACzB,CAAC;AAED;;;;AAIO,IAAM2B,kBAAkB,GAAG,SAArBA,kBAAkB,GAAG;;EAEhC,IACE,OAAOjD,MAAM,KAAK,WAAW,IAC7BA,MAAM,CAACkD,QAAQ,IACflD,MAAM,CAACkD,QAAQ,CAACC,QAAQ,IACxBnD,MAAM,CAACkD,QAAQ,CAACC,QAAQ,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EACjD;IACAJ,IAAI,CACF,+CAA+C,GAC7C,8CAA8C,CACjD;;AAEL,CAAC;AAaD;;;;;AAKO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAaC,IAAa;EACxD,OACE,OAAOA,IAAI,KAAK,QAAQ,KACvBA,IAAI,KAAKA,IAAI;EAAA;EACZA,IAAI,KAAKC,MAAM,CAACC,iBAAiB,IACjCF,IAAI,KAAKC,MAAM,CAACE,iBAAiB,CAAC;AAExC,CAAC;AAED;;;AAGO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAaC,EAAc;EACzD,IAAIC,SAAS,EAAE,IAAIC,QAAQ,CAACC,UAAU,KAAK,UAAU,EAAE;IACrDH,EAAE,EAAE;GACL,MAAM;;;IAIL,IAAII,QAAM,GAAG,KAAK;IAClB,IAAMC,WAAS,GAAG,SAAZA,WAAS,GAAG;MAChB,IAAI,CAACH,QAAQ,CAACI,IAAI,EAAE;QAClBC,UAAU,CAACF,WAAS,EAAEG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,CAAC;QACrC;;MAGF,IAAI,CAACL,QAAM,EAAE;QACXA,QAAM,GAAG,IAAI;QACbJ,EAAE,EAAE;;KAEP;IAED,IAAIE,QAAQ,CAACQ,gBAAgB,EAAE;MAC7BR,QAAQ,CAACQ,gBAAgB,CAAC,kBAAkB,EAAEL,WAAS,EAAE,KAAK,CAAC;;MAE/DhE,MAAM,CAACqE,gBAAgB,CAAC,MAAM,EAAEL,WAAS,EAAE,KAAK,CAAC;;KAElD,MAAM,IAAKH,QAAgB,CAACS,WAAW,EAAE;;;MAGvCT,QAAgB,CAACS,WAAW,CAAC,oBAAoB,EAAE;QAClD,IAAIT,QAAQ,CAACC,UAAU,KAAK,UAAU,EAAE;UACtCE,WAAS,EAAE;;OAEd,CAAC;;;MAGDhE,MAAc,CAACsE,WAAW,CAAC,QAAQ,EAAEN,WAAS,CAAC;;;;;;AAOtD,CAAC;AAED;;;;AAIO,IAAMO,QAAQ,GAAG,YAAY;AAEpC;;;;AAIO,IAAMC,QAAQ,GAAG,YAAY;AAEpC;;;;;;AAMO,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAaC,CAAS,EAAEC,CAAS;EACvD,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,CAAC;GACT,MAAM,IAAID,CAAC,KAAKH,QAAQ,IAAII,CAAC,KAAKH,QAAQ,EAAE;IAC3C,OAAO,CAAC,CAAC;GACV,MAAM,IAAIG,CAAC,KAAKJ,QAAQ,IAAIG,CAAC,KAAKF,QAAQ,EAAE;IAC3C,OAAO,CAAC;GACT,MAAM;IACL,IAAMI,MAAM,GAAGC,WAAW,CAACH,CAAC,CAAC;MAC3BI,MAAM,GAAGD,WAAW,CAACF,CAAC,CAAC;IAEzB,IAAIC,MAAM,KAAK,IAAI,EAAE;MACnB,IAAIE,MAAM,KAAK,IAAI,EAAE;QACnB,OAAOF,MAAM,GAAGE,MAAM,KAAK,CAAC,GAAGJ,CAAC,CAAClD,MAAM,GAAGmD,CAAC,CAACnD,MAAM,GAAGoD,MAAM,GAAGE,MAAM;OACrE,MAAM;QACL,OAAO,CAAC,CAAC;;KAEZ,MAAM,IAAIA,MAAM,KAAK,IAAI,EAAE;MAC1B,OAAO,CAAC;KACT,MAAM;MACL,OAAOJ,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;;;AAG3B,CAAC;AAED;;;;;AAKO,IAAMI,aAAa,GAAG,SAAhBA,aAAa,CAAaL,CAAS,EAAEC,CAAS;EACzD,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,CAAC;GACT,MAAM,IAAID,CAAC,GAAGC,CAAC,EAAE;IAChB,OAAO,CAAC,CAAC;GACV,MAAM;IACL,OAAO,CAAC;;AAEZ,CAAC;AAED;;;;;AAKO,IAAMK,UAAU,GAAG,SAAbA,UAAU,CACrBjG,GAAW,EACXkG,GAA6B;EAE7B,IAAIA,GAAG,IAAIlG,GAAG,IAAIkG,GAAG,EAAE;IACrB,OAAOA,GAAG,CAAClG,GAAG,CAAC;GAChB,MAAM;IACL,MAAM,IAAIgE,KAAK,CACb,wBAAwB,GAAGhE,GAAG,GAAG,eAAe,GAAGK,SAAS,CAAC6F,GAAG,CAAC,CAClE;;AAEL,CAAC;AAED;;;;AAIO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAaD,GAAY;EACrD,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;IAC3C,OAAO7F,SAAS,CAAC6F,GAAG,CAAC;;EAGvB,IAAME,IAAI,GAAG,EAAE;;EAEf,KAAK,IAAMC,CAAC,IAAIH,GAAG,EAAE;IACnBE,IAAI,CAACE,IAAI,CAACD,CAAC,CAAC;;;EAIdD,IAAI,CAACG,IAAI,EAAE;EACX,IAAIvG,GAAG,GAAG,GAAG;EACb,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4D,IAAI,CAAC3D,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXxC,GAAG,IAAI,GAAG;;IAEZA,GAAG,IAAIK,SAAS,CAAC+F,IAAI,CAAC5D,CAAC,CAAC,CAAC;IACzBxC,GAAG,IAAI,GAAG;IACVA,GAAG,IAAImG,iBAAiB,CAACD,GAAG,CAACE,IAAI,CAAC5D,CAAC,CAAC,CAAC,CAAC;;EAGxCxC,GAAG,IAAI,GAAG;EACV,OAAOA,GAAG;AACZ,CAAC;AAED;;;;;;AAMO,IAAMwG,iBAAiB,GAAG,SAApBA,iBAAiB,CAC5B7E,GAAW,EACX8E,OAAe;EAEf,IAAMC,GAAG,GAAG/E,GAAG,CAACc,MAAM;EAEtB,IAAIiE,GAAG,IAAID,OAAO,EAAE;IAClB,OAAO,CAAC9E,GAAG,CAAC;;EAGd,IAAMgF,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,IAAIH,OAAO,EAAE;IACrC,IAAIG,CAAC,GAAGH,OAAO,GAAGC,GAAG,EAAE;MACrBC,QAAQ,CAACL,IAAI,CAAC3E,GAAG,CAACkF,SAAS,CAACD,CAAC,EAAEF,GAAG,CAAC,CAAC;KACrC,MAAM;MACLC,QAAQ,CAACL,IAAI,CAAC3E,GAAG,CAACkF,SAAS,CAACD,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAAC,CAAC;;;EAGhD,OAAOE,QAAQ;AACjB,CAAC;AAED;;;;;;SAMgBG,IAAI,CAACZ,GAAW,EAAEtB,EAAmC;EACnE,KAAK,IAAM5E,GAAG,IAAIkG,GAAG,EAAE;IACrB,IAAIA,GAAG,CAACa,cAAc,CAAC/G,GAAG,CAAC,EAAE;MAC3B4E,EAAE,CAAC5E,GAAG,EAAEkG,GAAG,CAAClG,GAAG,CAAC,CAAC;;;AAGvB;AAeA;;;;;;;AAOO,IAAMgH,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAaC,CAAS;EACtD9D,MAAM,CAAC,CAACmB,mBAAmB,CAAC2C,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC;EAEvD,IAAMC,KAAK,GAAG,EAAE;IACdC,KAAK,GAAG,EAAE;EACZ,IAAMC,IAAI,GAAG,CAAC,CAAC,IAAKF,KAAK,GAAG,CAAE,IAAI,CAAC;EACnC,IAAIG,CAAC,EAAElG,CAAC,EAAEmG,CAAC,EAAEC,EAAE,EAAE/E,CAAC;;;EAIlB,IAAIyE,CAAC,KAAK,CAAC,EAAE;IACX9F,CAAC,GAAG,CAAC;IACLmG,CAAC,GAAG,CAAC;IACLD,CAAC,GAAG,CAAC,GAAGJ,CAAC,KAAK,CAACO,QAAQ,GAAG,CAAC,GAAG,CAAC;GAChC,MAAM;IACLH,CAAC,GAAGJ,CAAC,GAAG,CAAC;IACTA,CAAC,GAAG7B,IAAI,CAACqC,GAAG,CAACR,CAAC,CAAC;IAEf,IAAIA,CAAC,IAAI7B,IAAI,CAACsC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGN,IAAI,CAAC,EAAE;;MAE9BG,EAAE,GAAGnC,IAAI,CAACuC,GAAG,CAACvC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC7B,GAAG,CAAC0D,CAAC,CAAC,GAAG7B,IAAI,CAACwC,GAAG,CAAC,EAAER,IAAI,CAAC;MACvDjG,CAAC,GAAGoG,EAAE,GAAGH,IAAI;MACbE,CAAC,GAAGlC,IAAI,CAACyC,KAAK,CAACZ,CAAC,GAAG7B,IAAI,CAACsC,GAAG,CAAC,CAAC,EAAEP,KAAK,GAAGI,EAAE,CAAC,GAAGnC,IAAI,CAACsC,GAAG,CAAC,CAAC,EAAEP,KAAK,CAAC,CAAC;KACjE,MAAM;;MAELhG,CAAC,GAAG,CAAC;MACLmG,CAAC,GAAGlC,IAAI,CAACyC,KAAK,CAACZ,CAAC,GAAG7B,IAAI,CAACsC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGN,IAAI,GAAGD,KAAK,CAAC,CAAC;;;;EAKrD,IAAMW,IAAI,GAAG,EAAE;EACf,KAAKtF,CAAC,GAAG2E,KAAK,EAAE3E,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IACzBsF,IAAI,CAACxB,IAAI,CAACgB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxBA,CAAC,GAAGlC,IAAI,CAACC,KAAK,CAACiC,CAAC,GAAG,CAAC,CAAC;;EAEvB,KAAK9E,CAAC,GAAG0E,KAAK,EAAE1E,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IACzBsF,IAAI,CAACxB,IAAI,CAACnF,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxBA,CAAC,GAAGiE,IAAI,CAACC,KAAK,CAAClE,CAAC,GAAG,CAAC,CAAC;;EAEvB2G,IAAI,CAACxB,IAAI,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACpBS,IAAI,CAACC,OAAO,EAAE;EACd,IAAMpG,GAAG,GAAGmG,IAAI,CAACE,IAAI,CAAC,EAAE,CAAC;;EAGzB,IAAIC,aAAa,GAAG,EAAE;EACtB,KAAKzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC1B,IAAI0F,OAAO,GAAGC,QAAQ,CAACxG,GAAG,CAACyG,MAAM,CAAC5F,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC7B,QAAQ,CAAC,EAAE,CAAC;IACxD,IAAIuH,OAAO,CAACzF,MAAM,KAAK,CAAC,EAAE;MACxByF,OAAO,GAAG,GAAG,GAAGA,OAAO;;IAEzBD,aAAa,GAAGA,aAAa,GAAGC,OAAO;;EAEzC,OAAOD,aAAa,CAACI,WAAW,EAAE;AACpC,CAAC;AAED;;;;;AAKO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAA8B,GAAG;EAC5C,OAAO,CAAC,EACN,OAAOrH,MAAM,KAAK,QAAQ,IAC1BA,MAAM,CAAC,QAAQ,CAAC,IAChBA,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,IAC7B,CAAC,SAAS,CAACsH,IAAI,CAACtH,MAAM,CAACkD,QAAQ,CAACqE,IAAI,CAAC,CACtC;AACH,CAAC;AAED;;;;AAIO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,GAAG;;EAE/B,OAAO,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,EAAE,KAAK,QAAQ;AACtE,CAAC;AAED;;;;;;AAMO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAaC,IAAY,EAAEC,KAAY;EACpE,IAAIC,MAAM,GAAG,eAAe;EAC5B,IAAIF,IAAI,KAAK,SAAS,EAAE;IACtBE,MAAM,GACJ,8CAA8C,GAC9C,6CAA6C;GAChD,MAAM,IAAIF,IAAI,KAAK,mBAAmB,EAAE;IACvCE,MAAM,GAAG,4DAA4D;GACtE,MAAM,IAAIF,IAAI,KAAK,aAAa,EAAE;IACjCE,MAAM,GAAG,4BAA4B;;EAGvC,IAAMjF,KAAK,GAAG,IAAIE,KAAK,CACrB6E,IAAI,GAAG,MAAM,GAAGC,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE,GAAG,IAAI,GAAGoI,MAAM,CACtD;;EAEAjF,KAAa,CAAC+E,IAAI,GAAGA,IAAI,CAACI,WAAW,EAAE;EACxC,OAAOnF,KAAK;AACd,CAAC;AAED;;;;;AAKO,IAAMoF,eAAe,GAAG,IAAIC,MAAM,CAAC,mBAAmB,CAAC;AAE9D;;;AAGO,IAAMC,cAAc,GAAG,CAAC,UAAU;AAEzC;;;AAGO,IAAMC,cAAc,GAAG,UAAU;AAExC;;;;;AAKO,IAAMvD,WAAW,GAAG,SAAdA,WAAW,CAAanE,GAAW;EAC9C,IAAIuH,eAAe,CAACX,IAAI,CAAC5G,GAAG,CAAC,EAAE;IAC7B,IAAM2H,MAAM,GAAG9E,MAAM,CAAC7C,GAAG,CAAC;IAC1B,IAAI2H,MAAM,IAAIF,cAAc,IAAIE,MAAM,IAAID,cAAc,EAAE;MACxD,OAAOC,MAAM;;;EAGjB,OAAO,IAAI;AACb,CAAC;AAED;;;;;;;;;;;;;;;;;AAiBO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAa3E,EAAc;EACpD,IAAI;IACFA,EAAE,EAAE;GACL,CAAC,OAAOzD,CAAC,EAAE;;IAEVgE,UAAU,CAAC;;;;;MAKT,IAAMqE,KAAK,GAAGrI,CAAC,CAACqI,KAAK,IAAI,EAAE;MAC3BvF,IAAI,CAAC,wCAAwC,EAAEuF,KAAK,CAAC;MACrD,MAAMrI,CAAC;KACR,EAAEiE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAErB,CAAC;AAsBD;;;AAGO,IAAMoE,YAAY,GAAG,SAAfA,YAAY,GAAG;EAC1B,IAAMC,SAAS,GACZ,OAAOzI,MAAM,KAAK,QAAQ,IACzBA,MAAM,CAAC,WAAW,CAAC,IACnBA,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,IAClC,EAAE;;;;;EAMJ,OACEyI,SAAS,CAACC,MAAM,CACd,0FAA0F,CAC3F,IAAI,CAAC;AAEV,CAAC;AAiBD;;;;;;;;;AASO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAChChF,EAAc,EACdiF,IAAY;EAEZ,IAAMC,OAAO,GAAoB3E,UAAU,CAACP,EAAE,EAAEiF,IAAI,CAAC;;EAErD,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAKA,OAAe,CAAC,OAAO,CAAC,EAAE;;IAE3DA,OAAe,CAAC,OAAO,CAAC,EAAE;;EAE7B,OAAOA,OAAO;AAChB,CAAC;;AChrBD;;;;;;;;;;;;;;;;AAmBA;;;;;AAMA;;;;;;EAkBE,cAAYC,YAA+B,EAAEC,QAAiB;IAC5D,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;MACvB,IAAI,CAACC,OAAO,GAAIF,YAAuB,CAACG,KAAK,CAAC,GAAG,CAAC;;MAGlD,IAAIC,MAAM,GAAG,CAAC;MACd,KAAK,IAAI3H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5C,IAAI,IAAI,CAACyH,OAAO,CAACzH,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAC9B,IAAI,CAACwH,OAAO,CAACE,MAAM,CAAC,GAAG,IAAI,CAACF,OAAO,CAACzH,CAAC,CAAC;UACtC2H,MAAM,EAAE;;;MAGZ,IAAI,CAACF,OAAO,CAACxH,MAAM,GAAG0H,MAAM;MAE5B,IAAI,CAACC,SAAS,GAAG,CAAC;KACnB,MAAM;MACL,IAAI,CAACH,OAAO,GAAGF,YAAwB;MACvC,IAAI,CAACK,SAAS,GAAGJ,QAAQ;;;EA1B7BK,sBAAWC,aAAK;;;;;;SAAhB;MACE,OAAO,IAAIA,IAAI,CAAC,EAAE,CAAC;KACpB;;;;EA4BDA,uBAAQ,GAAR;IACE,IAAI,IAAI,CAACF,SAAS,IAAI,IAAI,CAACH,OAAO,CAACxH,MAAM,EAAE;MACzC,OAAO,IAAI;;IAGb,OAAO,IAAI,CAACwH,OAAO,CAAC,IAAI,CAACG,SAAS,CAAC;GACpC;;;;EAKDE,wBAAS,GAAT;IACE,OAAO,IAAI,CAACL,OAAO,CAACxH,MAAM,GAAG,IAAI,CAAC2H,SAAS;GAC5C;;;;EAKDE,uBAAQ,GAAR;IACE,IAAIN,QAAQ,GAAG,IAAI,CAACI,SAAS;IAC7B,IAAIJ,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACxH,MAAM,EAAE;MAClCuH,QAAQ,EAAE;;IAEZ,OAAO,IAAIM,IAAI,CAAC,IAAI,CAACL,OAAO,EAAED,QAAQ,CAAC;GACxC;;;;EAKDM,sBAAO,GAAP;IACE,IAAI,IAAI,CAACF,SAAS,GAAG,IAAI,CAACH,OAAO,CAACxH,MAAM,EAAE;MACxC,OAAO,IAAI,CAACwH,OAAO,CAAC,IAAI,CAACA,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC;;IAG9C,OAAO,IAAI;GACZ;EAED6H,uBAAQ,GAAR;IACE,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAI/H,CAAC,GAAG,IAAI,CAAC4H,SAAS,EAAE5H,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,EAAED,CAAC,EAAE,EAAE;MACzD,IAAI,IAAI,CAACyH,OAAO,CAACzH,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1B+H,UAAU,IAAI,GAAG,GAAG,IAAI,CAACN,OAAO,CAACzH,CAAC,CAAC;;;IAIvC,OAAO+H,UAAU,IAAI,GAAG;GACzB;EAEDD,iCAAkB,GAAlB;IACE,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAI/H,CAAC,GAAG,IAAI,CAAC4H,SAAS,EAAE5H,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,EAAED,CAAC,EAAE,EAAE;MACzD,IAAI,IAAI,CAACyH,OAAO,CAACzH,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1B+H,UAAU,IAAI,GAAG,GAAGC,kBAAkB,CAACC,MAAM,CAAC,IAAI,CAACR,OAAO,CAACzH,CAAC,CAAC,CAAC,CAAC;;;IAInE,OAAO+H,UAAU,IAAI,GAAG;GACzB;;;;;;;EAQDD,oBAAK,GAAL,UAAMI,KAAiB;IAAjB;MAAAA,SAAiB;IAAA;IACrB,OAAO,IAAI,CAACT,OAAO,CAACU,KAAK,CAAC,IAAI,CAACP,SAAS,GAAGM,KAAK,CAAC;GAClD;;;;EAKDJ,qBAAM,GAAN;IACE,IAAI,IAAI,CAACF,SAAS,IAAI,IAAI,CAACH,OAAO,CAACxH,MAAM,EAAE;MACzC,OAAO,IAAI;;IAGb,IAAMmI,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIpI,CAAC,GAAG,IAAI,CAAC4H,SAAS,EAAE5H,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MAC7DoI,MAAM,CAACtE,IAAI,CAAC,IAAI,CAAC2D,OAAO,CAACzH,CAAC,CAAC,CAAC;;IAG9B,OAAO,IAAI8H,IAAI,CAACM,MAAM,EAAE,CAAC,CAAC;GAC3B;;;;;EAMDN,oBAAK,GAAL,UAAMO,YAA2B;IAC/B,IAAMD,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIpI,CAAC,GAAG,IAAI,CAAC4H,SAAS,EAAE5H,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,EAAED,CAAC,EAAE,EAAE;MACzDoI,MAAM,CAACtE,IAAI,CAAC,IAAI,CAAC2D,OAAO,CAACzH,CAAC,CAAC,CAAC;;IAG9B,IAAIqI,YAAY,YAAYP,IAAI,EAAE;MAChC,KACE,IAAI9H,CAAC,GAAGqI,YAAY,CAACT,SAAS,EAC9B5H,CAAC,GAAGqI,YAAY,CAACZ,OAAO,CAACxH,MAAM,EAC/BD,CAAC,EAAE,EACH;QACAoI,MAAM,CAACtE,IAAI,CAACuE,YAAY,CAACZ,OAAO,CAACzH,CAAC,CAAC,CAAC;;KAEvC,MAAM;MACL,IAAMsI,WAAW,GAAGD,YAAY,CAACX,KAAK,CAAC,GAAG,CAAC;MAC3C,KAAK,IAAI1H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsI,WAAW,CAACrI,MAAM,EAAED,CAAC,EAAE,EAAE;QAC3C,IAAIsI,WAAW,CAACtI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAC7BmI,MAAM,CAACtE,IAAI,CAACwE,WAAW,CAACtI,CAAC,CAAC,CAAC;;;;IAKjC,OAAO,IAAI8H,IAAI,CAACM,MAAM,EAAE,CAAC,CAAC;GAC3B;;;;EAKDN,sBAAO,GAAP;IACE,OAAO,IAAI,CAACF,SAAS,IAAI,IAAI,CAACH,OAAO,CAACxH,MAAM;GAC7C;;;;;;EAOM6H,iBAAY,GAAnB,UAAoBS,SAAe,EAAEC,SAAe;IAClD,IAAMC,KAAK,GAAGF,SAAS,CAACG,QAAQ,EAAE;MAChCC,KAAK,GAAGH,SAAS,CAACE,QAAQ,EAAE;IAC9B,IAAID,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOD,SAAS;KACjB,MAAM,IAAIC,KAAK,KAAKE,KAAK,EAAE;MAC1B,OAAOb,IAAI,CAACc,YAAY,CAACL,SAAS,CAACM,QAAQ,EAAE,EAAEL,SAAS,CAACK,QAAQ,EAAE,CAAC;KACrE,MAAM;MACL,MAAM,IAAIrH,KAAK,CACb,6BAA6B,GAC3BgH,SAAS,GACT,kBAAkB,GAClB,aAAa,GACbD,SAAS,GACT,GAAG,CACN;;GAEJ;;;;;;EAOMT,iBAAY,GAAnB,UAAoBgB,IAAU,EAAEC,KAAW;IACzC,IAAMC,QAAQ,GAAGF,IAAI,CAACX,KAAK,EAAE;IAC7B,IAAMc,SAAS,GAAGF,KAAK,CAACZ,KAAK,EAAE;IAC/B,KAAK,IAAInI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgJ,QAAQ,CAAC/I,MAAM,IAAID,CAAC,GAAGiJ,SAAS,CAAChJ,MAAM,EAAED,CAAC,EAAE,EAAE;MAChE,IAAMkJ,GAAG,GAAGhG,WAAW,CAAC8F,QAAQ,CAAChJ,CAAC,CAAC,EAAEiJ,SAAS,CAACjJ,CAAC,CAAC,CAAC;MAClD,IAAIkJ,GAAG,KAAK,CAAC,EAAE;QACb,OAAOA,GAAG;;;IAGd,IAAIF,QAAQ,CAAC/I,MAAM,KAAKgJ,SAAS,CAAChJ,MAAM,EAAE;MACxC,OAAO,CAAC;;IAEV,OAAO+I,QAAQ,CAAC/I,MAAM,GAAGgJ,SAAS,CAAChJ,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;GACnD;;;;;;EAOD6H,qBAAM,GAAN,UAAOqB,KAAW;IAChB,IAAI,IAAI,CAACC,SAAS,EAAE,KAAKD,KAAK,CAACC,SAAS,EAAE,EAAE;MAC1C,OAAO,KAAK;;IAGd,KACE,IAAIpJ,CAAC,GAAG,IAAI,CAAC4H,SAAS,EAAEyB,CAAC,GAAGF,KAAK,CAACvB,SAAS,EAC3C5H,CAAC,IAAI,IAAI,CAACyH,OAAO,CAACxH,MAAM,EACxBD,CAAC,EAAE,EAAEqJ,CAAC,EAAE,EACR;MACA,IAAI,IAAI,CAAC5B,OAAO,CAACzH,CAAC,CAAC,KAAKmJ,KAAK,CAAC1B,OAAO,CAAC4B,CAAC,CAAC,EAAE;QACxC,OAAO,KAAK;;;IAIhB,OAAO,IAAI;GACZ;;;;;;EAODvB,uBAAQ,GAAR,UAASqB,KAAW;IAClB,IAAInJ,CAAC,GAAG,IAAI,CAAC4H,SAAS;IACtB,IAAIyB,CAAC,GAAGF,KAAK,CAACvB,SAAS;IACvB,IAAI,IAAI,CAACwB,SAAS,EAAE,GAAGD,KAAK,CAACC,SAAS,EAAE,EAAE;MACxC,OAAO,KAAK;;IAEd,OAAOpJ,CAAC,GAAG,IAAI,CAACyH,OAAO,CAACxH,MAAM,EAAE;MAC9B,IAAI,IAAI,CAACwH,OAAO,CAACzH,CAAC,CAAC,KAAKmJ,KAAK,CAAC1B,OAAO,CAAC4B,CAAC,CAAC,EAAE;QACxC,OAAO,KAAK;;MAEd,EAAErJ,CAAC;MACH,EAAEqJ,CAAC;;IAEL,OAAO,IAAI;GACZ;EACH,WAAC;AAAD,CAxPA,GAwPC;AAED;;;;;;;;;;AAUA;;;;;EAUE,wBAAY7C,IAAU,EAAU8C,YAAoB;IAApB,iBAAY,GAAZA,YAAY;;IAE1C,IAAI,CAACC,MAAM,GAAG/C,IAAI,CAAC2B,KAAK,EAAE;;IAE1B,IAAI,CAACqB,WAAW,GAAG5G,IAAI,CAAC6G,GAAG,CAAC,CAAC,EAAE,IAAI,CAACF,MAAM,CAACtJ,MAAM,CAAC;IAElD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACuJ,MAAM,CAACtJ,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,IAAI,CAACwJ,WAAW,IAAIE,YAAY,CAAC,IAAI,CAACH,MAAM,CAACvJ,CAAC,CAAC,CAAC;;IAElD,IAAI,CAAC2J,WAAW,EAAE;;EAIpB9B,sBAAW+B,gCAAc;;SAAzB;MACE,OAAO,EAAE;KACV;;;;EAGD/B,sBAAW+B,uCAAqB;;SAAhC;MACE,OAAO,GAAG;KACX;;;;;EAGDA,6BAAI,GAAJ,UAAKC,KAAa;;IAEhB,IAAI,IAAI,CAACN,MAAM,CAACtJ,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACuJ,WAAW,IAAI,CAAC;;IAEvB,IAAI,CAACD,MAAM,CAACzF,IAAI,CAAC+F,KAAK,CAAC;IACvB,IAAI,CAACL,WAAW,IAAIE,YAAY,CAACG,KAAK,CAAC;IACvC,IAAI,CAACF,WAAW,EAAE;GACnB;EAEDC,4BAAG,GAAH;IACE,IAAME,IAAI,GAAG,IAAI,CAACP,MAAM,CAACQ,GAAG,EAAE;IAC9B,IAAI,CAACP,WAAW,IAAIE,YAAY,CAACI,IAAI,CAAC;;IAEtC,IAAI,IAAI,CAACP,MAAM,CAACtJ,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACuJ,WAAW,IAAI,CAAC;;GAExB;EAEOI,oCAAW,GAAnB;IACE,IAAI,IAAI,CAACJ,WAAW,GAAGI,cAAc,CAACI,qBAAqB,EAAE;MAC3D,MAAM,IAAIxI,KAAK,CACb,IAAI,CAAC8H,YAAY,GACf,6BAA6B,GAC7BM,cAAc,CAACI,qBAAqB,GACpC,UAAU,GACV,IAAI,CAACR,WAAW,GAChB,IAAI,CACP;;IAEH,IAAI,IAAI,CAACD,MAAM,CAACtJ,MAAM,GAAG2J,cAAc,CAACK,cAAc,EAAE;MACtD,MAAM,IAAIzI,KAAK,CACb,IAAI,CAAC8H,YAAY,GACf,gEAAgE,GAChEM,cAAc,CAACK,cAAc,GAC7B,+BAA+B,GAC/B,IAAI,CAACC,aAAa,EAAE,CACvB;;GAEJ;;;;;;EAODN,sCAAa,GAAb;IACE,IAAI,IAAI,CAACL,MAAM,CAACtJ,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,EAAE;;IAEX,OAAO,eAAe,GAAG,IAAI,CAACsJ,MAAM,CAAC/D,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;GACrD;EACH,qBAAC;AAAD,CAAC;;AClXD;;;;;;;;;;;;;;;;AAiBO,IAAM2E,gBAAgB,GAAG,GAAG;AAE5B,IAAMC,aAAa,GAAG,GAAG;AAEzB,IAAMC,uBAAuB,GAAG,GAAG;AAEnC,IAAMC,aAAa,GAAG,GAAG;AAEzB,IAAMC,SAAS,GAAG,GAAG;AAE5B;AACA;AACO,IAAMC,eAAe,GAAG,4EAA4E;AAEpG,IAAMC,kBAAkB,GAAG,IAAI;AAE/B,IAAMC,oBAAoB,GAAG,GAAG;AAEhC,IAAMC,SAAS,GAAG,WAAW;AAE7B,IAAMC,YAAY,GAAG,cAAc;;ACrC1C;;;;;;;;;;;;;;;;AAsBA;;;;;AAKA;;;;;;;;;EAaE,kBACEC,IAAY,EACIC,MAAe,EACfC,SAAiB,EACjBC,aAAsB,EACtBC,SAA0B,EAC1BC,cAA2B,EAC3BC,6BAA8C;IAF9C;MAAAF,iBAA0B;IAAA;IAC1B;MAAAC,mBAA2B;IAAA;IAC3B;MAAAC,qCAA8C;IAAA;IAL9C,WAAM,GAANL,MAAM;IACN,cAAS,GAATC,SAAS;IACT,kBAAa,GAAbC,aAAa;IACb,cAAS,GAATC,SAAS;IACT,mBAAc,GAAdC,cAAc;IACd,kCAA6B,GAA7BC,6BAA6B;IAE7C,IAAI,CAACN,IAAI,GAAGA,IAAI,CAAChF,WAAW,EAAE;IAC9B,IAAI,CAACuF,MAAM,GAAG,IAAI,CAACP,IAAI,CAACjF,MAAM,CAAC,IAAI,CAACiF,IAAI,CAAChJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1D,IAAI,CAACwJ,YAAY,GACdzM,iBAAiB,CAACuC,GAAG,CAAC,OAAO,GAAG0J,IAAI,CAAY,IAAI,IAAI,CAACA,IAAI;;EAGlES,kCAAe,GAAf;IACE,OACE,IAAI,CAACT,IAAI,KAAK,IAAI,CAACQ,YAAY,IAC/B,IAAI,CAACE,YAAY,EAAE,IACnB,IAAI,CAACJ,6BAA6B;GAErC;EAEDG,kCAAe,GAAf;IACE,OAAO,IAAI,CAACD,YAAY,CAACzF,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI;GAC/C;EAED0F,6BAAU,GAAV;IACE,OAAO,IAAI,CAACF,MAAM,KAAK,qBAAqB;GAC7C;EAEDE,+BAAY,GAAZ;IACE,OACE,IAAI,CAACF,MAAM,KAAK,gBAAgB,IAAI,IAAI,CAACA,MAAM,KAAK,qBAAqB;GAE5E;EAEDE,6BAAU,GAAV,UAAWE,OAAe;IACxB,IAAIA,OAAO,KAAK,IAAI,CAACH,YAAY,EAAE;MACjC,IAAI,CAACA,YAAY,GAAGG,OAAO;MAC3B,IAAI,IAAI,CAACC,eAAe,EAAE,EAAE;QAC1B7M,iBAAiB,CAACqC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC4J,IAAI,EAAE,IAAI,CAACQ,YAAY,CAAC;;;GAGlE;;;;;;;EAQDC,gCAAa,GAAb,UAAcI,IAAY,EAAEC,MAA+B;IACzDhL,MAAM,CAAC,OAAO+K,IAAI,KAAK,QAAQ,EAAE,4BAA4B,CAAC;IAC9D/K,MAAM,CAAC,OAAOgL,MAAM,KAAK,QAAQ,EAAE,8BAA8B,CAAC;IAElE,IAAIC,OAAe;IACnB,IAAIF,IAAI,KAAKf,SAAS,EAAE;MACtBiB,OAAO,GACL,CAAC,IAAI,CAACd,MAAM,GAAG,QAAQ,GAAG,OAAO,IAAI,IAAI,CAACO,YAAY,GAAG,OAAO;KACnE,MAAM,IAAIK,IAAI,KAAKd,YAAY,EAAE;MAChCgB,OAAO,GACL,CAAC,IAAI,CAACd,MAAM,GAAG,UAAU,GAAG,SAAS,IAAI,IAAI,CAACO,YAAY,GAAG,OAAO;KACvE,MAAM;MACL,MAAM,IAAI7J,KAAK,CAAC,2BAA2B,GAAGkK,IAAI,CAAC;;IAErD,IAAI,IAAI,CAACG,eAAe,EAAE,EAAE;MAC1BF,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAACZ,SAAS;;IAG/B,IAAMe,KAAK,GAAa,EAAE;IAE1BxH,IAAI,CAACqH,MAAM,EAAE,UAACnO,GAAW,EAAEC,KAAa;MACtCqO,KAAK,CAAChI,IAAI,CAACtG,GAAG,GAAG,GAAG,GAAGC,KAAK,CAAC;KAC9B,CAAC;IAEF,OAAOmO,OAAO,GAAGE,KAAK,CAACtG,IAAI,CAAC,GAAG,CAAC;GACjC;;EAGD8F,2BAAQ,GAAR;IACE,IAAInM,GAAG,GAAG,IAAI,CAAC4M,WAAW,EAAE;IAC5B,IAAI,IAAI,CAACb,cAAc,EAAE;MACvB/L,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC+L,cAAc,GAAG,GAAG;;IAExC,OAAO/L,GAAG;GACX;;EAGDmM,8BAAW,GAAX;IACE,IAAM1J,QAAQ,GAAG,IAAI,CAACkJ,MAAM,GAAG,UAAU,GAAG,SAAS;IACrD,IAAMxE,KAAK,GAAG,IAAI,CAAC6E,6BAA6B,GAC5C,SAAO,IAAI,CAACJ,SAAW,GACvB,EAAE;IACN,OAAO,KAAGnJ,QAAQ,GAAG,IAAI,CAACiJ,IAAI,SAAIvE,KAAO;GAC1C;EACH,eAAC;AAAD,CAAC;;ACxID;;;;;;;;;;;;;;;;AAqBA;;;;AAIA,SAAS0F,UAAU,CAACjE,UAAkB;EACpC,IAAIkE,iBAAiB,GAAG,EAAE;EAC1B,IAAM7D,MAAM,GAAGL,UAAU,CAACL,KAAK,CAAC,GAAG,CAAC;EACpC,KAAK,IAAI1H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoI,MAAM,CAACnI,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIoI,MAAM,CAACpI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACxB,IAAIiM,KAAK,GAAG9D,MAAM,CAACpI,CAAC,CAAC;MACrB,IAAI;QACFkM,KAAK,GAAGC,kBAAkB,CAACD,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;OACtD,CAAC,OAAOzN,CAAC,EAAE;MACZsN,iBAAiB,IAAI,GAAG,GAAGC,KAAK;;;EAGpC,OAAOD,iBAAiB;AAC1B;AAEA;;;;AAIA,SAASI,WAAW,CAACC,WAAmB;;EACtC,IAAMC,OAAO,GAAG,EAAE;EAClB,IAAID,WAAW,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACjCF,WAAW,GAAGA,WAAW,CAACjI,SAAS,CAAC,CAAC,CAAC;;;IAExC,KAAsB,6BAAW,CAACqD,KAAK,CAAC,GAAG,CAAC,6CAAE;MAAzC,IAAM+E,OAAO;MAChB,IAAIA,OAAO,CAACxM,MAAM,KAAK,CAAC,EAAE;QACxB;;MAEF,IAAMyM,EAAE,GAAGD,OAAO,CAAC/E,KAAK,CAAC,GAAG,CAAC;MAC7B,IAAIgF,EAAE,CAACzM,MAAM,KAAK,CAAC,EAAE;QACnBsM,OAAO,CAACJ,kBAAkB,CAACO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGP,kBAAkB,CAACO,EAAE,CAAC,CAAC,CAAC,CAAC;OAC/D,MAAM;QACLjL,IAAI,CAAC,4BAA0BgL,OAAO,oBAAeH,WAAW,MAAG,CAAC;;;;;;;;;;;;;;EAGxE,OAAOC,OAAO;AAChB;AAEO,IAAMI,aAAa,GAAG,SAAhBA,aAAa,CACxBC,OAAe,EACf3B,SAAkB;EAElB,IAAM4B,SAAS,GAAGC,gBAAgB,CAACF,OAAO,CAAC;IACzC7B,SAAS,GAAG8B,SAAS,CAAC9B,SAAS;EAEjC,IAAI8B,SAAS,CAACzB,MAAM,KAAK,cAAc,EAAE;IACvC7J,KAAK,CACHsL,SAAS,CAAChC,IAAI,GACZ,2BAA2B,GAC3B,mDAAmD,CACtD;;;EAIH,IACE,CAAC,CAACE,SAAS,IAAIA,SAAS,KAAK,WAAW,KACxC8B,SAAS,CAACzB,MAAM,KAAK,WAAW,EAChC;IACA7J,KAAK,CACH,8EAA8E,CAC/E;;EAGH,IAAI,CAACsL,SAAS,CAAC/B,MAAM,EAAE;IACrBpJ,kBAAkB,EAAE;;EAGtB,IAAMsJ,aAAa,GAAG6B,SAAS,CAACE,MAAM,KAAK,IAAI,IAAIF,SAAS,CAACE,MAAM,KAAK,KAAK;EAE7E,OAAO;IACLC,QAAQ,EAAE,IAAI1B,QAAQ,CACpBuB,SAAS,CAAChC,IAAI,EACdgC,SAAS,CAAC/B,MAAM,EAChBC,SAAS,EACTE,SAAS,EACTD,aAAa,qBACO,EAAE,oCACaD,SAAS,KAAK8B,SAAS,CAACI,SAAS,CACrE;IACDzG,IAAI,EAAE,IAAIsB,IAAI,CAAC+E,SAAS,CAAC9E,UAAU;GACpC;AACH,CAAC;AAED;;;;;AAKO,IAAM+E,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BF,OAAe;;EAYf,IAAI/B,IAAI,GAAG,EAAE;IACXO,MAAM,GAAG,EAAE;IACX6B,SAAS,GAAG,EAAE;IACdlF,UAAU,GAAG,EAAE;IACfgD,SAAS,GAAG,EAAE;;EAGhB,IAAID,MAAM,GAAG,IAAI;IACfiC,MAAM,GAAG,OAAO;IAChBG,IAAI,GAAG,GAAG;;EAGZ,IAAI,OAAON,OAAO,KAAK,QAAQ,EAAE;;IAE/B,IAAIO,QAAQ,GAAGP,OAAO,CAAC/K,OAAO,CAAC,IAAI,CAAC;IACpC,IAAIsL,QAAQ,IAAI,CAAC,EAAE;MACjBJ,MAAM,GAAGH,OAAO,CAACvI,SAAS,CAAC,CAAC,EAAE8I,QAAQ,GAAG,CAAC,CAAC;MAC3CP,OAAO,GAAGA,OAAO,CAACvI,SAAS,CAAC8I,QAAQ,GAAG,CAAC,CAAC;;;IAI3C,IAAIC,QAAQ,GAAGR,OAAO,CAAC/K,OAAO,CAAC,GAAG,CAAC;IACnC,IAAIuL,QAAQ,KAAK,CAAC,CAAC,EAAE;MACnBA,QAAQ,GAAGR,OAAO,CAAC3M,MAAM;;IAE3B,IAAIoN,eAAe,GAAGT,OAAO,CAAC/K,OAAO,CAAC,GAAG,CAAC;IAC1C,IAAIwL,eAAe,KAAK,CAAC,CAAC,EAAE;MAC1BA,eAAe,GAAGT,OAAO,CAAC3M,MAAM;;IAElC4K,IAAI,GAAG+B,OAAO,CAACvI,SAAS,CAAC,CAAC,EAAEzB,IAAI,CAACuC,GAAG,CAACiI,QAAQ,EAAEC,eAAe,CAAC,CAAC;IAChE,IAAID,QAAQ,GAAGC,eAAe,EAAE;;MAE9BtF,UAAU,GAAGiE,UAAU,CAACY,OAAO,CAACvI,SAAS,CAAC+I,QAAQ,EAAEC,eAAe,CAAC,CAAC;;IAEvE,IAAMC,WAAW,GAAGjB,WAAW,CAC7BO,OAAO,CAACvI,SAAS,CAACzB,IAAI,CAACuC,GAAG,CAACyH,OAAO,CAAC3M,MAAM,EAAEoN,eAAe,CAAC,CAAC,CAC7D;;IAGDF,QAAQ,GAAGtC,IAAI,CAAChJ,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAIsL,QAAQ,IAAI,CAAC,EAAE;MACjBrC,MAAM,GAAGiC,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,KAAK;MAC/CG,IAAI,GAAGvH,QAAQ,CAACkF,IAAI,CAACxG,SAAS,CAAC8I,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;KAClD,MAAM;MACLA,QAAQ,GAAGtC,IAAI,CAAC5K,MAAM;;IAGxB,IAAMsN,eAAe,GAAG1C,IAAI,CAAC1C,KAAK,CAAC,CAAC,EAAEgF,QAAQ,CAAC;IAC/C,IAAII,eAAe,CAAC1H,WAAW,EAAE,KAAK,WAAW,EAAE;MACjDuF,MAAM,GAAG,WAAW;KACrB,MAAM,IAAImC,eAAe,CAAC7F,KAAK,CAAC,GAAG,CAAC,CAACzH,MAAM,IAAI,CAAC,EAAE;MACjDmL,MAAM,GAAGmC,eAAe;KACzB,MAAM;;MAEL,IAAMC,MAAM,GAAG3C,IAAI,CAAChJ,OAAO,CAAC,GAAG,CAAC;MAChCoL,SAAS,GAAGpC,IAAI,CAACxG,SAAS,CAAC,CAAC,EAAEmJ,MAAM,CAAC,CAAC3H,WAAW,EAAE;MACnDuF,MAAM,GAAGP,IAAI,CAACxG,SAAS,CAACmJ,MAAM,GAAG,CAAC,CAAC;;MAEnCzC,SAAS,GAAGkC,SAAS;;;IAGvB,IAAI,IAAI,IAAIK,WAAW,EAAE;MACvBvC,SAAS,GAAGuC,WAAW,CAAC,IAAI,CAAC;;;EAIjC,OAAO;IACLzC,IAAI;IACJqC,IAAI;IACJ9B,MAAM;IACN6B,SAAS;IACTnC,MAAM;IACNiC,MAAM;IACNhF,UAAU;IACVgD,SAAS;GACV;AACH,CAAC;;AC1MD;;;;;;;;;;;;;;;;AA4BA;;;;;AAKO,IAAM0C,kBAAkB,GAAG,gCAAgC;AAElE;;;;;;AAMO,IAAMC,mBAAmB,GAAG,8BAA8B;AAEjE;;;;;AAKO,IAAMC,cAAc,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;AAE9C;;;;AAIO,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAapQ,GAAY;EAC9C,OACE,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACyC,MAAM,KAAK,CAAC,IAAI,CAACwN,kBAAkB,CAAC1H,IAAI,CAACvI,GAAG,CAAC;AAEhF,CAAC;AAED;;;;AAIO,IAAMqQ,iBAAiB,GAAG,SAApBA,iBAAiB,CAAa9F,UAAkB;EAC3D,OACE,OAAOA,UAAU,KAAK,QAAQ,IAC9BA,UAAU,CAAC9H,MAAM,KAAK,CAAC,IACvB,CAACyN,mBAAmB,CAAC3H,IAAI,CAACgC,UAAU,CAAC;AAEzC,CAAC;AAED;;;;AAIO,IAAM+F,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAa/F,UAAkB;EAC/D,IAAIA,UAAU,EAAE;;IAEdA,UAAU,GAAGA,UAAU,CAACqE,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;;EAG1D,OAAOyB,iBAAiB,CAAC9F,UAAU,CAAC;AACtC,CAAC;AAED;;;;AAIO,IAAMgG,eAAe,GAAG,SAAlBA,eAAe,CAAaC,QAAiB;EACxD,OACEA,QAAQ,KAAK,IAAI,IACjB,OAAOA,QAAQ,KAAK,QAAQ,IAC3B,OAAOA,QAAQ,KAAK,QAAQ,IAAI,CAAClM,mBAAmB,CAACkM,QAAQ,CAAE,IAC/DA,QAAQ,IACP,OAAOA,QAAQ,KAAK,QAAQ;;EAE5B1P,QAAQ,CAAC0P,QAAe,EAAE,KAAK,CAAE;AAEvC,CAAC;AAED;;;;;;;;;AASO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,CAClCC,MAAc,EACdC,cAAsB,EACtBpM,IAAa,EACbyE,IAAU,EACV4H,QAAiB;EAEjB,IAAIA,QAAQ,IAAIrM,IAAI,KAAKsM,SAAS,EAAE;IAClC;;EAGFC,oBAAoB,CAClBC,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,EAChDrM,IAAI,EACJyE,IAAI,CACL;AACH,CAAC;AAED;;;;;;;AAOO,IAAM8H,oBAAoB,GAAG,SAAvBA,oBAAoB,CAC/BE,WAAmB,EACnBzM,IAAa,EACb0M,KAA4B;EAE5B,IAAMjI,IAAI,GACRiI,KAAK,YAAY3G,IAAI,GAAG,IAAI8B,cAAc,CAAC6E,KAAK,EAAED,WAAW,CAAC,GAAGC,KAAK;EAExE,IAAI1M,IAAI,KAAKsM,SAAS,EAAE;IACtB,MAAM,IAAI7M,KAAK,CAACgN,WAAW,GAAG,qBAAqB,GAAGhI,IAAI,CAAC0D,aAAa,EAAE,CAAC;;EAE7E,IAAI,OAAOnI,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAM,IAAIP,KAAK,CACbgN,WAAW,GACT,sBAAsB,GACtBhI,IAAI,CAAC0D,aAAa,EAAE,GACpB,mBAAmB,GACnBnI,IAAI,CAAC5D,QAAQ,EAAE,CAClB;;EAEH,IAAI2D,mBAAmB,CAACC,IAAI,CAAC,EAAE;IAC7B,MAAM,IAAIP,KAAK,CACbgN,WAAW,GAAG,WAAW,GAAGzM,IAAI,CAAC5D,QAAQ,EAAE,GAAG,GAAG,GAAGqI,IAAI,CAAC0D,aAAa,EAAE,CACzE;;;EAIH,IACE,OAAOnI,IAAI,KAAK,QAAQ,IACxBA,IAAI,CAAC9B,MAAM,GAAG0N,cAAc,GAAG,CAAC,IAChCjE,YAAY,CAAC3H,IAAI,CAAC,GAAG4L,cAAc,EACnC;IACA,MAAM,IAAInM,KAAK,CACbgN,WAAW,GACT,iCAAiC,GACjCb,cAAc,GACd,cAAc,GACdnH,IAAI,CAAC0D,aAAa,EAAE,GACpB,KAAK,GACLnI,IAAI,CAACsC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GACrB,OAAO,CACV;;;;EAKH,IAAItC,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACpC,IAAI2M,aAAW,GAAG,KAAK;IACvB,IAAIC,gBAAc,GAAG,KAAK;IAC1BrK,IAAI,CAACvC,IAAI,EAAE,UAACvE,GAAW,EAAEC,KAAc;MACrC,IAAID,GAAG,KAAK,QAAQ,EAAE;QACpBkR,aAAW,GAAG,IAAI;OACnB,MAAM,IAAIlR,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,KAAK,EAAE;QAC/CmR,gBAAc,GAAG,IAAI;QACrB,IAAI,CAACf,UAAU,CAACpQ,GAAG,CAAC,EAAE;UACpB,MAAM,IAAIgE,KAAK,CACbgN,WAAW,GACT,4BAA4B,GAC5BhR,GAAG,GACH,IAAI,GACJgJ,IAAI,CAAC0D,aAAa,EAAE,GACpB,oCAAoC,GACpC,oDAAoD,CACvD;;;MAIL1D,IAAI,CAAC1C,IAAI,CAACtG,GAAG,CAAC;MACd8Q,oBAAoB,CAACE,WAAW,EAAE/Q,KAAK,EAAE+I,IAAI,CAAC;MAC9CA,IAAI,CAACuD,GAAG,EAAE;KACX,CAAC;IAEF,IAAI2E,aAAW,IAAIC,gBAAc,EAAE;MACjC,MAAM,IAAInN,KAAK,CACbgN,WAAW,GACT,2BAA2B,GAC3BhI,IAAI,CAAC0D,aAAa,EAAE,GACpB,kCAAkC,CACrC;;;AAGP,CAAC;AAED;;;;;;AAMO,IAAM0E,0BAA0B,GAAG,SAA7BA,0BAA0B,CACrCJ,WAAmB,EACnBK,UAAkB;EAElB,IAAI7O,CAAC,EAAE8O,OAAO;EACd,KAAK9O,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6O,UAAU,CAAC5O,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC8O,OAAO,GAAGD,UAAU,CAAC7O,CAAC,CAAC;IACvB,IAAM4D,IAAI,GAAGkL,OAAO,CAAC3G,KAAK,EAAE;IAC5B,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzF,IAAI,CAAC3D,MAAM,EAAEoJ,CAAC,EAAE,EAAE;MACpC,IAAIzF,IAAI,CAACyF,CAAC,CAAC,KAAK,WAAW,IAAIA,CAAC,KAAKzF,IAAI,CAAC3D,MAAM,GAAG,CAAC,EAAE,CAErD,KAAM,IAAI,CAAC2N,UAAU,CAAChK,IAAI,CAACyF,CAAC,CAAC,CAAC,EAAE;QAC/B,MAAM,IAAI7H,KAAK,CACbgN,WAAW,GACT,2BAA2B,GAC3B5K,IAAI,CAACyF,CAAC,CAAC,GACP,YAAY,GACZyF,OAAO,CAAC3Q,QAAQ,EAAE,GAClB,mCAAmC,GACnC,oDAAoD,CACvD;;;;;;;EAQP0Q,UAAU,CAAC9K,IAAI,CAAC+D,IAAI,CAACiH,YAAY,CAAC;EAClC,IAAIC,QAAQ,GAAgB,IAAI;EAChC,KAAKhP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6O,UAAU,CAAC5O,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC8O,OAAO,GAAGD,UAAU,CAAC7O,CAAC,CAAC;IACvB,IAAIgP,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAAC1Q,QAAQ,CAACwQ,OAAO,CAAC,EAAE;MACnD,MAAM,IAAItN,KAAK,CACbgN,WAAW,GACT,kBAAkB,GAClBQ,QAAQ,CAAC7Q,QAAQ,EAAE,GACnB,oCAAoC,GACpC2Q,OAAO,CAAC3Q,QAAQ,EAAE,CACrB;;IAEH6Q,QAAQ,GAAGF,OAAO;;AAEtB,CAAC;AAED;;;;;;;;;;AAUO,IAAMG,4BAA4B,GAAG,SAA/BA,4BAA4B,CACvCf,MAAc,EACdC,cAAsB,EACtBpM,IAAa,EACbyE,IAAU,EACV4H,QAAiB;EAEjB,IAAIA,QAAQ,IAAIrM,IAAI,KAAKsM,SAAS,EAAE;IAClC;;EAGF,IAAMG,aAAW,GAAGD,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC;EAEpE,IAAI,EAAErM,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,CAAC,IAAI5B,KAAK,CAACC,OAAO,CAAC2B,IAAI,CAAC,EAAE;IAC9D,MAAM,IAAIP,KAAK,CACbgN,aAAW,GAAG,wDAAwD,CACvE;;EAGH,IAAMK,UAAU,GAAW,EAAE;EAC7BvK,IAAI,CAACvC,IAAI,EAAE,UAACvE,GAAW,EAAEC,KAAc;IACrC,IAAMqR,OAAO,GAAG,IAAIhH,IAAI,CAACtK,GAAG,CAAC;IAC7B8Q,oBAAoB,CAACE,aAAW,EAAE/Q,KAAK,EAAE+I,IAAI,CAACqD,KAAK,CAACiF,OAAO,CAAC,CAAC;IAC7D,IAAIA,OAAO,CAACI,OAAO,EAAE,KAAK,WAAW,EAAE;MACrC,IAAI,CAACnB,eAAe,CAACtQ,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAI+D,KAAK,CACbgN,aAAW,GACT,iCAAiC,GACjCM,OAAO,CAAC3Q,QAAQ,EAAE,GAClB,2BAA2B,GAC3B,qEAAqE,CACxE;;;IAGL0Q,UAAU,CAAC/K,IAAI,CAACgL,OAAO,CAAC;GACzB,CAAC;EACFF,0BAA0B,CAACJ,aAAW,EAAEK,UAAU,CAAC;AACrD,CAAC;AAEM,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BjB,MAAc,EACdC,cAAsB,EACtBH,QAAiB,EACjBI,QAAiB;EAEjB,IAAIA,QAAQ,IAAIJ,QAAQ,KAAKK,SAAS,EAAE;IACtC;;EAEF,IAAIvM,mBAAmB,CAACkM,QAAQ,CAAC,EAAE;IACjC,MAAM,IAAIxM,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAC9C,KAAK,GACLJ,QAAQ,CAAC7P,QAAQ,EAAE,GACnB,oEAAoE,GACpE,yBAAyB,CAC5B;;;EAGH,IAAI,CAAC4P,eAAe,CAACC,QAAQ,CAAC,EAAE;IAC9B,MAAM,IAAIxM,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAC9C,oCAAoC,GACpC,mDAAmD,CACtD;;AAEL,CAAC;AAEM,IAAMgB,iBAAiB,GAAG,SAApBA,iBAAiB,CAC5BlB,MAAc,EACdC,cAAsB,EACtBkB,SAAiB,EACjBjB,QAAiB;EAEjB,IAAIA,QAAQ,IAAIiB,SAAS,KAAKhB,SAAS,EAAE;IACvC;;EAGF,QAAQgB,SAAS;IACf,KAAK,OAAO;IACZ,KAAK,aAAa;IAClB,KAAK,eAAe;IACpB,KAAK,eAAe;IACpB,KAAK,aAAa;MAChB;IACF;MACE,MAAM,IAAI7N,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAC9C,wEAAwE,GACxE,oCAAoC,CACvC;EAAC;AAER,CAAC;AAEM,IAAMkB,WAAW,GAAG,SAAdA,WAAW,CACtBpB,MAAc,EACdC,cAAsB,EACtB3Q,GAAW,EACX4Q,QAAiB;EAEjB,IAAIA,QAAQ,IAAI5Q,GAAG,KAAK6Q,SAAS,EAAE;IACjC;;EAEF,IAAI,CAACT,UAAU,CAACpQ,GAAG,CAAC,EAAE;IACpB,MAAM,IAAIgE,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAC9C,wBAAwB,GACxB5Q,GAAG,GACH,kDAAkD,GAClD,kDAAkD,CACrD;;AAEL,CAAC;AAEM,IAAM+R,kBAAkB,GAAG,SAArBA,kBAAkB,CAC7BrB,MAAc,EACdC,cAAsB,EACtBpG,UAAkB,EAClBqG,QAAiB;EAEjB,IAAIA,QAAQ,IAAIrG,UAAU,KAAKsG,SAAS,EAAE;IACxC;;EAGF,IAAI,CAACR,iBAAiB,CAAC9F,UAAU,CAAC,EAAE;IAClC,MAAM,IAAIvG,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAC9C,yBAAyB,GACzBrG,UAAU,GACV,yCAAyC,GACzC,2CAA2C,CAC9C;;AAEL,CAAC;AAEM,IAAMyH,sBAAsB,GAAG,SAAzBA,sBAAsB,CACjCtB,MAAc,EACdC,cAAsB,EACtBpG,UAAkB,EAClBqG,QAAiB;EAEjB,IAAIrG,UAAU,EAAE;;IAEdA,UAAU,GAAGA,UAAU,CAACqE,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;;EAG1DmD,kBAAkB,CAACrB,MAAM,EAAEC,cAAc,EAAEpG,UAAU,EAAEqG,QAAQ,CAAC;AAClE,CAAC;AAEM,IAAMqB,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAavB,MAAc,EAAE1H,IAAU;EACtE,IAAIA,IAAI,CAACkC,QAAQ,EAAE,KAAK,OAAO,EAAE;IAC/B,MAAM,IAAIlH,KAAK,CAAC0M,MAAM,GAAG,2CAA2C,CAAC;;AAEzE,CAAC;AAEM,IAAMwB,WAAW,GAAG,SAAdA,WAAW,CACtBxB,MAAc,EACdC,cAAsB,EACtBtB,SAA6C;;EAG7C,IAAM9E,UAAU,GAAG8E,SAAS,CAACrG,IAAI,CAACrI,QAAQ,EAAE;EAC5C,IACE,EAAE,OAAO0O,SAAS,CAACG,QAAQ,CAACnC,IAAI,KAAK,QAAQ,CAAC,IAC9CgC,SAAS,CAACG,QAAQ,CAACnC,IAAI,CAAC5K,MAAM,KAAK,CAAC,IACnC,CAAC2N,UAAU,CAACf,SAAS,CAACG,QAAQ,CAACjC,SAAS,CAAC,IACxC8B,SAAS,CAACG,QAAQ,CAACnC,IAAI,CAACnD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,WAAY,IACvDK,UAAU,CAAC9H,MAAM,KAAK,CAAC,IAAI,CAAC6N,qBAAqB,CAAC/F,UAAU,CAAE,EAC/D;IACA,MAAM,IAAIvG,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAE,KAAK,CAAC,GAC3C,mCAAmC,GACnC,qDAAqD,CACxD;;AAEL,CAAC;AAmBM,IAAMwB,eAAe,GAAG,SAAlBA,eAAe,CAC1BzB,MAAc,EACdC,cAAsB,EACtByB,IAAa,EACbxB,QAAiB;EAEjB,IAAIA,QAAQ,IAAIwB,IAAI,KAAKvB,SAAS,EAAE;IAClC;;EAEF,IAAI,OAAOuB,IAAI,KAAK,SAAS,EAAE;IAC7B,MAAM,IAAIpO,KAAK,CACb+M,WAAc,CAACL,MAAM,EAAEC,cAAc,EAAEC,QAAQ,CAAC,GAAG,oBAAoB,CACxE;;AAEL,CAAC;;ACteD;;;;;;;;;;;;;;;;AA8BA;;;;;;;;EAQE,sBAAoByB,KAAW,EAAUpB,KAAW;IAAhC,UAAK,GAALoB,KAAK;IAAgB,UAAK,GAALpB,KAAK;;;;;;EAM9CqB,6BAAM,GAAN,UAAOC,UAAsC;IAC3CC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC/DiQ,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAC5D,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAQ;IACrC,IAAI,CAACP,KAAK,CAACQ,kBAAkB,CAC3B,IAAI,CAAC5B,KAAK,EACV0B,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;EAMDT,6BAAM,GAAN,UAAOC,UAAsC;IAC3CC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC/DwP,oBAAoB,CAAC,qBAAqB,EAAE,IAAI,CAAChB,KAAK,CAAC;IACvDyB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAC5D,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAQ;IACrC,IAAI,CAACP,KAAK,CAACW,eAAe,CACxB,IAAI,CAAC/B,KAAK,EACV,IAAI,EACJ0B,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;EAODT,0BAAG,GAAH,UAAIrS,KAAc,EAAEsS,UAAsC;IACxDC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5DwP,oBAAoB,CAAC,kBAAkB,EAAE,IAAI,CAAChB,KAAK,CAAC;IACpDR,uBAAuB,CAAC,kBAAkB,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAACgR,KAAK,EAAE,KAAK,CAAC;IACxEyB,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IACzD,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAQ;IACrC,IAAI,CAACP,KAAK,CAACW,eAAe,CACxB,IAAI,CAAC/B,KAAK,EACVhR,KAAK,EACL0S,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;;EAQDT,sCAAe,GAAf,UACErS,KAAc,EACduQ,QAAgC,EAChC+B,UAAsC;IAEtCC,gBAAgB,CAAC,8BAA8B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACxEwP,oBAAoB,CAAC,8BAA8B,EAAE,IAAI,CAAChB,KAAK,CAAC;IAChER,uBAAuB,CACrB,8BAA8B,EAC9B,CAAC,EACDxQ,KAAK,EACL,IAAI,CAACgR,KAAK,EACV,KAAK,CACN;IACDU,gBAAgB,CAAC,8BAA8B,EAAE,CAAC,EAAEnB,QAAQ,EAAE,KAAK,CAAC;IACpEkC,gBAAgB,CAAC,8BAA8B,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAErE,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAQ;IACrC,IAAI,CAACP,KAAK,CAACY,2BAA2B,CACpC,IAAI,CAAChC,KAAK,EACVhR,KAAK,EACLuQ,QAAQ,EACRmC,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;EAODT,6BAAM,GAAN,UACEY,aAAwB,EACxBX,UAAsC;IAEtCC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC/DwP,oBAAoB,CAAC,qBAAqB,EAAE,IAAI,CAAChB,KAAK,CAAC;IACvD,IAAItO,KAAK,CAACC,OAAO,CAACsQ,aAAa,CAAC,EAAE;MAChC,IAAMC,gBAAgB,GAA6B,EAAE;MACrD,KAAK,IAAI3Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0Q,aAAa,CAACzQ,MAAM,EAAE,EAAED,CAAC,EAAE;QAC7C2Q,gBAAgB,CAAC,EAAE,GAAG3Q,CAAC,CAAC,GAAG0Q,aAAa,CAAC1Q,CAAC,CAAC;;MAE7C0Q,aAAa,GAAGC,gBAAgB;MAChClP,IAAI,CACF,sHAAsH,GACpH,0GAA0G,CAC7G;;IAEHwN,4BAA4B,CAC1B,qBAAqB,EACrB,CAAC,EACDyB,aAAa,EACb,IAAI,CAACjC,KAAK,EACV,KAAK,CACN;IACDyB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAC5D,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAQ;IACrC,IAAI,CAACP,KAAK,CAACe,kBAAkB,CAC3B,IAAI,CAACnC,KAAK,EACViC,aAAa,EACbP,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;EACH,mBAAC;AAAD,CAAC;;AClKD;;;;;;;;;;;;;;;;AAoBA;;;;;;;;EAQE,2BAAmBM,SAAkB,EAASC,QAAsB;IAAjD,cAAS,GAATD,SAAS;IAAkB,aAAQ,GAARC,QAAQ;;;;EAItDC,kCAAM,GAAN;IACEf,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACpE,OAAO;MAAE4Q,SAAS,EAAE,IAAI,CAACA,SAAS;MAAEC,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACE,MAAM;IAAE,CAAE;GACvE;EACH,wBAAC;AAAD,CAAC;;ACpCD;;;;;;;;;;;;;;;;AA0BA;AACA,IAAMC,UAAU,GACd,kEAAkE;AAEpE,IAAMC,aAAa,GAAG,GAAG;AAEzB,IAAMC,aAAa,GAAG,GAAG;AAEzB,IAAMC,WAAW,GAAG,GAAG;AAEvB;;;;;;;;;;;;;;AAcO,IAAMC,UAAU,GAAI;;;EAGzB,IAAIC,YAAY,GAAG,CAAC;;;;;EAMpB,IAAMC,aAAa,GAAa,EAAE;EAElC,OAAO,UAAUC,GAAW;IAC1B,IAAMC,aAAa,GAAGD,GAAG,KAAKF,YAAY;IAC1CA,YAAY,GAAGE,GAAG;IAElB,IAAIxR,CAAC;IACL,IAAM0R,cAAc,GAAG,IAAIvR,KAAK,CAAC,CAAC,CAAC;IACnC,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACvB0R,cAAc,CAAC1R,CAAC,CAAC,GAAGiR,UAAU,CAACzE,MAAM,CAACgF,GAAG,GAAG,EAAE,CAAC;;;MAG/CA,GAAG,GAAG5O,IAAI,CAACC,KAAK,CAAC2O,GAAG,GAAG,EAAE,CAAC;;IAE5B7Q,MAAM,CAAC6Q,GAAG,KAAK,CAAC,EAAE,0BAA0B,CAAC;IAE7C,IAAIvS,EAAE,GAAGyS,cAAc,CAAClM,IAAI,CAAC,EAAE,CAAC;IAEhC,IAAI,CAACiM,aAAa,EAAE;MAClB,KAAKzR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACvBuR,aAAa,CAACvR,CAAC,CAAC,GAAG4C,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC+O,MAAM,EAAE,GAAG,EAAE,CAAC;;KAEpD,MAAM;;;MAGL,KAAK3R,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,IAAIuR,aAAa,CAACvR,CAAC,CAAC,KAAK,EAAE,EAAEA,CAAC,EAAE,EAAE;QACnDuR,aAAa,CAACvR,CAAC,CAAC,GAAG,CAAC;;MAEtBuR,aAAa,CAACvR,CAAC,CAAC,EAAE;;IAEpB,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACvBf,EAAE,IAAIgS,UAAU,CAACzE,MAAM,CAAC+E,aAAa,CAACvR,CAAC,CAAC,CAAC;;IAE3CW,MAAM,CAAC1B,EAAE,CAACgB,MAAM,KAAK,EAAE,EAAE,kCAAkC,CAAC;IAE5D,OAAOhB,EAAE;GACV;AACH,CAAC,EAAG;AAEG,IAAM2S,SAAS,GAAG,SAAZA,SAAS,CAAapU,GAAW;EAC5C,IAAIA,GAAG,KAAK,EAAE,GAAGqJ,cAAc,EAAE;;IAE/B,OAAOqK,aAAa;;EAEtB,IAAMW,QAAQ,GAAWvO,WAAW,CAAC9F,GAAG,CAAC;EACzC,IAAIqU,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,EAAE,IAAIA,QAAQ,GAAG,CAAC,CAAC;;EAE5B,IAAMC,IAAI,GAAG,IAAI3R,KAAK,CAAC3C,GAAG,CAACyC,MAAM,CAAC;EAElC,KAAK,IAAI8R,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGD,IAAI,CAAC7R,MAAM,EAAE8R,GAAC,EAAE,EAAE;IACpCD,IAAI,CAACC,GAAC,CAAC,GAAGvU,GAAG,CAACgP,MAAM,CAACuF,GAAC,CAAC;;EAGzB,IAAID,IAAI,CAAC7R,MAAM,GAAGmR,WAAW,EAAE;IAC7BU,IAAI,CAAChO,IAAI,CAACoN,aAAa,CAAC;IACxB,OAAOY,IAAI,CAACtM,IAAI,CAAC,EAAE,CAAC;;EAGtB,IAAIxF,CAAC,GAAG8R,IAAI,CAAC7R,MAAM,GAAG,CAAC;EAEvB,OAAOD,CAAC,IAAI,CAAC,IAAI8R,IAAI,CAAC9R,CAAC,CAAC,KAAKmR,aAAa,EAAE;IAC1CnR,CAAC,EAAE;;;;EAKL,IAAIA,CAAC,KAAK,CAAC,CAAC,EAAE;IACZ,OAAOiD,QAAQ;;EAGjB,IAAM+O,MAAM,GAAGF,IAAI,CAAC9R,CAAC,CAAC;EACtB,IAAMiS,aAAa,GAAGhB,UAAU,CAACzE,MAAM,CAACyE,UAAU,CAACpP,OAAO,CAACmQ,MAAM,CAAC,GAAG,CAAC,CAAC;EACvEF,IAAI,CAAC9R,CAAC,CAAC,GAAGiS,aAAa;EAEvB,OAAOH,IAAI,CAAC3J,KAAK,CAAC,CAAC,EAAEnI,CAAC,GAAG,CAAC,CAAC,CAACwF,IAAI,CAAC,EAAE,CAAC;AACtC,CAAC;AAED;AACO,IAAM0M,WAAW,GAAG,SAAdA,WAAW,CAAa1U,GAAW;EAC9C,IAAIA,GAAG,KAAK,EAAE,GAAGoJ,cAAc,EAAE;IAC/B,OAAO5D,QAAQ;;EAEjB,IAAM6O,QAAQ,GAAWvO,WAAW,CAAC9F,GAAG,CAAC;EACzC,IAAIqU,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,EAAE,IAAIA,QAAQ,GAAG,CAAC,CAAC;;EAE5B,IAAMC,IAAI,GAAG,IAAI3R,KAAK,CAAC3C,GAAG,CAACyC,MAAM,CAAC;EAClC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8R,IAAI,CAAC7R,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC8R,IAAI,CAAC9R,CAAC,CAAC,GAAGxC,GAAG,CAACgP,MAAM,CAACxM,CAAC,CAAC;;;;;;;;;;;;;EAazB,IAAI8R,IAAI,CAACA,IAAI,CAAC7R,MAAM,GAAG,CAAC,CAAC,KAAKiR,aAAa,EAAE;IAC3C,IAAIY,IAAI,CAAC7R,MAAM,KAAK,CAAC,EAAE;;MAErB,OAAO,EAAE,GAAG4G,cAAc;;IAE5B,OAAOiL,IAAI,CAACA,IAAI,CAAC7R,MAAM,GAAG,CAAC,CAAC;IAC5B,OAAO6R,IAAI,CAACtM,IAAI,CAAC,EAAE,CAAC;;;;;EAKtBsM,IAAI,CAACA,IAAI,CAAC7R,MAAM,GAAG,CAAC,CAAC,GAAGgR,UAAU,CAACzE,MAAM,CACvCyE,UAAU,CAACpP,OAAO,CAACiQ,IAAI,CAACA,IAAI,CAAC7R,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9C;EACD,OAAO6R,IAAI,CAACtM,IAAI,CAAC,EAAE,CAAC,GAAG2L,aAAa,CAACgB,MAAM,CAACf,WAAW,GAAGU,IAAI,CAAC7R,MAAM,CAAC;AACxE,CAAC;;AChLD;;;;;;;;;;;;;;;;AAyJA;;;;;;;AAOA;EACE,mBAAmBhC,IAAY,EAASmU,IAAU;IAA/B,SAAI,GAAJnU,IAAI;IAAiB,SAAI,GAAJmU,IAAI;;;;;;;;EAQrCC,cAAI,GAAX,UAAYpU,IAAY,EAAEmU,IAAU;IAClC,OAAO,IAAIC,SAAS,CAACpU,IAAI,EAAEmU,IAAI,CAAC;GACjC;EACH,gBAAC;AAAD,CAAC;;AC5KD;;;;;;;;;;;;;;;;AAqBA;;;;AAIA;EAAA;;;;;EAkBEE,0BAAU,GAAV;IACE,OAAO,IAAI,CAACC,OAAO,CAACvR,IAAI,CAAC,IAAI,CAAC;GAC/B;;;;;;;;;EAUDsR,mCAAmB,GAAnB,UAAoBE,OAAa,EAAEC,OAAa;IAC9C,IAAMC,UAAU,GAAG,IAAIL,SAAS,CAACrP,QAAQ,EAAEwP,OAAO,CAAC;IACnD,IAAMG,UAAU,GAAG,IAAIN,SAAS,CAACrP,QAAQ,EAAEyP,OAAO,CAAC;IACnD,OAAO,IAAI,CAACF,OAAO,CAACG,UAAU,EAAEC,UAAU,CAAC,KAAK,CAAC;GAClD;;;;;EAMDL,uBAAO,GAAP;;IAEE,OAAQD,SAAiB,CAACO,GAAG;GAC9B;EAmBH,YAAC;AAAD,CAAC;;ACvFD;;;;;;;;;;;;;;;;AAuBA,IAAIC,YAA0B;AAE9B;EAA8BC;EAA9B;;;EACEjL,sBAAWkL,wBAAY;SAAvB;MACE,OAAOF,YAAY;KACpB;SAED,aAAwBG,GAAG;MACzBH,YAAY,GAAGG,GAAG;KACnB;;;;;;;EAKDD,0BAAO,GAAP,UAAQ5P,CAAY,EAAEC,CAAY;IAChC,OAAOF,WAAW,CAACC,CAAC,CAAClF,IAAI,EAAEmF,CAAC,CAACnF,IAAI,CAAC;GACnC;;;;EAKD8U,8BAAW,GAAX,UAAYX,IAAU;;;IAGpB,MAAMa,cAAc,CAAC,iDAAiD,CAAC;GACxE;;;;EAKDF,sCAAmB,GAAnB,UAAoBP,OAAa,EAAEC,OAAa;IAC9C,OAAO,KAAK,CAAC;GACd;;;;EAKDM,0BAAO,GAAP;;IAEE,OAAQV,SAAiB,CAACO,GAAG;GAC9B;;;;EAKDG,0BAAO,GAAP;;;IAGE,OAAO,IAAIV,SAAS,CAACpP,QAAQ,EAAE4P,YAAY,CAAC;GAC7C;;;;;;EAODE,2BAAQ,GAAR,UAASG,UAAkB,EAAEjV,IAAY;IACvC0C,MAAM,CACJ,OAAOuS,UAAU,KAAK,QAAQ,EAC9B,8CAA8C,CAC/C;;IAED,OAAO,IAAIb,SAAS,CAACa,UAAU,EAAEL,YAAY,CAAC;GAC/C;;;;EAKDE,2BAAQ,GAAR;IACE,OAAO,MAAM;GACd;EACH,eAAC;AAAD,CArEA,CAA8BT,KAAK;AAuE5B,IAAMa,SAAS,GAAG,IAAIJ,QAAQ,EAAE;;AChGvC;;;;;;;;;;;;;;;;AAuBA,IAAIK,QAAc;SAEFC,UAAU,CAACL,GAAS;EAClCI,QAAQ,GAAGJ,GAAG;AAChB;AAEA;;;;AAIO,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAatF,QAAyB;EACjE,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAO,SAAS,GAAGxJ,qBAAqB,CAACwJ,QAAQ,CAAC;GACnD,MAAM;IACL,OAAO,SAAS,GAAGA,QAAQ;;AAE/B,CAAC;AAED;;;;;AAKO,IAAMuF,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAaC,YAAkB;EAC9D,IAAIA,YAAY,CAACC,UAAU,EAAE,EAAE;IAC7B,IAAMT,GAAG,GAAGQ,YAAY,CAACR,GAAG,EAAE;IAC9BrS,MAAM,CACJ,OAAOqS,GAAG,KAAK,QAAQ,IACrB,OAAOA,GAAG,KAAK,QAAQ,IACtB,OAAOA,GAAG,KAAK,QAAQ,IAAI1U,QAAQ,CAAC0U,GAAgB,EAAE,KAAK,CAAE,EAChE,sCAAsC,CACvC;GACF,MAAM;IACLrS,MAAM,CACJ6S,YAAY,KAAKJ,QAAQ,IAAII,YAAY,CAACE,OAAO,EAAE,EACnD,8BAA8B,CAC/B;;;EAGH/S,MAAM,CACJ6S,YAAY,KAAKJ,QAAQ,IAAII,YAAY,CAACG,WAAW,EAAE,CAACD,OAAO,EAAE,EACjE,oDAAoD,CACrD;AACH,CAAC;;AClED;;;;;;;;;;;;;;;;AA0BA,IAAIE,yBAAkD;AAEtD;;;;;AAKA;;;;;;;EAyBE,kBACmBC,MAA6C,EACtDC,aAAmE;IAAnE;MAAAA,gBAAsBC,QAAQ,CAACH,yBAAyB,CAACI,UAAU;IAAA;IAD1D,WAAM,GAANH,MAAM;IACf,kBAAa,GAAbC,aAAa;IAVf,cAAS,GAAkB,IAAI;IAYrCnT,MAAM,CACJ,IAAI,CAACkT,MAAM,KAAKxF,SAAS,IAAI,IAAI,CAACwF,MAAM,KAAK,IAAI,EACjD,0DAA0D,CAC3D;IAEDN,oBAAoB,CAAC,IAAI,CAACO,aAAa,CAAC;;EAjC1CjM,sBAAWkM,qCAAyB;SAIpC;MACE,OAAOH,yBAAyB;KACjC;SAND,aAAqCZ,GAA4B;MAC/DY,yBAAyB,GAAGZ,GAAG;KAChC;;;;;EAmCDe,6BAAU,GAAV;IACE,OAAO,IAAI;GACZ;;EAGDA,8BAAW,GAAX;IACE,OAAO,IAAI,CAACD,aAAa;GAC1B;;EAGDC,iCAAc,GAAd,UAAeE,eAAqB;IAClC,OAAO,IAAIF,QAAQ,CAAC,IAAI,CAACF,MAAM,EAAEI,eAAe,CAAC;GAClD;;EAGDF,oCAAiB,GAAjB,UAAkBG,SAAiB;;IAEjC,IAAIA,SAAS,KAAK,WAAW,EAAE;MAC7B,OAAO,IAAI,CAACJ,aAAa;KAC1B,MAAM;MACL,OAAOC,QAAQ,CAACH,yBAAyB,CAACI,UAAU;;GAEvD;;EAGDD,2BAAQ,GAAR,UAASvN,IAAU;IACjB,IAAIA,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,OAAO,IAAI;KACZ,MAAM,IAAIlN,IAAI,CAACkC,QAAQ,EAAE,KAAK,WAAW,EAAE;MAC1C,OAAO,IAAI,CAACoL,aAAa;KAC1B,MAAM;MACL,OAAOC,QAAQ,CAACH,yBAAyB,CAACI,UAAU;;GAEvD;;;;EAKDD,2BAAQ,GAAR;IACE,OAAO,KAAK;GACb;;EAGDA,0CAAuB,GAAvB,UAAwBG,SAAiB,EAAEC,SAAe;IACxD,OAAO,IAAI;GACZ;;EAGDJ,uCAAoB,GAApB,UAAqBG,SAAiB,EAAEE,YAAkB;IACxD,IAAIF,SAAS,KAAK,WAAW,EAAE;MAC7B,OAAO,IAAI,CAACG,cAAc,CAACD,YAAY,CAAC;KACzC,MAAM,IAAIA,YAAY,CAACV,OAAO,EAAE,IAAIQ,SAAS,KAAK,WAAW,EAAE;MAC9D,OAAO,IAAI;KACZ,MAAM;MACL,OAAOH,QAAQ,CAACH,yBAAyB,CAACI,UAAU,CAACM,oBAAoB,CACvEJ,SAAS,EACTE,YAAY,CACb,CAACC,cAAc,CAAC,IAAI,CAACP,aAAa,CAAC;;GAEvC;;EAGDC,8BAAW,GAAX,UAAYvN,IAAU,EAAE4N,YAAkB;IACxC,IAAMG,KAAK,GAAG/N,IAAI,CAACkC,QAAQ,EAAE;IAC7B,IAAI6L,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOH,YAAY;KACpB,MAAM,IAAIA,YAAY,CAACV,OAAO,EAAE,IAAIa,KAAK,KAAK,WAAW,EAAE;MAC1D,OAAO,IAAI;KACZ,MAAM;MACL5T,MAAM,CACJ4T,KAAK,KAAK,WAAW,IAAI/N,IAAI,CAAC4C,SAAS,EAAE,KAAK,CAAC,EAC/C,4CAA4C,CAC7C;MAED,OAAO,IAAI,CAACkL,oBAAoB,CAC9BC,KAAK,EACLR,QAAQ,CAACH,yBAAyB,CAACI,UAAU,CAACQ,WAAW,CACvDhO,IAAI,CAACqC,QAAQ,EAAE,EACfuL,YAAY,CACb,CACF;;GAEJ;;EAGDL,0BAAO,GAAP;IACE,OAAO,KAAK;GACb;;EAGDA,8BAAW,GAAX;IACE,OAAO,CAAC;GACT;;EAGDA,+BAAY,GAAZ,UAAaU,KAAY,EAAEC,MAAoC;IAC7D,OAAO,KAAK;GACb;;;;EAKDX,sBAAG,GAAH,UAAIY,YAAsB;IACxB,IAAIA,YAAY,IAAI,CAAC,IAAI,CAAChB,WAAW,EAAE,CAACD,OAAO,EAAE,EAAE;MACjD,OAAO;QACL,QAAQ,EAAE,IAAI,CAACkB,QAAQ,EAAE;QACzB,WAAW,EAAE,IAAI,CAACjB,WAAW,EAAE,CAACX,GAAG;OACpC;KACF,MAAM;MACL,OAAO,IAAI,CAAC4B,QAAQ,EAAE;;GAEzB;;EAGDb,uBAAI,GAAJ;IACE,IAAI,IAAI,CAACc,SAAS,KAAK,IAAI,EAAE;MAC3B,IAAIC,MAAM,GAAG,EAAE;MACf,IAAI,CAAC,IAAI,CAAChB,aAAa,CAACJ,OAAO,EAAE,EAAE;QACjCoB,MAAM,IACJ,WAAW,GACXxB,gBAAgB,CAAC,IAAI,CAACQ,aAAa,CAACd,GAAG,EAAqB,CAAC,GAC7D,GAAG;;MAGP,IAAMtH,IAAI,GAAG,OAAO,IAAI,CAACmI,MAAM;MAC/BiB,MAAM,IAAIpJ,IAAI,GAAG,GAAG;MACpB,IAAIA,IAAI,KAAK,QAAQ,EAAE;QACrBoJ,MAAM,IAAItQ,qBAAqB,CAAC,IAAI,CAACqP,MAAgB,CAAC;OACvD,MAAM;QACLiB,MAAM,IAAI,IAAI,CAACjB,MAAM;;MAEvB,IAAI,CAACgB,SAAS,GAAG3V,IAAI,CAAC4V,MAAM,CAAC;;IAE/B,OAAO,IAAI,CAACD,SAAS;GACtB;;;;;EAMDd,2BAAQ,GAAR;IACE,OAAO,IAAI,CAACF,MAAM;GACnB;;;;EAKDE,4BAAS,GAAT,UAAU5K,KAAW;IACnB,IAAIA,KAAK,KAAK4K,QAAQ,CAACH,yBAAyB,CAACI,UAAU,EAAE;MAC3D,OAAO,CAAC;KACT,MAAM,IAAI7K,KAAK,YAAY4K,QAAQ,CAACH,yBAAyB,EAAE;MAC9D,OAAO,CAAC,CAAC;KACV,MAAM;MACLjT,MAAM,CAACwI,KAAK,CAACsK,UAAU,EAAE,EAAE,mBAAmB,CAAC;MAC/C,OAAO,IAAI,CAACsB,kBAAkB,CAAC5L,KAAiB,CAAC;;GAEpD;;;;;;;EAQO4K,qCAAkB,GAA1B,UAA2BiB,SAAmB;IAC5C,IAAMC,aAAa,GAAG,OAAOD,SAAS,CAACnB,MAAM;IAC7C,IAAMqB,YAAY,GAAG,OAAO,IAAI,CAACrB,MAAM;IACvC,IAAMsB,UAAU,GAAGpB,QAAQ,CAACqB,gBAAgB,CAACvT,OAAO,CAACoT,aAAa,CAAC;IACnE,IAAMI,SAAS,GAAGtB,QAAQ,CAACqB,gBAAgB,CAACvT,OAAO,CAACqT,YAAY,CAAC;IACjEvU,MAAM,CAACwU,UAAU,IAAI,CAAC,EAAE,qBAAqB,GAAGF,aAAa,CAAC;IAC9DtU,MAAM,CAAC0U,SAAS,IAAI,CAAC,EAAE,qBAAqB,GAAGH,YAAY,CAAC;IAC5D,IAAIC,UAAU,KAAKE,SAAS,EAAE;;MAE5B,IAAIH,YAAY,KAAK,QAAQ,EAAE;;QAE7B,OAAO,CAAC;OACT,MAAM;;QAEL,IAAI,IAAI,CAACrB,MAAM,GAAGmB,SAAS,CAACnB,MAAM,EAAE;UAClC,OAAO,CAAC,CAAC;SACV,MAAM,IAAI,IAAI,CAACA,MAAM,KAAKmB,SAAS,CAACnB,MAAM,EAAE;UAC3C,OAAO,CAAC;SACT,MAAM;UACL,OAAO,CAAC;;;KAGb,MAAM;MACL,OAAOwB,SAAS,GAAGF,UAAU;;GAEhC;;;;EAKDpB,4BAAS,GAAT;IACE,OAAO,IAAI;GACZ;;;;EAKDA,4BAAS,GAAT;IACE,OAAO,IAAI;GACZ;;;;EAKDA,yBAAM,GAAN,UAAO5K,KAAW;;;;IAIhB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;KACZ,MAAM,IAAIA,KAAK,CAACsK,UAAU,EAAE,EAAE;MAC7B,IAAMuB,SAAS,GAAG7L,KAAiB;MACnC,OACE,IAAI,CAAC0K,MAAM,KAAKmB,SAAS,CAACnB,MAAM,IAChC,IAAI,CAACC,aAAa,CAACwB,MAAM,CAACN,SAAS,CAAClB,aAAa,CAAC;KAErD,MAAM;MACL,OAAO,KAAK;;GAEf;;;;;;;EAtPMC,yBAAgB,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC;EAuPrE,eAAC;CAtQD;;ACjCA;;;;;;;;;;;;;;;;AAsBA,IAAIwB,YAAkC;AACtC,IAAInC,UAAc;SAEFoC,eAAe,CAACxC,GAAyB;EACvDuC,YAAY,GAAGvC,GAAG;AACpB;SAEgBK,YAAU,CAACL,GAAS;EAClCI,UAAQ,GAAGJ,GAAG;AAChB;AAEA;;;;;AAKA;EAAmCF;EAAnC;;;;;;EAIE2C,+BAAO,GAAP,UAAQtS,CAAY,EAAEC,CAAY;IAChC,IAAMsS,SAAS,GAAGvS,CAAC,CAACiP,IAAI,CAACuB,WAAW,EAAE;IACtC,IAAMgC,SAAS,GAAGvS,CAAC,CAACgP,IAAI,CAACuB,WAAW,EAAE;IACtC,IAAMiC,QAAQ,GAAGF,SAAS,CAACG,SAAS,CAACF,SAAS,CAAC;IAC/C,IAAIC,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO1S,WAAW,CAACC,CAAC,CAAClF,IAAI,EAAEmF,CAAC,CAACnF,IAAI,CAAC;KACnC,MAAM;MACL,OAAO2X,QAAQ;;GAElB;;;;EAKDH,mCAAW,GAAX,UAAYrD,IAAU;IACpB,OAAO,CAACA,IAAI,CAACuB,WAAW,EAAE,CAACD,OAAO,EAAE;GACrC;;;;EAKD+B,2CAAmB,GAAnB,UAAoBjD,OAAa,EAAEC,OAAa;IAC9C,OAAO,CAACD,OAAO,CAACmB,WAAW,EAAE,CAAC2B,MAAM,CAAC7C,OAAO,CAACkB,WAAW,EAAE,CAAC;GAC5D;;;;EAKD8B,+BAAO,GAAP;;IAEE,OAAQpD,SAAiB,CAACO,GAAG;GAC9B;;;;EAKD6C,+BAAO,GAAP;IACE,OAAO,IAAIpD,SAAS,CAACpP,QAAQ,EAAE,IAAI8Q,QAAQ,CAAC,iBAAiB,EAAEX,UAAQ,CAAC,CAAC;GAC1E;;;;;;EAODqC,gCAAQ,GAAR,UAASvC,UAAmB,EAAEjV,IAAY;IACxC,IAAMuV,YAAY,GAAG+B,YAAY,CAACrC,UAAU,CAAC;IAC7C,OAAO,IAAIb,SAAS,CAACpU,IAAI,EAAE,IAAI8V,QAAQ,CAAC,iBAAiB,EAAEP,YAAY,CAAC,CAAC;GAC1E;;;;EAKDiC,gCAAQ,GAAR;IACE,OAAO,WAAW;GACnB;EACH,oBAAC;AAAD,CA5DA,CAAmCnD,KAAK;AA8DjC,IAAMwD,cAAc,GAAG,IAAIL,aAAa,EAAE;;ACpGjD;;;;;;;;;;;;;;;;AAuCA;;;AAGA;;;;;;;;;EAcE,2BACErD,IAA0C,EAC1C2D,QAAkB,EAClBC,UAAyB,EACjBC,UAAmB,EACnBC,gBAAmD;IAAnD;MAAAA,uBAAmD;IAAA;IADnD,eAAU,GAAVD,UAAU;IACV,qBAAgB,GAAhBC,gBAAgB;;;;IAflB,eAAU,GAAgD,EAAE;IAiBlE,IAAIhN,GAAG,GAAG,CAAC;IACX,OAAO,CAACkJ,IAAI,CAACsB,OAAO,EAAE,EAAE;MACtBtB,IAAI,GAAGA,IAAsB;MAC7BlJ,GAAG,GAAG6M,QAAQ,GAAGC,UAAU,CAAC5D,IAAI,CAAC5U,GAAG,EAAEuY,QAAQ,CAAC,GAAG,CAAC;;MAEnD,IAAIE,UAAU,EAAE;QACd/M,GAAG,IAAI,CAAC,CAAC;;MAGX,IAAIA,GAAG,GAAG,CAAC,EAAE;;QAEX,IAAI,IAAI,CAAC+M,UAAU,EAAE;UACnB7D,IAAI,GAAGA,IAAI,CAACtJ,IAAI;SACjB,MAAM;UACLsJ,IAAI,GAAGA,IAAI,CAACrJ,KAAK;;OAEpB,MAAM,IAAIG,GAAG,KAAK,CAAC,EAAE;;QAEpB,IAAI,CAACiN,UAAU,CAACrS,IAAI,CAACsO,IAAI,CAAC;QAC1B;OACD,MAAM;;QAEL,IAAI,CAAC+D,UAAU,CAACrS,IAAI,CAACsO,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC6D,UAAU,EAAE;UACnB7D,IAAI,GAAGA,IAAI,CAACrJ,KAAK;SAClB,MAAM;UACLqJ,IAAI,GAAGA,IAAI,CAACtJ,IAAI;;;;;EAMxBsN,mCAAO,GAAP;IACE,IAAI,IAAI,CAACD,UAAU,CAAClW,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,IAAI;;IAGb,IAAImS,IAAI,GAAG,IAAI,CAAC+D,UAAU,CAACpM,GAAG,EAAE;IAChC,IAAIsM,MAAS;IACb,IAAI,IAAI,CAACH,gBAAgB,EAAE;MACzBG,MAAM,GAAG,IAAI,CAACH,gBAAgB,CAAC9D,IAAI,CAAC5U,GAAG,EAAE4U,IAAI,CAAC3U,KAAK,CAAC;KACrD,MAAM;MACL4Y,MAAM,GAAI;QAAE7Y,GAAG,EAAE4U,IAAI,CAAC5U,GAAG;QAAEC,KAAK,EAAE2U,IAAI,CAAC3U;MAAK,CAAmB;;IAGjE,IAAI,IAAI,CAACwY,UAAU,EAAE;MACnB7D,IAAI,GAAGA,IAAI,CAACtJ,IAAI;MAChB,OAAO,CAACsJ,IAAI,CAACsB,OAAO,EAAE,EAAE;QACtB,IAAI,CAACyC,UAAU,CAACrS,IAAI,CAACsO,IAAI,CAAC;QAC1BA,IAAI,GAAGA,IAAI,CAACrJ,KAAK;;KAEpB,MAAM;MACLqJ,IAAI,GAAGA,IAAI,CAACrJ,KAAK;MACjB,OAAO,CAACqJ,IAAI,CAACsB,OAAO,EAAE,EAAE;QACtB,IAAI,CAACyC,UAAU,CAACrS,IAAI,CAACsO,IAAI,CAAC;QAC1BA,IAAI,GAAGA,IAAI,CAACtJ,IAAI;;;IAIpB,OAAOuN,MAAM;GACd;EAEDD,mCAAO,GAAP;IACE,OAAO,IAAI,CAACD,UAAU,CAAClW,MAAM,GAAG,CAAC;GAClC;EAEDmW,gCAAI,GAAJ;IACE,IAAI,IAAI,CAACD,UAAU,CAAClW,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,IAAI;;IAGb,IAAMmS,IAAI,GAAG,IAAI,CAAC+D,UAAU,CAAC,IAAI,CAACA,UAAU,CAAClW,MAAM,GAAG,CAAC,CAAC;IACxD,IAAI,IAAI,CAACiW,gBAAgB,EAAE;MACzB,OAAO,IAAI,CAACA,gBAAgB,CAAC9D,IAAI,CAAC5U,GAAG,EAAE4U,IAAI,CAAC3U,KAAK,CAAC;KACnD,MAAM;MACL,OAAQ;QAAED,GAAG,EAAE4U,IAAI,CAAC5U,GAAG;QAAEC,KAAK,EAAE2U,IAAI,CAAC3U;MAAK,CAAmB;;GAEhE;EACH,wBAAC;AAAD,CAAC;AAED;;;AAGA;;;;;;;;;EAaE,kBACSD,GAAM,EACNC,KAAQ,EACf6Y,KAAqB,EACrBxN,IAAkD,EAClDC,KAAmD;IAJ5C,QAAG,GAAHvL,GAAG;IACH,UAAK,GAALC,KAAK;IAKZ,IAAI,CAAC6Y,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGC,QAAQ,CAACC,GAAG;IACjD,IAAI,CAAC1N,IAAI,GACPA,IAAI,IAAI,IAAI,GAAGA,IAAI,GAAI2N,SAAS,CAACzC,UAAkC;IACrE,IAAI,CAACjL,KAAK,GACRA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAI0N,SAAS,CAACzC,UAAkC;;;;;;;;;;;;EAgBzEuC,uBAAI,GAAJ,UACE/Y,GAAa,EACbC,KAAe,EACf6Y,KAAqB,EACrBxN,IAAiD,EACjDC,KAAkD;IAElD,OAAO,IAAIwN,QAAQ,CACjB/Y,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACA,GAAG,EAC5BC,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,IAAI,CAACA,KAAK,EAClC6Y,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,IAAI,CAACA,KAAK,EAClCxN,IAAI,IAAI,IAAI,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI,EAC/BC,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,IAAI,CAACA,KAAK,CACnC;GACF;;;;EAKDwN,wBAAK,GAAL;IACE,OAAO,IAAI,CAACzN,IAAI,CAAC4N,KAAK,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC3N,KAAK,CAAC2N,KAAK,EAAE;GAClD;;;;EAKDH,0BAAO,GAAP;IACE,OAAO,KAAK;GACb;;;;;;;;;;EAWDA,mCAAgB,GAAhB,UAAiB7B,MAA+B;IAC9C,OACE,IAAI,CAAC5L,IAAI,CAAC6N,gBAAgB,CAACjC,MAAM,CAAC,IAClC,CAAC,CAACA,MAAM,CAAC,IAAI,CAAClX,GAAG,EAAE,IAAI,CAACC,KAAK,CAAC,IAC9B,IAAI,CAACsL,KAAK,CAAC4N,gBAAgB,CAACjC,MAAM,CAAC;GAEtC;;;;;;;;;EAUD6B,mCAAgB,GAAhB,UAAiB7B,MAA4B;IAC3C,OACE,IAAI,CAAC3L,KAAK,CAAC6N,gBAAgB,CAAClC,MAAM,CAAC,IACnCA,MAAM,CAAC,IAAI,CAAClX,GAAG,EAAE,IAAI,CAACC,KAAK,CAAC,IAC5B,IAAI,CAACqL,IAAI,CAAC8N,gBAAgB,CAAClC,MAAM,CAAC;GAErC;;;;;EAMO6B,uBAAI,GAAZ;IACE,IAAI,IAAI,CAACzN,IAAI,CAAC4K,OAAO,EAAE,EAAE;MACvB,OAAO,IAAI;KACZ,MAAM;MACL,OAAQ,IAAI,CAAC5K,IAAuB,CAAC+N,IAAI,EAAE;;GAE9C;;;;EAKDN,yBAAM,GAAN;IACE,OAAO,IAAI,CAACM,IAAI,EAAE,CAACrZ,GAAG;GACvB;;;;EAKD+Y,yBAAM,GAAN;IACE,IAAI,IAAI,CAACxN,KAAK,CAAC2K,OAAO,EAAE,EAAE;MACxB,OAAO,IAAI,CAAClW,GAAG;KAChB,MAAM;MACL,OAAO,IAAI,CAACuL,KAAK,CAAC+N,MAAM,EAAE;;GAE7B;;;;;;;;EASDP,yBAAM,GAAN,UAAO/Y,GAAM,EAAEC,KAAQ,EAAEuY,UAAyB;IAChD,IAAIe,CAAC,GAAmB,IAAI;IAC5B,IAAM7N,GAAG,GAAG8M,UAAU,CAACxY,GAAG,EAAEuZ,CAAC,CAACvZ,GAAG,CAAC;IAClC,IAAI0L,GAAG,GAAG,CAAC,EAAE;MACX6N,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAED,CAAC,CAACjO,IAAI,CAACmO,MAAM,CAACzZ,GAAG,EAAEC,KAAK,EAAEuY,UAAU,CAAC,EAAE,IAAI,CAAC;KAC1E,MAAM,IAAI9M,GAAG,KAAK,CAAC,EAAE;MACpB6N,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,IAAI,EAAEvZ,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;KAC1C,MAAM;MACLsZ,CAAC,GAAGA,CAAC,CAACC,IAAI,CACR,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJD,CAAC,CAAChO,KAAK,CAACkO,MAAM,CAACzZ,GAAG,EAAEC,KAAK,EAAEuY,UAAU,CAAC,CACvC;;IAEH,OAAOe,CAAC,CAACG,MAAM,EAAE;GAClB;;;;;EAMOX,6BAAU,GAAlB;IACE,IAAI,IAAI,CAACzN,IAAI,CAAC4K,OAAO,EAAE,EAAE;MACvB,OAAO+C,SAAS,CAACzC,UAAiC;;IAEpD,IAAI+C,CAAC,GAAmB,IAAI;IAC5B,IAAI,CAACA,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,IAAI,CAACJ,CAAC,CAACjO,IAAI,CAACA,IAAI,CAACqO,MAAM,EAAE,EAAE;MAC7CJ,CAAC,GAAGA,CAAC,CAACK,YAAY,EAAE;;IAEtBL,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAGD,CAAC,CAACjO,IAAuB,CAACuO,UAAU,EAAE,EAAE,IAAI,CAAC;IAC3E,OAAON,CAAC,CAACG,MAAM,EAAE;GAClB;;;;;;EAODX,yBAAM,GAAN,UACE/Y,GAAM,EACNwY,UAAyB;IAEzB,IAAIe,CAAC,EAAEO,QAAQ;IACfP,CAAC,GAAG,IAAI;IACR,IAAIf,UAAU,CAACxY,GAAG,EAAEuZ,CAAC,CAACvZ,GAAG,CAAC,GAAG,CAAC,EAAE;MAC9B,IAAI,CAACuZ,CAAC,CAACjO,IAAI,CAAC4K,OAAO,EAAE,IAAI,CAACqD,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,IAAI,CAACJ,CAAC,CAACjO,IAAI,CAACA,IAAI,CAACqO,MAAM,EAAE,EAAE;QAClEJ,CAAC,GAAGA,CAAC,CAACK,YAAY,EAAE;;MAEtBL,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAED,CAAC,CAACjO,IAAI,CAAC5H,MAAM,CAAC1D,GAAG,EAAEwY,UAAU,CAAC,EAAE,IAAI,CAAC;KACnE,MAAM;MACL,IAAIe,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,EAAE;QACnBJ,CAAC,GAAGA,CAAC,CAACQ,YAAY,EAAE;;MAEtB,IAAI,CAACR,CAAC,CAAChO,KAAK,CAAC2K,OAAO,EAAE,IAAI,CAACqD,CAAC,CAAChO,KAAK,CAACoO,MAAM,EAAE,IAAI,CAACJ,CAAC,CAAChO,KAAK,CAACD,IAAI,CAACqO,MAAM,EAAE,EAAE;QACrEJ,CAAC,GAAGA,CAAC,CAACS,aAAa,EAAE;;MAEvB,IAAIxB,UAAU,CAACxY,GAAG,EAAEuZ,CAAC,CAACvZ,GAAG,CAAC,KAAK,CAAC,EAAE;QAChC,IAAIuZ,CAAC,CAAChO,KAAK,CAAC2K,OAAO,EAAE,EAAE;UACrB,OAAO+C,SAAS,CAACzC,UAAiC;SACnD,MAAM;UACLsD,QAAQ,GAAIP,CAAC,CAAChO,KAAwB,CAAC8N,IAAI,EAAE;UAC7CE,CAAC,GAAGA,CAAC,CAACC,IAAI,CACRM,QAAQ,CAAC9Z,GAAG,EACZ8Z,QAAQ,CAAC7Z,KAAK,EACd,IAAI,EACJ,IAAI,EACHsZ,CAAC,CAAChO,KAAwB,CAACsO,UAAU,EAAE,CACzC;;;MAGLN,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAED,CAAC,CAAChO,KAAK,CAAC7H,MAAM,CAAC1D,GAAG,EAAEwY,UAAU,CAAC,CAAC;;IAErE,OAAOe,CAAC,CAACG,MAAM,EAAE;GAClB;;;;;EAMDX,yBAAM,GAAN;IACE,OAAO,IAAI,CAACD,KAAK;GAClB;;;;;EAMOC,yBAAM,GAAd;IACE,IAAIQ,CAAC,GAAmB,IAAI;IAC5B,IAAIA,CAAC,CAAChO,KAAK,CAACoO,MAAM,EAAE,IAAI,CAACJ,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,EAAE;MACxCJ,CAAC,GAAGA,CAAC,CAACU,WAAW,EAAE;;IAErB,IAAIV,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,IAAIJ,CAAC,CAACjO,IAAI,CAACA,IAAI,CAACqO,MAAM,EAAE,EAAE;MAC3CJ,CAAC,GAAGA,CAAC,CAACQ,YAAY,EAAE;;IAEtB,IAAIR,CAAC,CAACjO,IAAI,CAACqO,MAAM,EAAE,IAAIJ,CAAC,CAAChO,KAAK,CAACoO,MAAM,EAAE,EAAE;MACvCJ,CAAC,GAAGA,CAAC,CAACW,UAAU,EAAE;;IAEpB,OAAOX,CAAC;GACT;;;;;EAMOR,+BAAY,GAApB;IACE,IAAIQ,CAAC,GAAG,IAAI,CAACW,UAAU,EAAE;IACzB,IAAIX,CAAC,CAAChO,KAAK,CAACD,IAAI,CAACqO,MAAM,EAAE,EAAE;MACzBJ,CAAC,GAAGA,CAAC,CAACC,IAAI,CACR,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACHD,CAAC,CAAChO,KAAwB,CAACwO,YAAY,EAAE,CAC3C;MACDR,CAAC,GAAGA,CAAC,CAACU,WAAW,EAAE;MACnBV,CAAC,GAAGA,CAAC,CAACW,UAAU,EAAE;;IAEpB,OAAOX,CAAC;GACT;;;;;EAMOR,gCAAa,GAArB;IACE,IAAIQ,CAAC,GAAG,IAAI,CAACW,UAAU,EAAE;IACzB,IAAIX,CAAC,CAACjO,IAAI,CAACA,IAAI,CAACqO,MAAM,EAAE,EAAE;MACxBJ,CAAC,GAAGA,CAAC,CAACQ,YAAY,EAAE;MACpBR,CAAC,GAAGA,CAAC,CAACW,UAAU,EAAE;;IAEpB,OAAOX,CAAC;GACT;;;;;EAMOR,8BAAW,GAAnB;IACE,IAAMoB,EAAE,GAAG,IAAI,CAACX,IAAI,CAAC,IAAI,EAAE,IAAI,EAAET,QAAQ,CAACC,GAAG,EAAE,IAAI,EAAE,IAAI,CAACzN,KAAK,CAACD,IAAI,CAAC;IACrE,OAAO,IAAI,CAACC,KAAK,CAACiO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAACV,KAAK,EAAEqB,EAAE,EAAE,IAAI,CAAmB;GAC3E;;;;;EAMOpB,+BAAY,GAApB;IACE,IAAMqB,EAAE,GAAG,IAAI,CAACZ,IAAI,CAAC,IAAI,EAAE,IAAI,EAAET,QAAQ,CAACC,GAAG,EAAE,IAAI,CAAC1N,IAAI,CAACC,KAAK,EAAE,IAAI,CAAC;IACrE,OAAO,IAAI,CAACD,IAAI,CAACkO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAACV,KAAK,EAAE,IAAI,EAAEsB,EAAE,CAAmB;GAC1E;;;;;EAMOrB,6BAAU,GAAlB;IACE,IAAMzN,IAAI,GAAG,IAAI,CAACA,IAAI,CAACkO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAClO,IAAI,CAACwN,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IACrE,IAAMvN,KAAK,GAAG,IAAI,CAACA,KAAK,CAACiO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAACjO,KAAK,CAACuN,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IACxE,OAAO,IAAI,CAACU,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAACV,KAAK,EAAExN,IAAI,EAAEC,KAAK,CAAC;GACvD;;;;;;;EAQOwN,iCAAc,GAAtB;IACE,IAAMsB,UAAU,GAAG,IAAI,CAACC,MAAM,EAAE;IAChC,OAAOlV,IAAI,CAACsC,GAAG,CAAC,GAAG,EAAE2S,UAAU,CAAC,IAAI,IAAI,CAACnB,KAAK,EAAE,GAAG,CAAC;GACrD;;;;;EAMDH,yBAAM,GAAN;IACE,IAAI,IAAI,CAACY,MAAM,EAAE,IAAI,IAAI,CAACrO,IAAI,CAACqO,MAAM,EAAE,EAAE;MACvC,MAAM,IAAI3V,KAAK,CACb,yBAAyB,GAAG,IAAI,CAAChE,GAAG,GAAG,GAAG,GAAG,IAAI,CAACC,KAAK,GAAG,GAAG,CAC9D;;IAEH,IAAI,IAAI,CAACsL,KAAK,CAACoO,MAAM,EAAE,EAAE;MACvB,MAAM,IAAI3V,KAAK,CACb,kBAAkB,GAAG,IAAI,CAAChE,GAAG,GAAG,GAAG,GAAG,IAAI,CAACC,KAAK,GAAG,UAAU,CAC9D;;IAEH,IAAMoa,UAAU,GAAG,IAAI,CAAC/O,IAAI,CAACgP,MAAM,EAAE;IACrC,IAAID,UAAU,KAAK,IAAI,CAAC9O,KAAK,CAAC+O,MAAM,EAAE,EAAE;MACtC,MAAM,IAAItW,KAAK,CAAC,qBAAqB,CAAC;KACvC,MAAM;MACL,OAAOqW,UAAU,IAAI,IAAI,CAACV,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;;GAE9C;EArTMZ,YAAG,GAAG,IAAI;EACVA,cAAK,GAAG,KAAK;EAqTtB,eAAC;CAjVD;AAmVA;;;AAGA;EAAA;;;;;;EAYEwB,4BAAI,GAAJ,UACEva,GAAa,EACbC,KAAe,EACf6Y,KAAqB,EACrBxN,IAAiD,EACjDC,KAAkD;IAElD,OAAO,IAAI;GACZ;;;;;;;;;EAUDgP,8BAAM,GAAN,UAAOva,GAAM,EAAEC,KAAQ,EAAEuY,UAAyB;IAChD,OAAO,IAAIO,QAAQ,CAAC/Y,GAAG,EAAEC,KAAK,EAAE,IAAI,CAAC;GACtC;;;;;;;;EASDsa,8BAAM,GAAN,UAAOva,GAAM,EAAEwY,UAAyB;IACtC,OAAO,IAAI;GACZ;;;;EAKD+B,6BAAK,GAAL;IACE,OAAO,CAAC;GACT;;;;EAKDA,+BAAO,GAAP;IACE,OAAO,IAAI;GACZ;;;;;;;;;EAUDA,wCAAgB,GAAhB,UAAiBrD,MAA+B;IAC9C,OAAO,KAAK;GACb;;;;;;;;;EAUDqD,wCAAgB,GAAhB,UAAiBrD,MAA4B;IAC3C,OAAO,KAAK;GACb;;;;EAKDqD,8BAAM,GAAN;IACE,OAAO,IAAI;GACZ;;;;EAKDA,8BAAM,GAAN;IACE,OAAO,IAAI;GACZ;;;;;EAMDA,8BAAM,GAAN;IACE,OAAO,CAAC;GACT;;;;;EAMDA,8BAAM,GAAN;IACE,OAAO,KAAK;GACb;EACH,oBAAC;AAAD,CAAC;AAED;;;;AAIA;;;;;;EAYE,mBACUC,WAA0B,EAC1BC,KAE6D;IAF7D;MAAAA,QAEkBxB,SAAS,CAACzC,UAAiC;IAAA;IAH7D,gBAAW,GAAXgE,WAAW;IACX,UAAK,GAALC,KAAK;;;;;;;;;;EAafxB,0BAAM,GAAN,UAAOjZ,GAAM,EAAEC,KAAQ;IACrB,OAAO,IAAIgZ,SAAS,CAClB,IAAI,CAACuB,WAAW,EAChB,IAAI,CAACC,KAAK,CACPhB,MAAM,CAACzZ,GAAG,EAAEC,KAAK,EAAE,IAAI,CAACua,WAAW,CAAC,CACpChB,IAAI,CAAC,IAAI,EAAE,IAAI,EAAET,QAAQ,CAAC2B,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAChD;GACF;;;;;;;EAQDzB,0BAAM,GAAN,UAAOjZ,GAAM;IACX,OAAO,IAAIiZ,SAAS,CAClB,IAAI,CAACuB,WAAW,EAChB,IAAI,CAACC,KAAK,CACP/W,MAAM,CAAC1D,GAAG,EAAE,IAAI,CAACwa,WAAW,CAAC,CAC7BhB,IAAI,CAAC,IAAI,EAAE,IAAI,EAAET,QAAQ,CAAC2B,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAChD;GACF;;;;;;;;EASDzB,uBAAG,GAAH,UAAIjZ,GAAM;IACR,IAAI0L,GAAG;IACP,IAAIkJ,IAAI,GAAG,IAAI,CAAC6F,KAAK;IACrB,OAAO,CAAC7F,IAAI,CAACsB,OAAO,EAAE,EAAE;MACtBxK,GAAG,GAAG,IAAI,CAAC8O,WAAW,CAACxa,GAAG,EAAE4U,IAAI,CAAC5U,GAAG,CAAC;MACrC,IAAI0L,GAAG,KAAK,CAAC,EAAE;QACb,OAAOkJ,IAAI,CAAC3U,KAAK;OAClB,MAAM,IAAIyL,GAAG,GAAG,CAAC,EAAE;QAClBkJ,IAAI,GAAGA,IAAI,CAACtJ,IAAI;OACjB,MAAM,IAAII,GAAG,GAAG,CAAC,EAAE;QAClBkJ,IAAI,GAAGA,IAAI,CAACrJ,KAAK;;;IAGrB,OAAO,IAAI;GACZ;;;;;;EAOD0N,qCAAiB,GAAjB,UAAkBjZ,GAAM;IACtB,IAAI0L,GAAG;MACLkJ,IAAI,GAAG,IAAI,CAAC6F,KAAK;MACjBE,WAAW,GAAG,IAAI;IACpB,OAAO,CAAC/F,IAAI,CAACsB,OAAO,EAAE,EAAE;MACtBxK,GAAG,GAAG,IAAI,CAAC8O,WAAW,CAACxa,GAAG,EAAE4U,IAAI,CAAC5U,GAAG,CAAC;MACrC,IAAI0L,GAAG,KAAK,CAAC,EAAE;QACb,IAAI,CAACkJ,IAAI,CAACtJ,IAAI,CAAC4K,OAAO,EAAE,EAAE;UACxBtB,IAAI,GAAGA,IAAI,CAACtJ,IAAI;UAChB,OAAO,CAACsJ,IAAI,CAACrJ,KAAK,CAAC2K,OAAO,EAAE,EAAE;YAC5BtB,IAAI,GAAGA,IAAI,CAACrJ,KAAK;;UAEnB,OAAOqJ,IAAI,CAAC5U,GAAG;SAChB,MAAM,IAAI2a,WAAW,EAAE;UACtB,OAAOA,WAAW,CAAC3a,GAAG;SACvB,MAAM;UACL,OAAO,IAAI,CAAC;;OAEf,MAAM,IAAI0L,GAAG,GAAG,CAAC,EAAE;QAClBkJ,IAAI,GAAGA,IAAI,CAACtJ,IAAI;OACjB,MAAM,IAAII,GAAG,GAAG,CAAC,EAAE;QAClBiP,WAAW,GAAG/F,IAAI;QAClBA,IAAI,GAAGA,IAAI,CAACrJ,KAAK;;;IAIrB,MAAM,IAAIvH,KAAK,CACb,uEAAuE,CACxE;GACF;;;;EAKDiV,2BAAO,GAAP;IACE,OAAO,IAAI,CAACwB,KAAK,CAACvE,OAAO,EAAE;GAC5B;;;;EAKD+C,yBAAK,GAAL;IACE,OAAO,IAAI,CAACwB,KAAK,CAACvB,KAAK,EAAE;GAC1B;;;;EAKDD,0BAAM,GAAN;IACE,OAAO,IAAI,CAACwB,KAAK,CAACG,MAAM,EAAE;GAC3B;;;;EAKD3B,0BAAM,GAAN;IACE,OAAO,IAAI,CAACwB,KAAK,CAACnB,MAAM,EAAE;GAC3B;;;;;;;;;;EAWDL,oCAAgB,GAAhB,UAAiB/B,MAA+B;IAC9C,OAAO,IAAI,CAACuD,KAAK,CAACtB,gBAAgB,CAACjC,MAAM,CAAC;GAC3C;;;;;;;;;EAUD+B,oCAAgB,GAAhB,UAAiB/B,MAA4B;IAC3C,OAAO,IAAI,CAACuD,KAAK,CAACrB,gBAAgB,CAAClC,MAAM,CAAC;GAC3C;;;;;;;EAQD+B,+BAAW,GAAX,UACE4B,eAAmC;IAEnC,OAAO,IAAIjC,iBAAiB,CAC1B,IAAI,CAAC6B,KAAK,EACV,IAAI,EACJ,IAAI,CAACD,WAAW,EAChB,KAAK,EACLK,eAAe,CAChB;GACF;EAED5B,mCAAe,GAAf,UACEjZ,GAAM,EACN6a,eAAmC;IAEnC,OAAO,IAAIjC,iBAAiB,CAC1B,IAAI,CAAC6B,KAAK,EACVza,GAAG,EACH,IAAI,CAACwa,WAAW,EAChB,KAAK,EACLK,eAAe,CAChB;GACF;EAED5B,0CAAsB,GAAtB,UACEjZ,GAAM,EACN6a,eAAmC;IAEnC,OAAO,IAAIjC,iBAAiB,CAC1B,IAAI,CAAC6B,KAAK,EACVza,GAAG,EACH,IAAI,CAACwa,WAAW,EAChB,IAAI,EACJK,eAAe,CAChB;GACF;EAED5B,sCAAkB,GAAlB,UACE4B,eAAmC;IAEnC,OAAO,IAAIjC,iBAAiB,CAC1B,IAAI,CAAC6B,KAAK,EACV,IAAI,EACJ,IAAI,CAACD,WAAW,EAChB,IAAI,EACJK,eAAe,CAChB;GACF;;;;;EApNM5B,oBAAU,GAAG,IAAIsB,aAAa,EAAE;EAqNzC,gBAAC;CA1ND;;AC9lBA;;;;;;;;;;;;;;;;AAqBA,IAAMO,KAAK,GAAG1V,IAAI,CAAC7B,GAAG,CAAC,CAAC,CAAC;AAEzB;;;AAGA;;;;EAQE,mBAAYd,MAAc;IACxB,IAAMsY,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,GAAW;;MAE3B,eAAQ,CAAE5V,IAAI,CAAC7B,GAAG,CAACyX,GAAG,CAAC,GAAGF,KAAK,EAAU,EAAE,CAAC;KAAA;IAC9C,IAAMG,OAAO,GAAG,SAAVA,OAAO,CAAInT,IAAY;MAAK,eAAQ,CAACnF,KAAK,CAACmF,IAAI,GAAG,CAAC,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAAA;IACxE,IAAI,CAACkR,KAAK,GAAG6B,QAAQ,CAACtY,MAAM,GAAG,CAAC,CAAC;IACjC,IAAI,CAACyY,QAAQ,GAAG,IAAI,CAAChC,KAAK,GAAG,CAAC;IAC9B,IAAMiC,IAAI,GAAGF,OAAO,CAAC,IAAI,CAAC/B,KAAK,CAAC;IAChC,IAAI,CAACkC,KAAK,GAAI3Y,MAAM,GAAG,CAAC,GAAI0Y,IAAI;;;;;EAMlCE,gCAAY,GAAZ;;IAEE,IAAMxC,MAAM,GAAG,EAAE,IAAI,CAACuC,KAAK,GAAI,GAAG,IAAI,IAAI,CAACF,QAAS,CAAC;IACrD,IAAI,CAACA,QAAQ,EAAE;IACf,OAAOrC,MAAM;GACd;EACH,gBAAC;AAAD,CAAC;AAED;;;;;;;;;;;;;;;AAeO,IAAMyC,aAAa,GAAG,SAAhBA,aAAa,CACxBC,SAAsB,EACtB7P,GAA2C,EAC3C8P,KAA2B,EAC3BC,SAAkC;EAElCF,SAAS,CAAChV,IAAI,CAACmF,GAAG,CAAC;EAEnB,IAAMgQ,iBAAiB,GAAG,SAApBA,iBAAiB,CACrBC,GAAW,EACXC,IAAY;IAEZ,IAAMnZ,MAAM,GAAGmZ,IAAI,GAAGD,GAAG;IACzB,IAAIE,SAAoB;IACxB,IAAI7b,GAAM;IACV,IAAIyC,MAAM,KAAK,CAAC,EAAE;MAChB,OAAO,IAAI;KACZ,MAAM,IAAIA,MAAM,KAAK,CAAC,EAAE;MACvBoZ,SAAS,GAAGN,SAAS,CAACI,GAAG,CAAC;MAC1B3b,GAAG,GAAGwb,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,GAAKA,SAA2B;MAC9D,OAAO,IAAI9C,QAAQ,CACjB/Y,GAAG,EACF6b,SAAS,CAACjH,IAAqB,EAChCmE,QAAQ,CAAC2B,KAAK,EACd,IAAI,EACJ,IAAI,CACL;KACF,MAAM;;MAEL,IAAMoB,MAAM,GAAG3T,QAAQ,CAAE1F,MAAM,GAAG,CAAC,EAAU,EAAE,CAAC,GAAGkZ,GAAG;MACtD,IAAMrQ,IAAI,GAAGoQ,iBAAiB,CAACC,GAAG,EAAEG,MAAM,CAAC;MAC3C,IAAMvQ,KAAK,GAAGmQ,iBAAiB,CAACI,MAAM,GAAG,CAAC,EAAEF,IAAI,CAAC;MACjDC,SAAS,GAAGN,SAAS,CAACO,MAAM,CAAC;MAC7B9b,GAAG,GAAGwb,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,GAAKA,SAA2B;MAC9D,OAAO,IAAI9C,QAAQ,CACjB/Y,GAAG,EACF6b,SAAS,CAACjH,IAAqB,EAChCmE,QAAQ,CAAC2B,KAAK,EACdpP,IAAI,EACJC,KAAK,CACN;;GAEJ;EAED,IAAMwQ,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAaC,MAAiB;IAClD,IAAIpH,IAAI,GAAmB,IAAI;IAC/B,IAAIqH,IAAI,GAAG,IAAI;IACf,IAAIhF,KAAK,GAAGsE,SAAS,CAAC9Y,MAAM;IAE5B,IAAMyZ,YAAY,GAAG,SAAfA,YAAY,CAAaC,SAAiB,EAAErD,KAAc;MAC9D,IAAM6C,GAAG,GAAG1E,KAAK,GAAGkF,SAAS;MAC7B,IAAMP,IAAI,GAAG3E,KAAK;MAClBA,KAAK,IAAIkF,SAAS;MAClB,IAAMC,SAAS,GAAGV,iBAAiB,CAACC,GAAG,GAAG,CAAC,EAAEC,IAAI,CAAC;MAClD,IAAMC,SAAS,GAAGN,SAAS,CAACI,GAAG,CAAC;MAChC,IAAM3b,GAAG,GAAMwb,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,GAAKA,SAA2B;MACvEQ,aAAa,CACX,IAAItD,QAAQ,CACV/Y,GAAG,EACF6b,SAAS,CAACjH,IAAqB,EAChCkE,KAAK,EACL,IAAI,EACJsD,SAAS,CACV,CACF;KACF;IAED,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAaC,OAAuB;MACrD,IAAI1H,IAAI,EAAE;QACRA,IAAI,CAACtJ,IAAI,GAAGgR,OAAO;QACnB1H,IAAI,GAAG0H,OAAO;OACf,MAAM;QACLL,IAAI,GAAGK,OAAO;QACd1H,IAAI,GAAG0H,OAAO;;KAEjB;IAED,KAAK,IAAI9Z,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwZ,MAAM,CAAC9C,KAAK,EAAE,EAAE1W,CAAC,EAAE;MACrC,IAAM+Z,KAAK,GAAGP,MAAM,CAACQ,YAAY,EAAE;;MAEnC,IAAML,SAAS,GAAG/W,IAAI,CAACsC,GAAG,CAAC,CAAC,EAAEsU,MAAM,CAAC9C,KAAK,IAAI1W,CAAC,GAAG,CAAC,CAAC,CAAC;MACrD,IAAI+Z,KAAK,EAAE;QACTL,YAAY,CAACC,SAAS,EAAEpD,QAAQ,CAAC2B,KAAK,CAAC;OACxC,MAAM;;QAELwB,YAAY,CAACC,SAAS,EAAEpD,QAAQ,CAAC2B,KAAK,CAAC;QACvCwB,YAAY,CAACC,SAAS,EAAEpD,QAAQ,CAACC,GAAG,CAAC;;;IAGzC,OAAOiD,IAAI;GACZ;EAED,IAAMD,MAAM,GAAG,IAAIX,SAAS,CAACE,SAAS,CAAC9Y,MAAM,CAAC;EAC9C,IAAMwZ,IAAI,GAAGF,gBAAgB,CAACC,MAAM,CAAC;;EAErC,OAAO,IAAI/C,SAAS,CAAOwC,SAAS,IAAK/P,GAAW,EAAEuQ,IAAI,CAAC;AAC7D,CAAC;;ACvKD;;;;;;;;;;;;;;;;AA0BA,IAAIQ,gBAA0B;AAE9B,IAAMC,cAAc,GAAG,EAAE;AAEzB;EAkBE,kBACUC,QAEP,EACOC,SAAiC;IAHjC,aAAQ,GAARD,QAAQ;IAGR,cAAS,GAATC,SAAS;;EAlBnBvS,sBAAWwS,mBAAO;;;;SAAlB;MACE1Z,MAAM,CACJuZ,cAAc,IAAIpE,cAAc,EAChC,qCAAqC,CACtC;MACDmE,gBAAgB,GACdA,gBAAgB,IAChB,IAAII,QAAQ,CACV;QAAE,WAAW,EAAEH;MAAc,CAAE,EAC/B;QAAE,WAAW,EAAEpE;MAAc,CAAE,CAChC;MACH,OAAOmE,gBAAgB;KACxB;;;;EASDI,sBAAG,GAAH,UAAIC,QAAgB;IAClB,IAAMC,SAAS,GAAGC,OAAO,CAAC,IAAI,CAACL,QAAQ,EAAEG,QAAQ,CAAC;IAClD,IAAI,CAACC,SAAS,EAAE;MACd,MAAM,IAAI/Y,KAAK,CAAC,uBAAuB,GAAG8Y,QAAQ,CAAC;;IAGrD,IAAIC,SAAS,YAAY9D,SAAS,EAAE;MAClC,OAAO8D,SAAS;KACjB,MAAM;;;MAGL,OAAO,IAAI;;GAEd;EAEDF,2BAAQ,GAAR,UAASI,eAAsB;IAC7B,OAAOnc,QAAQ,CAAC,IAAI,CAAC8b,SAAS,EAAEK,eAAe,CAACtc,QAAQ,EAAE,CAAC;GAC5D;EAEDkc,2BAAQ,GAAR,UACEI,eAAsB,EACtBC,gBAAyC;IAEzC/Z,MAAM,CACJ8Z,eAAe,KAAKtH,SAAS,EAC7B,qEAAqE,CACtE;IACD,IAAM4F,SAAS,GAAG,EAAE;IACpB,IAAI4B,eAAe,GAAG,KAAK;IAC3B,IAAMC,IAAI,GAAGF,gBAAgB,CAACG,WAAW,CAACxI,SAAS,CAACyI,IAAI,CAAC;IACzD,IAAIhJ,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;IACzB,OAAOjJ,IAAI,EAAE;MACX6I,eAAe,GACbA,eAAe,IAAIF,eAAe,CAACO,WAAW,CAAClJ,IAAI,CAACM,IAAI,CAAC;MAC3D2G,SAAS,CAACjV,IAAI,CAACgO,IAAI,CAAC;MACpBA,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;;IAEvB,IAAIE,QAAQ;IACZ,IAAIN,eAAe,EAAE;MACnBM,QAAQ,GAAGnC,aAAa,CAACC,SAAS,EAAE0B,eAAe,CAACS,UAAU,EAAE,CAAC;KAClE,MAAM;MACLD,QAAQ,GAAGf,cAAc;;IAE3B,IAAMiB,SAAS,GAAGV,eAAe,CAACtc,QAAQ,EAAE;IAC5C,IAAMid,WAAW,gBAAQ,IAAI,CAAChB,SAAS,CAAE;IACzCgB,WAAW,CAACD,SAAS,CAAC,GAAGV,eAAe;IACxC,IAAMY,UAAU,gBAAQ,IAAI,CAAClB,QAAQ,CAAE;IACvCkB,UAAU,CAACF,SAAS,CAAC,GAAGF,QAAQ;IAChC,OAAO,IAAIZ,QAAQ,CAACgB,UAAU,EAAED,WAAW,CAAC;GAC7C;;;;EAKDf,+BAAY,GAAZ,UACEhB,SAAoB,EACpBqB,gBAAyC;IAF3C;IAIE,IAAMW,UAAU,GAAGC,GAAG,CACpB,IAAI,CAACnB,QAAQ,EACb,UAACoB,eAA2C,EAAEJ,SAAiB;MAC7D,IAAM1G,KAAK,GAAG+F,OAAO,CAACgB,KAAI,CAACpB,SAAS,EAAEe,SAAS,CAAC;MAChDxa,MAAM,CAAC8T,KAAK,EAAE,mCAAmC,GAAG0G,SAAS,CAAC;MAC9D,IAAII,eAAe,KAAKrB,cAAc,EAAE;;QAEtC,IAAIzF,KAAK,CAACuG,WAAW,CAAC3B,SAAS,CAACjH,IAAI,CAAC,EAAE;;UAErC,IAAM2G,SAAS,GAAG,EAAE;UACpB,IAAM6B,IAAI,GAAGF,gBAAgB,CAACG,WAAW,CAACxI,SAAS,CAACyI,IAAI,CAAC;UACzD,IAAIhJ,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;UACzB,OAAOjJ,IAAI,EAAE;YACX,IAAIA,IAAI,CAAC7T,IAAI,KAAKob,SAAS,CAACpb,IAAI,EAAE;cAChC8a,SAAS,CAACjV,IAAI,CAACgO,IAAI,CAAC;;YAEtBA,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;;UAEvBhC,SAAS,CAACjV,IAAI,CAACuV,SAAS,CAAC;UACzB,OAAOP,aAAa,CAACC,SAAS,EAAEtE,KAAK,CAACyG,UAAU,EAAE,CAAC;SACpD,MAAM;;UAEL,OAAOhB,cAAc;;OAExB,MAAM;QACL,IAAMuB,YAAY,GAAGf,gBAAgB,CAACvZ,GAAG,CAACkY,SAAS,CAACpb,IAAI,CAAC;QACzD,IAAIyd,WAAW,GAAGH,eAAe;QACjC,IAAIE,YAAY,EAAE;UAChBC,WAAW,GAAGA,WAAW,CAACxa,MAAM,CAC9B,IAAImR,SAAS,CAACgH,SAAS,CAACpb,IAAI,EAAEwd,YAAY,CAAC,CAC5C;;QAEH,OAAOC,WAAW,CAACzE,MAAM,CAACoC,SAAS,EAAEA,SAAS,CAACjH,IAAI,CAAC;;KAEvD,CACF;IACD,OAAO,IAAIiI,QAAQ,CAACgB,UAAU,EAAE,IAAI,CAACjB,SAAS,CAAC;GAChD;;;;EAKDC,oCAAiB,GAAjB,UACEhB,SAAoB,EACpBqB,gBAAyC;IAEzC,IAAMW,UAAU,GAAGC,GAAG,CACpB,IAAI,CAACnB,QAAQ,EACb,UAACoB,eAA2C;MAC1C,IAAIA,eAAe,KAAKrB,cAAc,EAAE;;QAEtC,OAAOqB,eAAe;OACvB,MAAM;QACL,IAAME,YAAY,GAAGf,gBAAgB,CAACvZ,GAAG,CAACkY,SAAS,CAACpb,IAAI,CAAC;QACzD,IAAIwd,YAAY,EAAE;UAChB,OAAOF,eAAe,CAACra,MAAM,CAC3B,IAAImR,SAAS,CAACgH,SAAS,CAACpb,IAAI,EAAEwd,YAAY,CAAC,CAC5C;SACF,MAAM;;UAEL,OAAOF,eAAe;;;KAG3B,CACF;IACD,OAAO,IAAIlB,QAAQ,CAACgB,UAAU,EAAE,IAAI,CAACjB,SAAS,CAAC;GAChD;EACH,eAAC;AAAD,CAAC;;ACpLD;;;;;;;;;;;;;;;;SAoBgBuB,oBAAoB,CAAC7S,IAAe,EAAEC,KAAgB;EACpE,OAAO7F,WAAW,CAAC4F,IAAI,CAAC7K,IAAI,EAAE8K,KAAK,CAAC9K,IAAI,CAAC;AAC3C;SAEgB2d,eAAe,CAAC9S,IAAY,EAAEC,KAAa;EACzD,OAAO7F,WAAW,CAAC4F,IAAI,EAAEC,KAAK,CAAC;AACjC;;AC1BA;;;;;;;;;;;;;;;;AA0CA;AAEA,IAAIiL,UAAwB;AAE5B;;;;;;;;AAQA;;;;;;;;EAqBE,sBACmB6H,SAAkC,EAClC/H,aAA0B,EACnCgI,SAAmB;IAFV,cAAS,GAATD,SAAS;IACT,kBAAa,GAAb/H,aAAa;IACtB,cAAS,GAATgI,SAAS;IAvBX,cAAS,GAAkB,IAAI;;;;;;IA8BrC,IAAI,IAAI,CAAChI,aAAa,EAAE;MACtBP,oBAAoB,CAAC,IAAI,CAACO,aAAa,CAAC;;IAG1C,IAAI,IAAI,CAAC+H,SAAS,CAACnI,OAAO,EAAE,EAAE;MAC5B/S,MAAM,CACJ,CAAC,IAAI,CAACmT,aAAa,IAAI,IAAI,CAACA,aAAa,CAACJ,OAAO,EAAE,EACnD,sCAAsC,CACvC;;;EApCL7L,sBAAWkU,0BAAU;SAArB;MACE,OACE/H,UAAU,KACTA,UAAU,GAAG,IAAI+H,YAAY,CAC5B,IAAItF,SAAS,CAAemF,eAAe,CAAC,EAC5C,IAAI,EACJvB,QAAQ,CAAC2B,OAAO,CACjB,CAAC;KAEL;;;;;EAgCDD,iCAAU,GAAV;IACE,OAAO,KAAK;GACb;;EAGDA,kCAAW,GAAX;IACE,OAAO,IAAI,CAACjI,aAAa,IAAIE,UAAU;GACxC;;EAGD+H,qCAAc,GAAd,UAAe9H,eAAqB;IAClC,IAAI,IAAI,CAAC4H,SAAS,CAACnI,OAAO,EAAE,EAAE;;MAE5B,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAIqI,YAAY,CAAC,IAAI,CAACF,SAAS,EAAE5H,eAAe,EAAE,IAAI,CAAC6H,SAAS,CAAC;;GAE3E;;EAGDC,wCAAiB,GAAjB,UAAkB7H,SAAiB;;IAEjC,IAAIA,SAAS,KAAK,WAAW,EAAE;MAC7B,OAAO,IAAI,CAACP,WAAW,EAAE;KAC1B,MAAM;MACL,IAAM9J,KAAK,GAAG,IAAI,CAACgS,SAAS,CAAC1a,GAAG,CAAC+S,SAAS,CAAC;MAC3C,OAAOrK,KAAK,KAAK,IAAI,GAAGmK,UAAU,GAAGnK,KAAK;;GAE7C;;EAGDkS,+BAAQ,GAAR,UAASvV,IAAU;IACjB,IAAM+N,KAAK,GAAG/N,IAAI,CAACkC,QAAQ,EAAE;IAC7B,IAAI6L,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;;IAGb,OAAO,IAAI,CAAC0H,iBAAiB,CAAC1H,KAAK,CAAC,CAAC2H,QAAQ,CAAC1V,IAAI,CAACqC,QAAQ,EAAE,CAAC;GAC/D;;EAGDkT,+BAAQ,GAAR,UAAS7H,SAAiB;IACxB,OAAO,IAAI,CAAC2H,SAAS,CAAC1a,GAAG,CAAC+S,SAAS,CAAC,KAAK,IAAI;GAC9C;;EAGD6H,2CAAoB,GAApB,UAAqB7H,SAAiB,EAAEE,YAAkB;IACxDzT,MAAM,CAACyT,YAAY,EAAE,4CAA4C,CAAC;IAClE,IAAIF,SAAS,KAAK,WAAW,EAAE;MAC7B,OAAO,IAAI,CAACG,cAAc,CAACD,YAAY,CAAC;KACzC,MAAM;MACL,IAAMiF,SAAS,GAAG,IAAIhH,SAAS,CAAC6B,SAAS,EAAEE,YAAY,CAAC;MACxD,IAAIsH,WAAW;QAAES,WAAW;MAC5B,IAAI/H,YAAY,CAACV,OAAO,EAAE,EAAE;QAC1BgI,WAAW,GAAG,IAAI,CAACG,SAAS,CAAC3a,MAAM,CAACgT,SAAS,CAAC;QAC9CiI,WAAW,GAAG,IAAI,CAACL,SAAS,CAACM,iBAAiB,CAC5C/C,SAAS,EACT,IAAI,CAACwC,SAAS,CACf;OACF,MAAM;QACLH,WAAW,GAAG,IAAI,CAACG,SAAS,CAAC5E,MAAM,CAAC/C,SAAS,EAAEE,YAAY,CAAC;QAC5D+H,WAAW,GAAG,IAAI,CAACL,SAAS,CAACO,YAAY,CAAChD,SAAS,EAAE,IAAI,CAACwC,SAAS,CAAC;;MAGtE,IAAMS,WAAW,GAAGZ,WAAW,CAAChI,OAAO,EAAE,GACrCM,UAAU,GACV,IAAI,CAACF,aAAa;MACtB,OAAO,IAAIiI,YAAY,CAACL,WAAW,EAAEY,WAAW,EAAEH,WAAW,CAAC;;GAEjE;;EAGDJ,kCAAW,GAAX,UAAYvV,IAAU,EAAE4N,YAAkB;IACxC,IAAMG,KAAK,GAAG/N,IAAI,CAACkC,QAAQ,EAAE;IAC7B,IAAI6L,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOH,YAAY;KACpB,MAAM;MACLzT,MAAM,CACJ6F,IAAI,CAACkC,QAAQ,EAAE,KAAK,WAAW,IAAIlC,IAAI,CAAC4C,SAAS,EAAE,KAAK,CAAC,EACzD,4CAA4C,CAC7C;MACD,IAAMmT,iBAAiB,GAAG,IAAI,CAACN,iBAAiB,CAAC1H,KAAK,CAAC,CAACC,WAAW,CACjEhO,IAAI,CAACqC,QAAQ,EAAE,EACfuL,YAAY,CACb;MACD,OAAO,IAAI,CAACE,oBAAoB,CAACC,KAAK,EAAEgI,iBAAiB,CAAC;;GAE7D;;EAGDR,8BAAO,GAAP;IACE,OAAO,IAAI,CAACF,SAAS,CAACnI,OAAO,EAAE;GAChC;;EAGDqI,kCAAW,GAAX;IACE,OAAO,IAAI,CAACF,SAAS,CAACnF,KAAK,EAAE;GAC9B;;EASDqF,0BAAG,GAAH,UAAIpH,YAAsB;IACxB,IAAI,IAAI,CAACjB,OAAO,EAAE,EAAE;MAClB,OAAO,IAAI;;IAGb,IAAMhQ,GAAG,GAA6B,EAAE;IACxC,IAAI8Y,OAAO,GAAG,CAAC;MACb1F,MAAM,GAAG,CAAC;MACV2F,cAAc,GAAG,IAAI;IACvB,IAAI,CAACC,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAW,EAAE2W,SAAe;MAC7DzQ,GAAG,CAAClG,GAAG,CAAC,GAAG2W,SAAS,CAACnB,GAAG,CAAC2B,YAAY,CAAC;MAEtC6H,OAAO,EAAE;MACT,IAAIC,cAAc,IAAIV,YAAY,CAACrV,eAAe,CAACX,IAAI,CAACvI,GAAG,CAAC,EAAE;QAC5DsZ,MAAM,GAAGlU,IAAI,CAAC6G,GAAG,CAACqN,MAAM,EAAE9U,MAAM,CAACxE,GAAG,CAAC,CAAC;OACvC,MAAM;QACLif,cAAc,GAAG,KAAK;;KAEzB,CAAC;IAEF,IAAI,CAAC9H,YAAY,IAAI8H,cAAc,IAAI3F,MAAM,GAAG,CAAC,GAAG0F,OAAO,EAAE;;MAE3D,IAAMG,KAAK,GAAc,EAAE;;MAE3B,KAAK,IAAMnf,GAAG,IAAIkG,GAAG,EAAE;QACrBiZ,KAAK,CAAEnf,GAAyB,CAAC,GAAGkG,GAAG,CAAClG,GAAG,CAAC;;MAG9C,OAAOmf,KAAK;KACb,MAAM;MACL,IAAIhI,YAAY,IAAI,CAAC,IAAI,CAAChB,WAAW,EAAE,CAACD,OAAO,EAAE,EAAE;QACjDhQ,GAAG,CAAC,WAAW,CAAC,GAAG,IAAI,CAACiQ,WAAW,EAAE,CAACX,GAAG,EAAE;;MAE7C,OAAOtP,GAAG;;GAEb;;EAGDqY,2BAAI,GAAJ;IACE,IAAI,IAAI,CAAClH,SAAS,KAAK,IAAI,EAAE;MAC3B,IAAI+H,QAAM,GAAG,EAAE;MACf,IAAI,CAAC,IAAI,CAACjJ,WAAW,EAAE,CAACD,OAAO,EAAE,EAAE;QACjCkJ,QAAM,IACJ,WAAW,GACXtJ,gBAAgB,CAAC,IAAI,CAACK,WAAW,EAAE,CAACX,GAAG,EAAqB,CAAC,GAC7D,GAAG;;MAGP,IAAI,CAAC0J,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAE2W,SAAS;QAC/C,IAAM0I,SAAS,GAAG1I,SAAS,CAAC2I,IAAI,EAAE;QAClC,IAAID,SAAS,KAAK,EAAE,EAAE;UACpBD,QAAM,IAAI,GAAG,GAAGpf,GAAG,GAAG,GAAG,GAAGqf,SAAS;;OAExC,CAAC;MAEF,IAAI,CAAChI,SAAS,GAAG+H,QAAM,KAAK,EAAE,GAAG,EAAE,GAAG1d,IAAI,CAAC0d,QAAM,CAAC;;IAEpD,OAAO,IAAI,CAAC/H,SAAS;GACtB;;EAGDkH,8CAAuB,GAAvB,UACE7H,SAAiB,EACjBC,SAAe,EACfM,KAAY;IAEZ,IAAMsI,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvI,KAAK,CAAC;IACrC,IAAIsI,GAAG,EAAE;MACP,IAAM7K,WAAW,GAAG6K,GAAG,CAACE,iBAAiB,CACvC,IAAI5K,SAAS,CAAC6B,SAAS,EAAEC,SAAS,CAAC,CACpC;MACD,OAAOjC,WAAW,GAAGA,WAAW,CAACjU,IAAI,GAAG,IAAI;KAC7C,MAAM;MACL,OAAO,IAAI,CAAC4d,SAAS,CAACoB,iBAAiB,CAAC/I,SAAS,CAAC;;GAErD;;;;;EAMD6H,wCAAiB,GAAjB,UAAkBtB,eAAsB;IACtC,IAAMsC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvC,eAAe,CAAC;IAC/C,IAAIsC,GAAG,EAAE;MACP,IAAM3E,MAAM,GAAG2E,GAAG,CAAC3E,MAAM,EAAE;MAC3B,OAAOA,MAAM,IAAIA,MAAM,CAACna,IAAI;KAC7B,MAAM;MACL,OAAO,IAAI,CAAC4d,SAAS,CAACzD,MAAM,EAAE;;GAEjC;;;;;EAMD2D,oCAAa,GAAb,UAActB,eAAsB;IAClC,IAAMrC,MAAM,GAAG,IAAI,CAAC8E,iBAAiB,CAACzC,eAAe,CAAC;IACtD,IAAIrC,MAAM,EAAE;MACV,OAAO,IAAI/F,SAAS,CAAC+F,MAAM,EAAE,IAAI,CAACyD,SAAS,CAAC1a,GAAG,CAACiX,MAAM,CAAC,CAAC;KACzD,MAAM;MACL,OAAO,IAAI;;GAEd;;;;;;EAOD2D,uCAAgB,GAAhB,UAAiBtB,eAAsB;IACrC,IAAMsC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvC,eAAe,CAAC;IAC/C,IAAIsC,GAAG,EAAE;MACP,IAAMjG,MAAM,GAAGiG,GAAG,CAACjG,MAAM,EAAE;MAC3B,OAAOA,MAAM,IAAIA,MAAM,CAAC7Y,IAAI;KAC7B,MAAM;MACL,OAAO,IAAI,CAAC4d,SAAS,CAAC/E,MAAM,EAAE;;GAEjC;;;;;EAMDiF,mCAAY,GAAZ,UAAatB,eAAsB;IACjC,IAAM3D,MAAM,GAAG,IAAI,CAACqG,gBAAgB,CAAC1C,eAAe,CAAC;IACrD,IAAI3D,MAAM,EAAE;MACV,OAAO,IAAIzE,SAAS,CAACyE,MAAM,EAAE,IAAI,CAAC+E,SAAS,CAAC1a,GAAG,CAAC2V,MAAM,CAAC,CAAC;KACzD,MAAM;MACL,OAAO,IAAI;;GAEd;;;;EAKDiF,mCAAY,GAAZ,UACEtH,KAAY,EACZC,MAAmD;IAEnD,IAAMqI,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvI,KAAK,CAAC;IACrC,IAAIsI,GAAG,EAAE;MACP,OAAOA,GAAG,CAACpG,gBAAgB,CAAC,qBAAW;QACrC,OAAOjC,MAAM,CAAC0I,WAAW,CAACnf,IAAI,EAAEmf,WAAW,CAAChL,IAAI,CAAC;OAClD,CAAC;KACH,MAAM;MACL,OAAO,IAAI,CAACyJ,SAAS,CAAClF,gBAAgB,CAACjC,MAAM,CAAC;;GAEjD;;;;;EAMDqH,kCAAW,GAAX,UACEtB,eAAsB;IAEtB,OAAO,IAAI,CAAC4C,eAAe,CAAC5C,eAAe,CAAC6C,OAAO,EAAE,EAAE7C,eAAe,CAAC;GACxE;;;;;;;EAQDsB,sCAAe,GAAf,UACEwB,SAAoB,EACpB9C,eAAsB;IAEtB,IAAMsC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvC,eAAe,CAAC;IAC/C,IAAIsC,GAAG,EAAE;MACP,OAAOA,GAAG,CAACM,eAAe,CAACE,SAAS,EAAE,aAAG;QAAI,UAAG;MAAA,EAAC;KAClD,MAAM;MACL,IAAMC,QAAQ,GAAG,IAAI,CAAC3B,SAAS,CAACwB,eAAe,CAC7CE,SAAS,CAACtf,IAAI,EACdoU,SAAS,CAACyI,IAAI,CACf;MACD,IAAIhJ,IAAI,GAAG0L,QAAQ,CAACC,IAAI,EAAE;MAC1B,OAAO3L,IAAI,IAAI,IAAI,IAAI2I,eAAe,CAAClI,OAAO,CAACT,IAAI,EAAEyL,SAAS,CAAC,GAAG,CAAC,EAAE;QACnEC,QAAQ,CAACzC,OAAO,EAAE;QAClBjJ,IAAI,GAAG0L,QAAQ,CAACC,IAAI,EAAE;;MAExB,OAAOD,QAAQ;;GAElB;;;;;EAMDzB,yCAAkB,GAAlB,UACEtB,eAAsB;IAEtB,OAAO,IAAI,CAACiD,sBAAsB,CAChCjD,eAAe,CAACkD,OAAO,EAAE,EACzBlD,eAAe,CAChB;GACF;;;;;;EAODsB,6CAAsB,GAAtB,UACE6B,OAAkB,EAClBnD,eAAsB;IAEtB,IAAMsC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACvC,eAAe,CAAC;IAC/C,IAAIsC,GAAG,EAAE;MACP,OAAOA,GAAG,CAACW,sBAAsB,CAACE,OAAO,EAAE,aAAG;QAC5C,OAAOpgB,GAAG;OACX,CAAC;KACH,MAAM;MACL,IAAMggB,QAAQ,GAAG,IAAI,CAAC3B,SAAS,CAAC6B,sBAAsB,CACpDE,OAAO,CAAC3f,IAAI,EACZoU,SAAS,CAACyI,IAAI,CACf;MACD,IAAIhJ,IAAI,GAAG0L,QAAQ,CAACC,IAAI,EAAE;MAC1B,OAAO3L,IAAI,IAAI,IAAI,IAAI2I,eAAe,CAAClI,OAAO,CAACT,IAAI,EAAE8L,OAAO,CAAC,GAAG,CAAC,EAAE;QACjEJ,QAAQ,CAACzC,OAAO,EAAE;QAClBjJ,IAAI,GAAG0L,QAAQ,CAACC,IAAI,EAAE;;MAExB,OAAOD,QAAQ;;GAElB;;;;EAKDzB,gCAAS,GAAT,UAAU5S,KAAmB;IAC3B,IAAI,IAAI,CAACuK,OAAO,EAAE,EAAE;MAClB,IAAIvK,KAAK,CAACuK,OAAO,EAAE,EAAE;QACnB,OAAO,CAAC;OACT,MAAM;QACL,OAAO,CAAC,CAAC;;KAEZ,MAAM,IAAIvK,KAAK,CAACsK,UAAU,EAAE,IAAItK,KAAK,CAACuK,OAAO,EAAE,EAAE;MAChD,OAAO,CAAC;KACT,MAAM,IAAIvK,KAAK,KAAKiK,UAAQ,EAAE;MAC7B,OAAO,CAAC,CAAC;KACV,MAAM;;MAEL,OAAO,CAAC;;GAEX;;;;EAKD2I,gCAAS,GAAT,UAAUtB,eAAsB;IAC9B,IACEA,eAAe,KAAKtH,SAAS,IAC7B,IAAI,CAAC2I,SAAS,CAAC+B,QAAQ,CAACpD,eAAe,CAAC,EACxC;MACA,OAAO,IAAI;KACZ,MAAM;MACL,IAAM0B,WAAW,GAAG,IAAI,CAACL,SAAS,CAACgC,QAAQ,CACzCrD,eAAe,EACf,IAAI,CAACoB,SAAS,CACf;MACD,OAAO,IAAIE,YAAY,CAAC,IAAI,CAACF,SAAS,EAAE,IAAI,CAAC/H,aAAa,EAAEqI,WAAW,CAAC;;GAE3E;;;;EAKDJ,gCAAS,GAAT,UAAUtH,KAAY;IACpB,OAAOA,KAAK,KAAKtB,SAAS,IAAI,IAAI,CAAC2I,SAAS,CAAC+B,QAAQ,CAACpJ,KAAK,CAAC;GAC7D;;;;EAKDsH,6BAAM,GAAN,UAAO5S,KAAW;IAChB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;KACZ,MAAM,IAAIA,KAAK,CAACsK,UAAU,EAAE,EAAE;MAC7B,OAAO,KAAK;KACb,MAAM;MACL,IAAMsK,iBAAiB,GAAG5U,KAAqB;MAC/C,IAAI,CAAC,IAAI,CAACwK,WAAW,EAAE,CAAC2B,MAAM,CAACyI,iBAAiB,CAACpK,WAAW,EAAE,CAAC,EAAE;QAC/D,OAAO,KAAK;OACb,MAAM,IACL,IAAI,CAACkI,SAAS,CAACnF,KAAK,EAAE,KAAKqH,iBAAiB,CAAClC,SAAS,CAACnF,KAAK,EAAE,EAC9D;QACA,IAAMsH,QAAQ,GAAG,IAAI,CAACnD,WAAW,CAAC/E,cAAc,CAAC;QACjD,IAAMmI,SAAS,GAAGF,iBAAiB,CAAClD,WAAW,CAAC/E,cAAc,CAAC;QAC/D,IAAIoI,WAAW,GAAGF,QAAQ,CAACjD,OAAO,EAAE;QACpC,IAAIoD,YAAY,GAAGF,SAAS,CAAClD,OAAO,EAAE;QACtC,OAAOmD,WAAW,IAAIC,YAAY,EAAE;UAClC,IACED,WAAW,CAACjgB,IAAI,KAAKkgB,YAAY,CAAClgB,IAAI,IACtC,CAACigB,WAAW,CAAC9L,IAAI,CAACkD,MAAM,CAAC6I,YAAY,CAAC/L,IAAI,CAAC,EAC3C;YACA,OAAO,KAAK;;UAEd8L,WAAW,GAAGF,QAAQ,CAACjD,OAAO,EAAE;UAChCoD,YAAY,GAAGF,SAAS,CAAClD,OAAO,EAAE;;QAEpC,OAAOmD,WAAW,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI;OACrD,MAAM;QACL,OAAO,KAAK;;;GAGjB;;;;;;;;;EAUOpC,oCAAa,GAArB,UACEtB,eAAsB;IAEtB,IAAIA,eAAe,KAAKtH,SAAS,EAAE;MACjC,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAAC2I,SAAS,CAAC3a,GAAG,CAACsZ,eAAe,CAACtc,QAAQ,EAAE,CAAC;;GAExD;;;;;EAvUc4d,4BAAe,GAAG,gBAAgB;EAwUnD,mBAAC;CA3dD;AA6dA;;;;;AAKA;EAA6BjJ;EAC3B;WACEsL,kBACE,IAAI3H,SAAS,CAAemF,eAAe,CAAC,EAC5CG,YAAY,CAAC/H,UAAU,EACvBqG,QAAQ,CAAC2B,OAAO,CACjB;;EAGHqC,2BAAS,GAAT,UAAUlV,KAAW;IACnB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,CAAC;KACT,MAAM;MACL,OAAO,CAAC;;GAEX;EAEDkV,wBAAM,GAAN,UAAOlV,KAAW;;IAEhB,OAAOA,KAAK,KAAK,IAAI;GACtB;EAEDkV,6BAAW,GAAX;IACE,OAAO,IAAI;GACZ;EAEDA,mCAAiB,GAAjB,UAAkBnK,SAAiB;IACjC,OAAO6H,YAAY,CAAC/H,UAAU;GAC/B;EAEDqK,yBAAO,GAAP;IACE,OAAO,KAAK;GACb;EACH,cAAC;AAAD,CAjCA,CAA6BtC,YAAY;AAmCzC;;;;;AAKO,IAAM3I,UAAQ,GAAG,IAAIiL,OAAO,EAAE;AAYrCxW,MAAM,CAACyW,gBAAgB,CAACjM,SAAS,EAAE;EACjCO,GAAG,EAAE;IACHnV,KAAK,EAAE,IAAI4U,SAAS,CAACrP,QAAQ,EAAE+Y,YAAY,CAAC/H,UAAU;GACvD;EACDuK,GAAG,EAAE;IACH9gB,KAAK,EAAE,IAAI4U,SAAS,CAACpP,QAAQ,EAAEmQ,UAAQ;;CAE1C,CAAC;AAEF;;;AAGAL,QAAQ,CAACF,YAAY,GAAGkJ,YAAY,CAAC/H,UAAU;AAC/CD,QAAQ,CAACH,yBAAyB,GAAGmI,YAAY;AACjD1I,UAAU,CAACD,UAAQ,CAAC;AACpBoL,YAAkB,CAACpL,UAAQ,CAAC;;AC3lB5B;;;;;;;;;;;;;;;;AA8BA,IAAMqL,SAAS,GAAG,IAAI;AAEtB;;;;;;;SAOgBlJ,cAAY,CAC1BmJ,IAAoB,EACpB1Q,QAAwB;EAAxB;IAAAA,eAAwB;EAAA;EAExB,IAAI0Q,IAAI,KAAK,IAAI,EAAE;IACjB,OAAO3C,YAAY,CAAC/H,UAAU;;EAGhC,IAAI,OAAO0K,IAAI,KAAK,QAAQ,IAAI,WAAW,IAAIA,IAAI,EAAE;IACnD1Q,QAAQ,GAAG0Q,IAAI,CAAC,WAAW,CAAC;;EAG9B/d,MAAM,CACJqN,QAAQ,KAAK,IAAI,IACf,OAAOA,QAAQ,KAAK,QAAQ,IAC5B,OAAOA,QAAQ,KAAK,QAAQ,IAC3B,OAAOA,QAAQ,KAAK,QAAQ,IAAI,KAAK,IAAKA,QAAoB,EACjE,+BAA+B,GAAG,OAAOA,QAAQ,CAClD;EAED,IAAI,OAAO0Q,IAAI,KAAK,QAAQ,IAAI,QAAQ,IAAIA,IAAI,IAAIA,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;IAC3EA,IAAI,GAAGA,IAAI,CAAC,QAAQ,CAAC;;;EAIvB,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,KAAK,IAAIA,IAAI,EAAE;IAC7C,IAAMC,QAAQ,GAAGD,IAA6C;IAC9D,OAAO,IAAI3K,QAAQ,CAAC4K,QAAQ,EAAEpJ,cAAY,CAACvH,QAAQ,CAAC,CAAC;;EAGvD,IAAI,EAAE0Q,IAAI,YAAYve,KAAK,CAAC,IAAIse,SAAS,EAAE;IACzC,IAAMG,UAAQ,GAAgB,EAAE;IAChC,IAAIC,sBAAoB,GAAG,KAAK;IAChC,IAAMC,YAAY,GAAGJ,IAAI;IACzBpa,IAAI,CAACwa,YAAY,EAAE,UAACthB,GAAG,EAAEqM,KAAK;MAC5B,IAAIrM,GAAG,CAAC6G,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;;QAE/B,IAAM8P,SAAS,GAAGoB,cAAY,CAAC1L,KAAK,CAAC;QACrC,IAAI,CAACsK,SAAS,CAACT,OAAO,EAAE,EAAE;UACxBmL,sBAAoB,GAClBA,sBAAoB,IAAI,CAAC1K,SAAS,CAACR,WAAW,EAAE,CAACD,OAAO,EAAE;UAC5DkL,UAAQ,CAAC9a,IAAI,CAAC,IAAIuO,SAAS,CAAC7U,GAAG,EAAE2W,SAAS,CAAC,CAAC;;;KAGjD,CAAC;IAEF,IAAIyK,UAAQ,CAAC3e,MAAM,KAAK,CAAC,EAAE;MACzB,OAAO8b,YAAY,CAAC/H,UAAU;;IAGhC,IAAM+K,QAAQ,GAAGjG,aAAa,CAC5B8F,UAAQ,EACRjD,oBAAoB,EACpB,mBAAS;MAAI,gBAAS,CAAC1d,IAAI;IAAA,GAC3B2d,eAAe,CACW;IAC5B,IAAIiD,sBAAoB,EAAE;MACxB,IAAMG,cAAc,GAAGlG,aAAa,CAClC8F,UAAQ,EACR9I,cAAc,CAACoF,UAAU,EAAE,CAC5B;MACD,OAAO,IAAIa,YAAY,CACrBgD,QAAQ,EACRxJ,cAAY,CAACvH,QAAQ,CAAC,EACtB,IAAIqM,QAAQ,CACV;QAAE,WAAW,EAAE2E;MAAc,CAAE,EAC/B;QAAE,WAAW,EAAElJ;MAAc,CAAE,CAChC,CACF;KACF,MAAM;MACL,OAAO,IAAIiG,YAAY,CACrBgD,QAAQ,EACRxJ,cAAY,CAACvH,QAAQ,CAAC,EACtBqM,QAAQ,CAAC2B,OAAO,CACjB;;GAEJ,MAAM;IACL,IAAIiD,MAAI,GAASlD,YAAY,CAAC/H,UAAU;IACxC1P,IAAI,CAACoa,IAAI,EAAE,UAAClhB,GAAW,EAAE0hB,SAAkB;MACzC,IAAI5gB,QAAQ,CAACogB,IAAc,EAAElhB,GAAG,CAAC,EAAE;QACjC,IAAIA,GAAG,CAAC6G,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;;UAE/B,IAAM8P,SAAS,GAAGoB,cAAY,CAAC2J,SAAS,CAAC;UACzC,IAAI/K,SAAS,CAACV,UAAU,EAAE,IAAI,CAACU,SAAS,CAACT,OAAO,EAAE,EAAE;YAClDuL,MAAI,GAAGA,MAAI,CAAC3K,oBAAoB,CAAC9W,GAAG,EAAE2W,SAAS,CAAC;;;;KAIvD,CAAC;IAEF,OAAO8K,MAAI,CAAC5K,cAAc,CAACkB,cAAY,CAACvH,QAAQ,CAAC,CAAC;;AAEtD;AAEAwH,eAAe,CAACD,cAAY,CAAC;;ACrI7B;;;;;;;;;;;;;;;;AAsBA;;;;;AAKA;EAAgCzC;EAAhC;;;;;;EAIEqM,4BAAO,GAAP,UAAQhc,CAAY,EAAEC,CAAY;IAChC,IAAMwS,QAAQ,GAAGzS,CAAC,CAACiP,IAAI,CAACyD,SAAS,CAACzS,CAAC,CAACgP,IAAI,CAAC;IACzC,IAAIwD,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO1S,WAAW,CAACC,CAAC,CAAClF,IAAI,EAAEmF,CAAC,CAACnF,IAAI,CAAC;KACnC,MAAM;MACL,OAAO2X,QAAQ;;GAElB;;;;EAKDuJ,gCAAW,GAAX,UAAY/M,IAAU;IACpB,OAAO,IAAI;GACZ;;;;EAKD+M,wCAAmB,GAAnB,UAAoB3M,OAAa,EAAEC,OAAa;IAC9C,OAAO,CAACD,OAAO,CAAC8C,MAAM,CAAC7C,OAAO,CAAC;GAChC;;;;EAKD0M,4BAAO,GAAP;;IAEE,OAAQ9M,SAAiB,CAACO,GAAG;GAC9B;;;;EAKDuM,4BAAO,GAAP;;IAEE,OAAQ9M,SAAiB,CAACkM,GAAG;GAC9B;;;;;;EAODY,6BAAQ,GAAR,UAASjM,UAAkB,EAAEjV,IAAY;IACvC,IAAMmhB,SAAS,GAAG7J,cAAY,CAACrC,UAAU,CAAC;IAC1C,OAAO,IAAIb,SAAS,CAACpU,IAAI,EAAEmhB,SAAS,CAAC;GACtC;;;;EAKDD,6BAAQ,GAAR;IACE,OAAO,QAAQ;GAChB;EACH,iBAAC;AAAD,CA3DA,CAAgC7M,KAAK;AA6D9B,IAAM+M,WAAW,GAAG,IAAIF,UAAU,EAAE;;ACxF3C;;;;;;;;;;;;;;;;AAyBA;;;;;AAKA;EAA+BrM;EAC7B,mBAAoBwM,UAAgB;IAApC,YACElB,iBAAO;IADW5C,gBAAU,GAAV8D,UAAU;IAG5B3e,MAAM,CACJ,CAAC2e,UAAU,CAAC5L,OAAO,EAAE,IAAI4L,UAAU,CAAC5W,QAAQ,EAAE,KAAK,WAAW,EAC9D,yDAAyD,CAC1D;;;;;;;;EAQO6W,gCAAY,GAAtB,UAAuBC,IAAU;IAC/B,OAAOA,IAAI,CAACtD,QAAQ,CAAC,IAAI,CAACoD,UAAU,CAAC;GACtC;;;;EAKDC,+BAAW,GAAX,UAAYnN,IAAU;IACpB,OAAO,CAACA,IAAI,CAAC8J,QAAQ,CAAC,IAAI,CAACoD,UAAU,CAAC,CAAC5L,OAAO,EAAE;GACjD;;;;EAKD6L,2BAAO,GAAP,UAAQpc,CAAY,EAAEC,CAAY;IAChC,IAAMqc,MAAM,GAAG,IAAI,CAACC,YAAY,CAACvc,CAAC,CAACiP,IAAI,CAAC;IACxC,IAAMuN,MAAM,GAAG,IAAI,CAACD,YAAY,CAACtc,CAAC,CAACgP,IAAI,CAAC;IACxC,IAAMwD,QAAQ,GAAG6J,MAAM,CAAC5J,SAAS,CAAC8J,MAAM,CAAC;IACzC,IAAI/J,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO1S,WAAW,CAACC,CAAC,CAAClF,IAAI,EAAEmF,CAAC,CAACnF,IAAI,CAAC;KACnC,MAAM;MACL,OAAO2X,QAAQ;;GAElB;;;;EAKD2J,4BAAQ,GAAR,UAASrM,UAAkB,EAAEjV,IAAY;IACvC,IAAMmhB,SAAS,GAAG7J,cAAY,CAACrC,UAAU,CAAC;IAC1C,IAAMd,IAAI,GAAG2J,YAAY,CAAC/H,UAAU,CAACQ,WAAW,CAC9C,IAAI,CAAC8K,UAAU,EACfF,SAAS,CACV;IACD,OAAO,IAAI/M,SAAS,CAACpU,IAAI,EAAEmU,IAAI,CAAC;GACjC;;;;EAKDmN,2BAAO,GAAP;IACE,IAAMnN,IAAI,GAAG2J,YAAY,CAAC/H,UAAU,CAACQ,WAAW,CAAC,IAAI,CAAC8K,UAAU,EAAElM,UAAQ,CAAC;IAC3E,OAAO,IAAIf,SAAS,CAACpP,QAAQ,EAAEmP,IAAI,CAAC;GACrC;;;;EAKDmN,4BAAQ,GAAR;IACE,OAAO,IAAI,CAACD,UAAU,CAACnX,KAAK,EAAE,CAAC3C,IAAI,CAAC,GAAG,CAAC;GACzC;EACH,gBAAC;AAAD,CAlEA,CAA+B8M,KAAK;;AC9BpC;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;EAUE,sBACmBsN,KAAW,EACXC,IAAe,EACfC,MAAa;IAFb,UAAK,GAALF,KAAK;IACL,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;;;;;;;;EASzBC,0BAAG,GAAH;IACE/P,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5D,OAAO,IAAI,CAAC2f,KAAK,CAAC5M,GAAG,EAAE;GACxB;;;;;;EAOD+M,gCAAS,GAAT;IACE/P,gBAAgB,CAAC,wBAAwB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAClE,OAAO,IAAI,CAAC2f,KAAK,CAAC5M,GAAG,CAAC,IAAI,CAAC;GAC5B;;;EAID+M,6BAAM,GAAN;;IAEE/P,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC/D,OAAO,IAAI,CAAC+f,SAAS,EAAE;GACxB;;;;;;EAODD,6BAAM,GAAN;IACE/P,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC/D,OAAO,CAAC,IAAI,CAAC2f,KAAK,CAAClM,OAAO,EAAE;GAC7B;;;;;;;EAQDqM,4BAAK,GAAL,UAAME,eAAuB;IAC3BjQ,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;;IAE9DggB,eAAe,GAAGhY,MAAM,CAACgY,eAAe,CAAC;IACzC1Q,kBAAkB,CAAC,oBAAoB,EAAE,CAAC,EAAE0Q,eAAe,EAAE,KAAK,CAAC;IAEnE,IAAMC,SAAS,GAAG,IAAIpY,IAAI,CAACmY,eAAe,CAAC;IAC3C,IAAME,QAAQ,GAAG,IAAI,CAACN,IAAI,CAAChW,KAAK,CAACqW,SAAS,CAAC;IAC3C,OAAO,IAAIH,YAAY,CACrB,IAAI,CAACH,KAAK,CAAC1D,QAAQ,CAACgE,SAAS,CAAC,EAC9BC,QAAQ,EACRrK,cAAc,CACf;GACF;;;;;;;EAQDiK,+BAAQ,GAAR,UAASE,eAAuB;IAC9BjQ,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACjEsP,kBAAkB,CAAC,uBAAuB,EAAE,CAAC,EAAE0Q,eAAe,EAAE,KAAK,CAAC;IAEtE,IAAMC,SAAS,GAAG,IAAIpY,IAAI,CAACmY,eAAe,CAAC;IAC3C,OAAO,CAAC,IAAI,CAACL,KAAK,CAAC1D,QAAQ,CAACgE,SAAS,CAAC,CAACxM,OAAO,EAAE;GACjD;;;;;;EAODqM,kCAAW,GAAX;IACE/P,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;;IAGpE,OAAO,IAAI,CAAC2f,KAAK,CAACjM,WAAW,EAAE,CAACX,GAAG,EAA4B;GAChE;;;;;;;;;EAUD+M,8BAAO,GAAP,UAAQrL,MAA2C;IAAnD;IACE1E,gBAAgB,CAAC,sBAAsB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAChEiQ,gBAAgB,CAAC,sBAAsB,EAAE,CAAC,EAAEwE,MAAM,EAAE,KAAK,CAAC;IAE1D,IAAI,IAAI,CAACkL,KAAK,CAACnM,UAAU,EAAE,EAAE;MAC3B,OAAO,KAAK;;IAGd,IAAM2M,YAAY,GAAG,IAAI,CAACR,KAAqB;;IAE/C,OAAO,CAAC,CAACQ,YAAY,CAAC1D,YAAY,CAAC,IAAI,CAACoD,MAAM,EAAE,UAACtiB,GAAG,EAAE4U,IAAI;MACxD,OAAOsC,MAAM,CACX,IAAIqL,YAAY,CAAC3N,IAAI,EAAEoJ,KAAI,CAACqE,IAAI,CAAChW,KAAK,CAACrM,GAAG,CAAC,EAAEsY,cAAc,CAAC,CAC7D;KACF,CAAC;GACH;;;;;EAMDiK,kCAAW,GAAX;IACE/P,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAEpE,IAAI,IAAI,CAAC2f,KAAK,CAACnM,UAAU,EAAE,EAAE;MAC3B,OAAO,KAAK;KACb,MAAM;MACL,OAAO,CAAC,IAAI,CAACmM,KAAK,CAAClM,OAAO,EAAE;;GAE/B;EAED7L,sBAAIkY,6BAAG;SAAP;MACE,OAAO,IAAI,CAACF,IAAI,CAACQ,MAAM,EAAE;KAC1B;;;;;;;;EAMDN,kCAAW,GAAX;IACE/P,gBAAgB,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAEpE,OAAO,IAAI,CAAC2f,KAAK,CAACU,WAAW,EAAE;GAChC;;;;EAKDP,6BAAM,GAAN;IACE/P,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAE5D,OAAO,IAAI,CAAC4f,IAAI;GACjB;EAEDhY,sBAAIkY,6BAAG;SAAP;MACE,OAAO,IAAI,CAACQ,MAAM,EAAE;KACrB;;;;EACH,mBAAC;AAAD,CAAC;;ACjMD;;;;;;;;;;;;;;;;AAuDA;;;;AAIA;;;;;;;EAOE,mBACSlR,SAAoB,EACpBmR,iBAAoC,EACpC1P,QAAsB,EACtB2P,QAAwB;IAHxB,cAAS,GAATpR,SAAS;IACT,sBAAiB,GAAjBmR,iBAAiB;IACjB,aAAQ,GAAR1P,QAAQ;IACR,aAAQ,GAAR2P,QAAQ;;;;;EAMjBC,2BAAO,GAAP;IACE,IAAMC,GAAG,GAAG,IAAI,CAAC7P,QAAQ,CAACyP,MAAM,EAAE;IAClC,IAAI,IAAI,CAAClR,SAAS,KAAK,OAAO,EAAE;MAC9B,OAAOsR,GAAG,CAACna,IAAI;KAChB,MAAM;MACL,OAAOma,GAAG,CAACC,SAAS,EAAE,CAACpa,IAAI;;GAE9B;;;;EAKDka,gCAAY,GAAZ;IACE,OAAO,IAAI,CAACrR,SAAS;GACtB;;;;EAKDqR,kCAAc,GAAd;IACE,OAAO,IAAI,CAACF,iBAAiB,CAACK,cAAc,CAAC,IAAI,CAAC;GACnD;;;;EAKDH,4BAAQ,GAAR;IACE,OACE,IAAI,CAACI,OAAO,EAAE,CAAC3iB,QAAQ,EAAE,GACzB,GAAG,GACH,IAAI,CAACkR,SAAS,GACd,GAAG,GACHxR,SAAS,CAAC,IAAI,CAACiT,QAAQ,CAACkP,SAAS,EAAE,CAAC;GAEvC;EACH,gBAAC;AAAD,CAAC;AAED;;;;;;EAME,qBACSQ,iBAAoC,EACpClf,KAAY,EACZkF,IAAU;IAFV,sBAAiB,GAAjBga,iBAAiB;IACjB,UAAK,GAALlf,KAAK;IACL,SAAI,GAAJkF,IAAI;;;;;EAMbua,6BAAO,GAAP;IACE,OAAO,IAAI,CAACva,IAAI;GACjB;;;;EAKDua,kCAAY,GAAZ;IACE,OAAO,QAAQ;GAChB;;;;EAKDA,oCAAc,GAAd;IACE,OAAO,IAAI,CAACP,iBAAiB,CAACK,cAAc,CAAC,IAAI,CAAC;GACnD;;;;EAKDE,8BAAQ,GAAR;IACE,OAAO,IAAI,CAACva,IAAI,CAACrI,QAAQ,EAAE,GAAG,SAAS;GACxC;EACH,kBAAC;AAAD,CAAC;;ACxJD;;;;;;;;;;;;;;;;AAgFA;;;AAGA;;;;;;EAME,gCACU6iB,SAA6C,EAC7CC,eAA4C,EAC5CC,QAAmB;IAFnB,cAAS,GAATF,SAAS;IACT,oBAAe,GAAfC,eAAe;IACf,aAAQ,GAARC,QAAQ;;;;;EAMlBC,2CAAU,GAAV,UAAW9R,SAAiB;IAC1B,OAAOA,SAAS,KAAK,OAAO;GAC7B;;;;EAKD8R,4CAAW,GAAX,UAAYC,MAAc,EAAE9a,KAAY;IACtC,IAAMmO,KAAK,GAAGnO,KAAK,CAAC+a,cAAc,EAAE,CAACC,QAAQ,EAAE;IAC/C,OAAO,IAAIZ,SAAS,CAClB,OAAO,EACP,IAAI,EACJ,IAAIX,YAAY,CAACqB,MAAM,CAACG,YAAY,EAAEjb,KAAK,CAACia,MAAM,EAAE,EAAE9L,KAAK,CAAC,CAC7D;GACF;;;;EAKD0M,+CAAc,GAAd,UAAeK,SAAkC;IAC/C,IAAMC,GAAG,GAAG,IAAI,CAACP,QAAQ;IACzB,IAAIM,SAAS,CAACE,YAAY,EAAE,KAAK,QAAQ,EAAE;MACzC/gB,MAAM,CACJ,IAAI,CAACsgB,eAAe,EACpB,8DAA8D,CAC/D;MACD,IAAMU,UAAQ,GAAG,IAAI,CAACV,eAAe;MACrC,OAAO;;QAELU,UAAQ,CAACC,IAAI,CAACH,GAAG,EAAGD,SAAyB,CAAClgB,KAAK,CAAC;OACrD;KACF,MAAM;MACL,IAAMugB,IAAE,GAAG,IAAI,CAACb,SAAS;MACzB,OAAO;QACLa,IAAE,CAACD,IAAI,CAACH,GAAG,EAAGD,SAAuB,CAAC1Q,QAAQ,CAAC;OAChD;;GAEJ;;;;EAKDqQ,kDAAiB,GAAjB,UAAkB7f,KAAY,EAAEkF,IAAU;IACxC,IAAI,IAAI,CAACya,eAAe,EAAE;MACxB,OAAO,IAAIF,WAAW,CAAC,IAAI,EAAEzf,KAAK,EAAEkF,IAAI,CAAC;KAC1C,MAAM;MACL,OAAO,IAAI;;GAEd;;;;EAKD2a,wCAAO,GAAP,UAAQhY,KAAwB;IAC9B,IAAI,EAAEA,KAAK,YAAYgY,sBAAsB,CAAC,EAAE;MAC9C,OAAO,KAAK;KACb,MAAM,IAAI,CAAChY,KAAK,CAAC6X,SAAS,IAAI,CAAC,IAAI,CAACA,SAAS,EAAE;;MAE9C,OAAO,IAAI;KACZ,MAAM;MACL,OACE7X,KAAK,CAAC6X,SAAS,KAAK,IAAI,CAACA,SAAS,IAAI7X,KAAK,CAAC+X,QAAQ,KAAK,IAAI,CAACA,QAAQ;;GAG3E;;;;EAKDC,+CAAc,GAAd;IACE,OAAO,IAAI,CAACH,SAAS,KAAK,IAAI;GAC/B;EACH,6BAAC;AAAD,CAAC;AAED;;;;;;;;;AASA;;;;;;EAME,gCACUc,UAEA,EACAb,eAA4C,EAC5CC,QAAa;IAJb,eAAU,GAAVY,UAAU;IAGV,oBAAe,GAAfb,eAAe;IACf,aAAQ,GAARC,QAAQ;;;;;EAMlBa,2CAAU,GAAV,UAAW1S,SAAiB;IAC1B,IAAI2S,YAAY,GACd3S,SAAS,KAAK,gBAAgB,GAAG,aAAa,GAAGA,SAAS;IAC5D2S,YAAY,GACVA,YAAY,KAAK,kBAAkB,GAAG,eAAe,GAAGA,YAAY;IACtE,OAAO1jB,QAAQ,CAAC,IAAI,CAACwjB,UAAU,EAAEE,YAAY,CAAC;GAC/C;;;;EAKDD,kDAAiB,GAAjB,UAAkBzgB,KAAY,EAAEkF,IAAU;IACxC,IAAI,IAAI,CAACya,eAAe,EAAE;MACxB,OAAO,IAAIF,WAAW,CAAC,IAAI,EAAEzf,KAAK,EAAEkF,IAAI,CAAC;KAC1C,MAAM;MACL,OAAO,IAAI;;GAEd;;;;EAKDub,4CAAW,GAAX,UAAYX,MAAc,EAAE9a,KAAY;IACtC3F,MAAM,CAACygB,MAAM,CAAClN,SAAS,IAAI,IAAI,EAAE,uCAAuC,CAAC;IACzE,IAAMyM,GAAG,GAAGra,KAAK,CAACia,MAAM,EAAE,CAAC1W,KAAK,wBAAwBuX,MAAM,CAAClN,SAAS,CAAC;IACzE,IAAMO,KAAK,GAAGnO,KAAK,CAAC+a,cAAc,EAAE,CAACC,QAAQ,EAAE;IAC/C,OAAO,IAAIZ,SAAS,CAClBU,MAAM,CAAC1V,IAAiB,EACxB,IAAI,EACJ,IAAIqU,YAAY,CAACqB,MAAM,CAACG,YAAY,EAAEZ,GAAG,EAAElM,KAAK,CAAC,EACjD2M,MAAM,CAACX,QAAQ,CAChB;GACF;;;;EAKDsB,+CAAc,GAAd,UAAeP,SAAkC;IAC/C,IAAMC,GAAG,GAAG,IAAI,CAACP,QAAQ;IACzB,IAAIM,SAAS,CAACE,YAAY,EAAE,KAAK,QAAQ,EAAE;MACzC/gB,MAAM,CACJ,IAAI,CAACsgB,eAAe,EACpB,8DAA8D,CAC/D;MACD,IAAMgB,UAAQ,GAAG,IAAI,CAAChB,eAAe;MACrC,OAAO;;QAELgB,UAAQ,CAACL,IAAI,CAACH,GAAG,EAAGD,SAAyB,CAAClgB,KAAK,CAAC;OACrD;KACF,MAAM;MACL,IAAM4gB,IAAE,GAAG,IAAI,CAACJ,UAAU,CAAEN,SAAuB,CAACnS,SAAS,CAAC;MAC9D,OAAO;QACL6S,IAAE,CAACN,IAAI,CACLH,GAAG,EACFD,SAAuB,CAAC1Q,QAAQ,EAChC0Q,SAAuB,CAACf,QAAQ,CAClC;OACF;;GAEJ;;;;EAKDsB,wCAAO,GAAP,UAAQ5Y,KAAwB;IAAhC;IACE,IAAIA,KAAK,YAAY4Y,sBAAsB,EAAE;MAC3C,IAAI,CAAC,IAAI,CAACD,UAAU,IAAI,CAAC3Y,KAAK,CAAC2Y,UAAU,EAAE;QACzC,OAAO,IAAI;OACZ,MAAM,IAAI,IAAI,CAACZ,QAAQ,KAAK/X,KAAK,CAAC+X,QAAQ,EAAE;QAC3C,IAAMiB,SAAS,GAAGta,MAAM,CAACjE,IAAI,CAACuF,KAAK,CAAC2Y,UAAU,CAAC;QAC/C,IAAMM,QAAQ,GAAGva,MAAM,CAACjE,IAAI,CAAC,IAAI,CAACke,UAAU,CAAC;QAC7C,IAAMO,UAAU,GAAGF,SAAS,CAACliB,MAAM;QACnC,IAAMqiB,SAAS,GAAGF,QAAQ,CAACniB,MAAM;QACjC,IAAIoiB,UAAU,KAAKC,SAAS,EAAE;;;;UAK5B,IAAID,UAAU,KAAK,CAAC,EAAE;YACpB,IAAME,QAAQ,GAAGJ,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAMK,OAAO,GAAGJ,QAAQ,CAAC,CAAC,CAAC;YAC3B,OACEI,OAAO,KAAKD,QAAQ,KACnB,CAACpZ,KAAK,CAAC2Y,UAAU,CAACS,QAAQ,CAAC,IAC1B,CAAC,IAAI,CAACT,UAAU,CAACU,OAAO,CAAC,IACzBrZ,KAAK,CAAC2Y,UAAU,CAACS,QAAQ,CAAC,KAAK,IAAI,CAACT,UAAU,CAACU,OAAO,CAAC,CAAC;WAE7D,MAAM;;YAEL,OAAOJ,QAAQ,CAACK,KAAK,CACnB,mBAAS;cACP,YAAK,CAACX,UAAU,CAACzS,SAAS,CAAC,KAAKmM,KAAI,CAACsG,UAAU,CAACzS,SAAS,CAAC;aAAA,CAC7D;;;;;IAMT,OAAO,KAAK;GACb;;;;EAKD0S,+CAAc,GAAd;IACE,OAAO,IAAI,CAACD,UAAU,KAAK,IAAI;GAChC;EACH,6BAAC;AAAD,CAAC;;ACjTD;;;;;;;;;;;;;;;;AAkDA,IAAIY,sBAA6D;AAMjE;;;;;;;EAgBE,eACSC,IAAU,EACVnc,IAAU,EACToc,YAAyB,EACzBC,cAAuB;IAHxB,SAAI,GAAJF,IAAI;IACJ,SAAI,GAAJnc,IAAI;IACH,iBAAY,GAAZoc,YAAY;IACZ,mBAAc,GAAdC,cAAc;;EAbxBhb,sBAAWib,+BAAsB;SAIjC;MACEniB,MAAM,CAAC+hB,sBAAsB,EAAE,kCAAkC,CAAC;MAClE,OAAOA,sBAAsB;KAC9B;SAPD,aAAkC1P,GAAG;MACnC0P,sBAAsB,GAAG1P,GAAG;KAC7B;;;;;;;;;EAmBc8P,6BAAuB,GAAtC,UAAuCnX,MAAmB;IACxD,IAAIoX,SAAS,GAAG,IAAI;IACpB,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIrX,MAAM,CAACsX,QAAQ,EAAE,EAAE;MACrBF,SAAS,GAAGpX,MAAM,CAACuX,kBAAkB,EAAE;;IAEzC,IAAIvX,MAAM,CAACwX,MAAM,EAAE,EAAE;MACnBH,OAAO,GAAGrX,MAAM,CAACyX,gBAAgB,EAAE;;IAGrC,IAAIzX,MAAM,CAAC2V,QAAQ,EAAE,KAAKnO,SAAS,EAAE;MACnC,IAAMkQ,gBAAgB,GACpB,iEAAiE,GACjE,mCAAmC;MACrC,IAAMC,iBAAiB,GACrB,yEAAyE,GACzE,gCAAgC;MAClC,IAAI3X,MAAM,CAACsX,QAAQ,EAAE,EAAE;QACrB,IAAMM,SAAS,GAAG5X,MAAM,CAAC6X,iBAAiB,EAAE;QAC5C,IACED,SAAS,KAAKvgB,QAAQ,IACtB,EAAE2I,MAAM,CAAC8X,aAAa,EAAE,IAAIF,SAAS,KAAKtgB,QAAQ,CAAC,EACnD;UACA,MAAM,IAAIzB,KAAK,CAAC6hB,gBAAgB,CAAC;SAClC,MAAM,IAAI,OAAON,SAAS,KAAK,QAAQ,EAAE;UACxC,MAAM,IAAIvhB,KAAK,CAAC8hB,iBAAiB,CAAC;;;MAGtC,IAAI3X,MAAM,CAACwX,MAAM,EAAE,EAAE;QACnB,IAAMO,OAAO,GAAG/X,MAAM,CAACgY,eAAe,EAAE;QACxC,IACED,OAAO,KAAKzgB,QAAQ,IACpB,EAAE0I,MAAM,CAACiY,YAAY,EAAE,IAAIF,OAAO,KAAK1gB,QAAQ,CAAC,EAChD;UACA,MAAM,IAAIxB,KAAK,CAAC6hB,gBAAgB,CAAC;SAClC,MAAM,IAAI,OAAOL,OAAO,KAAK,QAAQ,EAAE;UACtC,MAAM,IAAIxhB,KAAK,CAAC8hB,iBAAiB,CAAC;;;KAGvC,MAAM,IAAI3X,MAAM,CAAC2V,QAAQ,EAAE,KAAKxL,cAAc,EAAE;MAC/C,IACGiN,SAAS,IAAI,IAAI,IAAI,CAAChV,eAAe,CAACgV,SAAS,CAAC,IAChDC,OAAO,IAAI,IAAI,IAAI,CAACjV,eAAe,CAACiV,OAAO,CAAE,EAC9C;QACA,MAAM,IAAIxhB,KAAK,CACb,4EAA4E,GAC1E,qFAAqF,CACxF;;KAEJ,MAAM;MACLb,MAAM,CACJgL,MAAM,CAAC2V,QAAQ,EAAE,YAAY/B,SAAS,IACpC5T,MAAM,CAAC2V,QAAQ,EAAE,KAAKjC,WAAW,EACnC,qBAAqB,CACtB;MACD,IACG0D,SAAS,IAAI,IAAI,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAClDC,OAAO,IAAI,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAS,EAChD;QACA,MAAM,IAAIxhB,KAAK,CACb,6EAA6E,GAC3E,YAAY,CACf;;;GAGN;;;;;;EAOcshB,oBAAc,GAA7B,UAA8BnX,MAAmB;IAC/C,IACEA,MAAM,CAACsX,QAAQ,EAAE,IACjBtX,MAAM,CAACwX,MAAM,EAAE,IACfxX,MAAM,CAACkY,QAAQ,EAAE,IACjB,CAAClY,MAAM,CAACmY,gBAAgB,EAAE,EAC1B;MACA,MAAM,IAAItiB,KAAK,CACb,oGAAoG,CACrG;;GAEJ;;;;;;EAOOshB,8CAA8B,GAAtC,UAAuC5U,MAAc;IACnD,IAAI,IAAI,CAAC2U,cAAc,KAAK,IAAI,EAAE;MAChC,MAAM,IAAIrhB,KAAK,CAAC0M,MAAM,GAAG,6CAA6C,CAAC;;GAE1E;;;;EAKD4U,8BAAc,GAAd;IACE,OAAO,IAAI,CAACF,YAAY;GACzB;;;;EAKDE,sBAAM,GAAN;IACE9S,gBAAgB,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;;;;IAIrD,OAAO,IAAI6iB,KAAK,CAACJ,sBAAsB,CAAC,IAAI,CAACC,IAAI,EAAE,IAAI,CAACnc,IAAI,CAAc;GAC3E;;;;;;;;EASDsc,kBAAE,GAAF,UACEzT,SAAiB,EACjB0U,QAA0B,EAC1BC,uBAAiE,EACjEC,OAAuB;IAEvBjU,gBAAgB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACpDmP,iBAAiB,CAAC,UAAU,EAAE,CAAC,EAAEC,SAAS,EAAE,KAAK,CAAC;IAClDa,gBAAgB,CAAC,UAAU,EAAE,CAAC,EAAE6T,QAAQ,EAAE,KAAK,CAAC;IAEhD,IAAMG,GAAG,GAAGpB,KAAK,CAACqB,wBAAwB,CACxC,UAAU,EACVH,uBAAuB,EACvBC,OAAO,CACR;IAED,IAAI5U,SAAS,KAAK,OAAO,EAAE;MACzB,IAAI,CAAC+U,YAAY,CAACL,QAAQ,EAAEG,GAAG,CAACG,MAAM,EAAEH,GAAG,CAACD,OAAO,CAAC;KACrD,MAAM;MACL,IAAMK,SAAS,GAAqC,EAAE;MACtDA,SAAS,CAACjV,SAAS,CAAC,GAAG0U,QAAQ;MAC/B,IAAI,CAACQ,YAAY,CAACD,SAAS,EAAEJ,GAAG,CAACG,MAAM,EAAEH,GAAG,CAACD,OAAO,CAAC;;IAEvD,OAAOF,QAAQ;GAChB;;;;;;;EAQSjB,4BAAY,GAAtB,UACEiB,QAAmC,EACnCS,cAA2C,EAC3CP,OAAsB;IAEtB,IAAMQ,SAAS,GAAG,IAAItD,sBAAsB,CAC1C4C,QAAQ,EACRS,cAAc,IAAI,IAAI,EACtBP,OAAO,IAAI,IAAI,CAChB;IACD,IAAI,CAACtB,IAAI,CAAC+B,wBAAwB,CAAC,IAAI,EAAED,SAAS,CAAC;GACpD;;;;;;;EAQD3B,4BAAY,GAAZ,UACEwB,SAA4C,EAC5CE,cAA8C,EAC9CP,OAAsB;IAEtB,IAAMQ,SAAS,GAAG,IAAI1C,sBAAsB,CAC1CuC,SAAS,EACTE,cAAc,EACdP,OAAO,CACR;IACD,IAAI,CAACtB,IAAI,CAAC+B,wBAAwB,CAAC,IAAI,EAAED,SAAS,CAAC;GACpD;;;;;;EAOD3B,mBAAG,GAAH,UACEzT,SAAkB,EAClB0U,QAA2B,EAC3BE,OAAuB;IAEvBjU,gBAAgB,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACrDmP,iBAAiB,CAAC,WAAW,EAAE,CAAC,EAAEC,SAAS,EAAE,IAAI,CAAC;IAClDa,gBAAgB,CAAC,WAAW,EAAE,CAAC,EAAE6T,QAAQ,EAAE,IAAI,CAAC;IAChDY,qBAAqB,CAAC,WAAW,EAAE,CAAC,EAAEV,OAAO,EAAE,IAAI,CAAC;IAEpD,IAAIQ,SAAS,GAA6B,IAAI;IAC9C,IAAIH,SAAS,GAA4C,IAAI;IAC7D,IAAIjV,SAAS,KAAK,OAAO,EAAE;MACzB,IAAMuV,aAAa,GAAGb,QAAQ,IAAI,IAAI;MACtCU,SAAS,GAAG,IAAItD,sBAAsB,CACpCyD,aAAa,EACb,IAAI,EACJX,OAAO,IAAI,IAAI,CAChB;KACF,MAAM,IAAI5U,SAAS,EAAE;MACpB,IAAI0U,QAAQ,EAAE;QACZO,SAAS,GAAG,EAAE;QACdA,SAAS,CAACjV,SAAS,CAAC,GAAG0U,QAAQ;;MAEjCU,SAAS,GAAG,IAAI1C,sBAAsB,CAACuC,SAAS,EAAE,IAAI,EAAEL,OAAO,IAAI,IAAI,CAAC;;IAE1E,IAAI,CAACtB,IAAI,CAACkC,2BAA2B,CAAC,IAAI,EAAEJ,SAAS,CAAC;GACvD;;;;EAKD3B,mBAAG,GAAH;IACE,OAAO,IAAI,CAACH,IAAI,CAAC/N,QAAQ,CAAC,IAAI,CAAC;GAChC;;;;;;;;;EAUDkO,oBAAI,GAAJ,UACEzT,SAAiB,EACjByV,YAA+B,EAC/BC,wBAA+D,EAC/Dd,OAAuB;IAJzB;IAMEjU,gBAAgB,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACtDmP,iBAAiB,CAAC,YAAY,EAAE,CAAC,EAAEC,SAAS,EAAE,KAAK,CAAC;IACpDa,gBAAgB,CAAC,YAAY,EAAE,CAAC,EAAE4U,YAAY,EAAE,IAAI,CAAC;IAErD,IAAMZ,GAAG,GAAGpB,KAAK,CAACqB,wBAAwB,CACxC,YAAY,EACZY,wBAAwB,EACxBd,OAAO,CACR;;;;;IAMD,IAAIe,SAAS,GAAG,IAAI;IACpB,IAAM7U,QAAQ,GAAG,IAAIC,QAAQ,EAAgB;;IAG7CD,QAAQ,CAACI,OAAO,CAAC0U,KAAK,CAAC,cAAQ,CAAC;IAEhC,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIpU,QAAsB;;;MAG1C,IAAIkU,SAAS,EAAE;QACbA,SAAS,GAAG,KAAK;QACjBxJ,KAAI,CAAC2J,GAAG,CAAC9V,SAAS,EAAE6V,YAAY,CAAC;QAEjC,IAAIJ,YAAY,EAAE;UAChBA,YAAY,CAAC9jB,IAAI,CAACkjB,GAAG,CAACD,OAAO,CAAC,CAACnT,QAAQ,CAAC;;QAE1CX,QAAQ,CAACiV,OAAO,CAACtU,QAAQ,CAAC;;KAE7B;IAED,IAAI,CAACuU,EAAE,CACLhW,SAAS,EACT6V,YAAY,aACA,aAAG;MACb1J,KAAI,CAAC2J,GAAG,CAAC9V,SAAS,EAAE6V,YAAY,CAAC;MAEjC,IAAIhB,GAAG,CAACG,MAAM,EAAE;QACdH,GAAG,CAACG,MAAM,CAACrjB,IAAI,CAACkjB,GAAG,CAACD,OAAO,CAAC,CAACqB,GAAG,CAAC;;MAEnCnV,QAAQ,CAACoV,MAAM,CAACD,GAAG,CAAC;KACrB,CACF;IACD,OAAOnV,QAAQ,CAACI,OAAO;GACxB;;;;;;EAODuS,4BAAY,GAAZ,UAAa0C,KAAa;IACxBxV,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC9D,IACE,OAAOulB,KAAK,KAAK,QAAQ,IACzB5iB,IAAI,CAACC,KAAK,CAAC2iB,KAAK,CAAC,KAAKA,KAAK,IAC3BA,KAAK,IAAI,CAAC,EACV;MACA,MAAM,IAAIhkB,KAAK,CACb,gEAAgE,CACjE;;IAEH,IAAI,IAAI,CAACohB,YAAY,CAACiB,QAAQ,EAAE,EAAE;MAChC,MAAM,IAAIriB,KAAK,CACb,uEAAuE,GACrE,gCAAgC,CACnC;;IAGH,OAAO,IAAIshB,KAAK,CACd,IAAI,CAACH,IAAI,EACT,IAAI,CAACnc,IAAI,EACT,IAAI,CAACoc,YAAY,CAAC6C,YAAY,CAACD,KAAK,CAAC,EACrC,IAAI,CAAC3C,cAAc,CACpB;GACF;;;;;;EAODC,2BAAW,GAAX,UAAY0C,KAAa;IACvBxV,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC7D,IACE,OAAOulB,KAAK,KAAK,QAAQ,IACzB5iB,IAAI,CAACC,KAAK,CAAC2iB,KAAK,CAAC,KAAKA,KAAK,IAC3BA,KAAK,IAAI,CAAC,EACV;MACA,MAAM,IAAIhkB,KAAK,CACb,+DAA+D,CAChE;;IAEH,IAAI,IAAI,CAACohB,YAAY,CAACiB,QAAQ,EAAE,EAAE;MAChC,MAAM,IAAIriB,KAAK,CACb,sEAAsE,GACpE,gCAAgC,CACnC;;IAGH,OAAO,IAAIshB,KAAK,CACd,IAAI,CAACH,IAAI,EACT,IAAI,CAACnc,IAAI,EACT,IAAI,CAACoc,YAAY,CAAC8C,WAAW,CAACF,KAAK,CAAC,EACpC,IAAI,CAAC3C,cAAc,CACpB;GACF;;;;;;EAODC,4BAAY,GAAZ,UAAatc,IAAY;IACvBwJ,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC9D,IAAIuG,IAAI,KAAK,MAAM,EAAE;MACnB,MAAM,IAAIhF,KAAK,CACb,yEAAyE,CAC1E;KACF,MAAM,IAAIgF,IAAI,KAAK,WAAW,EAAE;MAC/B,MAAM,IAAIhF,KAAK,CACb,mFAAmF,CACpF;KACF,MAAM,IAAIgF,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIhF,KAAK,CACb,6EAA6E,CAC9E;;IAEH+N,kBAAkB,CAAC,oBAAoB,EAAE,CAAC,EAAE/I,IAAI,EAAE,KAAK,CAAC;IACxD,IAAI,CAACmf,8BAA8B,CAAC,oBAAoB,CAAC;IACzD,IAAMC,UAAU,GAAG,IAAI9d,IAAI,CAACtB,IAAI,CAAC;IACjC,IAAIof,UAAU,CAAClS,OAAO,EAAE,EAAE;MACxB,MAAM,IAAIlS,KAAK,CACb,mFAAmF,CACpF;;IAEH,IAAMiT,KAAK,GAAG,IAAI8K,SAAS,CAACqG,UAAU,CAAC;IACvC,IAAMC,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACkD,OAAO,CAACrR,KAAK,CAAC;IAClDqO,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IAExC,OAAO,IAAI/C,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,oBAAqB,IAAI,CAAC;GAC3E;;;;;EAMD/C,0BAAU,GAAV;IACE9S,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5D,IAAI,CAAC0lB,8BAA8B,CAAC,kBAAkB,CAAC;IACvD,IAAME,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACkD,OAAO,CAAC3S,SAAS,CAAC;IACtD2P,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,OAAO,IAAI/C,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,oBAAqB,IAAI,CAAC;GAC3E;;;;;EAMD/C,+BAAe,GAAf;IACE9S,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACjE,IAAI,CAAC0lB,8BAA8B,CAAC,uBAAuB,CAAC;IAC5D,IAAME,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACkD,OAAO,CAAChQ,cAAc,CAAC;IAC3DgN,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,OAAO,IAAI/C,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,oBAAqB,IAAI,CAAC;GAC3E;;;;;EAMD/C,4BAAY,GAAZ;IACE9S,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC9D,IAAI,CAAC0lB,8BAA8B,CAAC,oBAAoB,CAAC;IACzD,IAAME,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACkD,OAAO,CAACzG,WAAW,CAAC;IACxDyD,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,OAAO,IAAI/C,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,oBAAqB,IAAI,CAAC;GAC3E;;;;;;EAOD/C,uBAAO,GAAP,UACErlB,KAA8C,EAC9CQ,IAAoB;IADpB;MAAAR,YAA8C;IAAA;IAG9CuS,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACzDgO,uBAAuB,CAAC,eAAe,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,IAAI,CAAC;IACnE8I,WAAW,CAAC,eAAe,EAAE,CAAC,EAAErR,IAAI,EAAE,IAAI,CAAC;IAE3C,IAAM4nB,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACoD,OAAO,CAACvoB,KAAK,EAAEQ,IAAI,CAAC;IACxD6kB,KAAK,CAACmD,cAAc,CAACJ,SAAS,CAAC;IAC/B/C,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,IAAI,IAAI,CAACjD,YAAY,CAACK,QAAQ,EAAE,EAAE;MAChC,MAAM,IAAIzhB,KAAK,CACb,4EAA4E,GAC1E,cAAc,CACjB;;;IAIH,IAAI/D,KAAK,KAAK4Q,SAAS,EAAE;MACvB5Q,KAAK,GAAG,IAAI;MACZQ,IAAI,GAAG,IAAI;;IAGb,OAAO,IAAI6kB,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,EAAE,IAAI,CAAChD,cAAc,CAAC;GACvE;EAEDC,0BAAU,GAAV,UACErlB,KAA8C,EAC9CQ,IAAoB;IADpB;MAAAR,YAA8C;IAAA;IAG9CuS,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5DgO,uBAAuB,CAAC,kBAAkB,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,KAAK,CAAC;IACvE8I,WAAW,CAAC,kBAAkB,EAAE,CAAC,EAAErR,IAAI,EAAE,IAAI,CAAC;IAE9C,IAAM4nB,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACsD,UAAU,CAACzoB,KAAK,EAAEQ,IAAI,CAAC;IAC3D6kB,KAAK,CAACmD,cAAc,CAACJ,SAAS,CAAC;IAC/B/C,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,IAAI,IAAI,CAACjD,YAAY,CAACK,QAAQ,EAAE,EAAE;MAChC,MAAM,IAAIzhB,KAAK,CACb,2FAA2F,GACzF,cAAc,CACjB;;IAGH,OAAO,IAAIshB,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,EAAE,IAAI,CAAChD,cAAc,CAAC;GACvE;;;;;;EAODC,qBAAK,GAAL,UACErlB,KAA8C,EAC9CQ,IAAoB;IADpB;MAAAR,YAA8C;IAAA;IAG9CuS,gBAAgB,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACvDgO,uBAAuB,CAAC,aAAa,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,IAAI,CAAC;IACjE8I,WAAW,CAAC,aAAa,EAAE,CAAC,EAAErR,IAAI,EAAE,IAAI,CAAC;IAEzC,IAAM4nB,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACuD,KAAK,CAAC1oB,KAAK,EAAEQ,IAAI,CAAC;IACtD6kB,KAAK,CAACmD,cAAc,CAACJ,SAAS,CAAC;IAC/B/C,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,IAAI,IAAI,CAACjD,YAAY,CAACO,MAAM,EAAE,EAAE;MAC9B,MAAM,IAAI3hB,KAAK,CACb,qFAAqF,GACnF,WAAW,CACd;;IAGH,OAAO,IAAIshB,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,EAAE,IAAI,CAAChD,cAAc,CAAC;GACvE;EAEDC,yBAAS,GAAT,UACErlB,KAA8C,EAC9CQ,IAAoB;IADpB;MAAAR,YAA8C;IAAA;IAG9CuS,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC3DgO,uBAAuB,CAAC,iBAAiB,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,KAAK,CAAC;IACtE8I,WAAW,CAAC,iBAAiB,EAAE,CAAC,EAAErR,IAAI,EAAE,IAAI,CAAC;IAE7C,IAAM4nB,SAAS,GAAG,IAAI,CAACjD,YAAY,CAACwD,SAAS,CAAC3oB,KAAK,EAAEQ,IAAI,CAAC;IAC1D6kB,KAAK,CAACmD,cAAc,CAACJ,SAAS,CAAC;IAC/B/C,KAAK,CAACiD,uBAAuB,CAACF,SAAS,CAAC;IACxC,IAAI,IAAI,CAACjD,YAAY,CAACO,MAAM,EAAE,EAAE;MAC9B,MAAM,IAAI3hB,KAAK,CACb,yFAAyF,GACvF,WAAW,CACd;;IAGH,OAAO,IAAIshB,KAAK,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACnc,IAAI,EAAEqf,SAAS,EAAE,IAAI,CAAChD,cAAc,CAAC;GACvE;;;;;;;;EASDC,uBAAO,GAAP,UAAQrlB,KAAuC,EAAEQ,IAAa;IAC5D+R,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACzDgO,uBAAuB,CAAC,eAAe,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,KAAK,CAAC;IACpE8I,WAAW,CAAC,eAAe,EAAE,CAAC,EAAErR,IAAI,EAAE,IAAI,CAAC;IAC3C,IAAI,IAAI,CAAC2kB,YAAY,CAACK,QAAQ,EAAE,EAAE;MAChC,MAAM,IAAIzhB,KAAK,CACb,+EAA+E,GAC7E,WAAW,CACd;;IAEH,IAAI,IAAI,CAACohB,YAAY,CAACO,MAAM,EAAE,EAAE;MAC9B,MAAM,IAAI3hB,KAAK,CACb,2EAA2E,GACzE,WAAW,CACd;;IAEH,OAAO,IAAI,CAACwkB,OAAO,CAACvoB,KAAK,EAAEQ,IAAI,CAAC,CAACkoB,KAAK,CAAC1oB,KAAK,EAAEQ,IAAI,CAAC;GACpD;;;;EAKD6kB,wBAAQ,GAAR;IACE9S,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAE1D,OAAO,IAAI,CAAC0iB,IAAI,CAACxkB,QAAQ,EAAE,GAAG,IAAI,CAACqI,IAAI,CAAC6f,kBAAkB,EAAE;GAC7D;;;EAIDvD,sBAAM,GAAN;;IAEE9S,gBAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACxD,OAAO,IAAI,CAAC9B,QAAQ,EAAE;GACvB;;;;;EAMD2kB,2BAAW,GAAX;IACE,OAAO,IAAI,CAACF,YAAY,CAAC0D,cAAc,EAAE;GAC1C;;;;EAKDxD,+BAAe,GAAf;IACE,IAAMpf,GAAG,GAAG,IAAI,CAAC6iB,WAAW,EAAE;IAC9B,IAAMtnB,EAAE,GAAG0E,iBAAiB,CAACD,GAAG,CAAC;IACjC,OAAOzE,EAAE,KAAK,IAAI,GAAG,SAAS,GAAGA,EAAE;GACpC;;;;;;EAOD6jB,uBAAO,GAAP,UAAQ3Z,KAAY;IAClB6G,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACzD,IAAI,EAAEkJ,KAAK,YAAY2Z,KAAK,CAAC,EAAE;MAC7B,IAAMxhB,KAAK,GACT,sFAAsF;MACxF,MAAM,IAAIE,KAAK,CAACF,KAAK,CAAC;;IAGxB,IAAMklB,QAAQ,GAAG,IAAI,CAAC7D,IAAI,KAAKxZ,KAAK,CAACwZ,IAAI;IACzC,IAAM8D,QAAQ,GAAG,IAAI,CAACjgB,IAAI,CAAC8O,MAAM,CAACnM,KAAK,CAAC3C,IAAI,CAAC;IAC7C,IAAMkgB,mBAAmB,GACvB,IAAI,CAACC,eAAe,EAAE,KAAKxd,KAAK,CAACwd,eAAe,EAAE;IAEpD,OAAOH,QAAQ,IAAIC,QAAQ,IAAIC,mBAAmB;GACnD;;;;;;;;;EAUc5D,8BAAwB,GAAvC,UACE5U,MAAc,EACd0Y,eAAsD,EACtD3C,OAAuB;IAEvB,IAAMC,GAAG,GAGL;MAAEG,MAAM,EAAE,IAAI;MAAEJ,OAAO,EAAE;IAAI,CAAE;IACnC,IAAI2C,eAAe,IAAI3C,OAAO,EAAE;MAC9BC,GAAG,CAACG,MAAM,GAAGuC,eAAqC;MAClD1W,gBAAgB,CAAChC,MAAM,EAAE,CAAC,EAAEgW,GAAG,CAACG,MAAM,EAAE,IAAI,CAAC;MAE7CH,GAAG,CAACD,OAAO,GAAGA,OAAO;MACrBU,qBAAqB,CAACzW,MAAM,EAAE,CAAC,EAAEgW,GAAG,CAACD,OAAO,EAAE,IAAI,CAAC;KACpD,MAAM,IAAI2C,eAAe,EAAE;;MAE1B,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAIA,eAAe,KAAK,IAAI,EAAE;;QAEnE1C,GAAG,CAACD,OAAO,GAAG2C,eAAe;OAC9B,MAAM,IAAI,OAAOA,eAAe,KAAK,UAAU,EAAE;QAChD1C,GAAG,CAACG,MAAM,GAAGuC,eAAqC;OACnD,MAAM;QACL,MAAM,IAAIplB,KAAK,CACbgN,WAAW,CAACN,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,GAC1B,wDAAwD,CAC3D;;;IAGL,OAAOgW,GAAG;GACX;EAEDrc,sBAAIib,sBAAG;SAAP;MACE,OAAO,IAAI,CAACvC,MAAM,EAAE;KACrB;;;;EACH,YAAC;AAAD,CAAC;;AC1tBD;;;;;;;;;;;;;;;;AAuCA;EACE,+BAAqBX,KAAW;IAAX,UAAK,GAALA,KAAK;;EAE1BiH,iDAAiB,GAAjB,UAAkB3S,SAAiB;IACjC,IAAMrK,KAAK,GAAG,IAAI,CAAC+V,KAAK,CAAC3D,iBAAiB,CAAC/H,SAAS,CAAC;IACrD,OAAO,IAAI2S,qBAAqB,CAAChd,KAAK,CAAC;GACxC;EAEDgd,oCAAI,GAAJ;IACE,OAAO,IAAI,CAACjH,KAAK;GAClB;EACH,4BAAC;AAAD,CAAC;AAED;EAIE,+BAAYkH,QAAkB,EAAEtgB,IAAU;IACxC,IAAI,CAACugB,SAAS,GAAGD,QAAQ;IACzB,IAAI,CAACrY,KAAK,GAAGjI,IAAI;;EAGnBwgB,iDAAiB,GAAjB,UAAkB9S,SAAiB;IACjC,IAAMgM,SAAS,GAAG,IAAI,CAACzR,KAAK,CAAC5E,KAAK,CAACqK,SAAS,CAAC;IAC7C,OAAO,IAAI8S,qBAAqB,CAAC,IAAI,CAACD,SAAS,EAAE7G,SAAS,CAAC;GAC5D;EAED8G,oCAAI,GAAJ;IACE,OAAO,IAAI,CAACD,SAAS,CAACE,sBAAsB,CAAC,IAAI,CAACxY,KAAK,CAAC;GACzD;EACH,4BAAC;AAAD,CAAC;AAED;;;;;AAKO,IAAMyY,kBAAkB,GAAG,SAArBA,kBAAkB,CAC7BC,MAEQ;EAERA,MAAM,GAAGA,MAAM,IAAI,EAAE;EACrBA,MAAM,CAAC,WAAW,CAAC,GAAGA,MAAM,CAAC,WAAW,CAAC,IAAI,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;EACjE,OAAOF,MAAM;AACf,CAAC;AAED;;;;;;;AAOO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAAwB,CACnC7pB,KAA2D,EAC3D8pB,WAA0B,EAC1BC,YAAsC;EAEtC,IAAI,CAAC/pB,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACvC,OAAOA,KAAkC;;EAE3CkD,MAAM,CAAC,KAAK,IAAIlD,KAAK,EAAE,2CAA2C,CAAC;EAEnE,IAAI,OAAOA,KAAK,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;IACpC,OAAOgqB,0BAA0B,CAAChqB,KAAK,CAAC,KAAK,CAAC,EAAE8pB,WAAW,EAAEC,YAAY,CAAC;GAC3E,MAAM,IAAI,OAAO/pB,KAAK,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;IAC3C,OAAOiqB,2BAA2B,CAACjqB,KAAK,CAAC,KAAK,CAAC,EAAE8pB,WAAyB,CAAC;GAC5E,MAAM;IACL5mB,MAAM,CAAC,KAAK,EAAE,2BAA2B,GAAGgnB,IAAI,CAAC9pB,SAAS,CAACJ,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;AAE/E,CAAC;AAED,IAAMgqB,0BAA0B,GAAG,SAA7BA,0BAA0B,CAC9BG,EAAU,EACVC,QAAuB,EACvBL,YAAsC;EAEtC,QAAQI,EAAE;IACR,KAAK,WAAW;MACd,OAAOJ,YAAY,CAAC,WAAW,CAA8B;IAC/D;MACE7mB,MAAM,CAAC,KAAK,EAAE,2BAA2B,GAAGinB,EAAE,CAAC;EAAC;AAEtD,CAAC;AAED,IAAMF,2BAA2B,GAAG,SAA9BA,2BAA2B,CAC/BE,EAAU,EACVC,QAAuB,EACvBC,MAAgC;EAEhC,IAAI,CAACF,EAAE,CAACrjB,cAAc,CAAC,WAAW,CAAC,EAAE;IACnC5D,MAAM,CAAC,KAAK,EAAE,2BAA2B,GAAGgnB,IAAI,CAAC9pB,SAAS,CAAC+pB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;EAE1E,IAAMG,KAAK,GAAGH,EAAE,CAAC,WAAW,CAAC;EAC7B,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;IAC7BpnB,MAAM,CAAC,KAAK,EAAE,8BAA8B,GAAGonB,KAAK,CAAC;;EAGvD,IAAMC,YAAY,GAAGH,QAAQ,CAACzV,IAAI,EAAE;EACpCzR,MAAM,CACJqnB,YAAY,KAAK,IAAI,IAAI,OAAOA,YAAY,KAAK,WAAW,EAC5D,4CAA4C,CAC7C;;EAGD,IAAI,CAACA,YAAY,CAACvU,UAAU,EAAE,EAAE;IAC9B,OAAOsU,KAAK;;EAGd,IAAME,IAAI,GAAGD,YAAwB;EACrC,IAAMT,WAAW,GAAGU,IAAI,CAACrT,QAAQ,EAAE;EACnC,IAAI,OAAO2S,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAOQ,KAAK;;;EAId,OAAOR,WAAW,GAAGQ,KAAK;AAC5B,CAAC;AAED;;;;;;;;;AASO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAAwB,CACnC1hB,IAAU,EACV4L,IAAU,EACV0U,QAAkB,EAClBU,YAAuB;EAEvB,OAAOW,oBAAoB,CACzB/V,IAAI,EACJ,IAAI4U,qBAAqB,CAACF,QAAQ,EAAEtgB,IAAI,CAAC,EACzCghB,YAAY,CACb;AACH,CAAC;AAED;;;;;;;;AAQO,IAAMY,4BAA4B,GAAG,SAA/BA,4BAA4B,CACvChW,IAAU,EACVyV,QAAc,EACdL,YAAuB;EAEvB,OAAOW,oBAAoB,CACzB/V,IAAI,EACJ,IAAIyU,qBAAqB,CAACgB,QAAQ,CAAC,EACnCL,YAAY,CACb;AACH,CAAC;AAED,SAASW,oBAAoB,CAC3B/V,IAAU,EACVmV,WAA0B,EAC1BC,YAAuB;EAEvB,IAAMa,MAAM,GAAGjW,IAAI,CAACuB,WAAW,EAAE,CAACX,GAAG,EAK3B;EACV,IAAMhF,QAAQ,GAAGsZ,wBAAwB,CACvCe,MAAM,EACNd,WAAW,CAACtL,iBAAiB,CAAC,WAAW,CAAC,EAC1CuL,YAAY,CACb;EACD,IAAI/U,OAAa;EAEjB,IAAIL,IAAI,CAACqB,UAAU,EAAE,EAAE;IACrB,IAAM6U,QAAQ,GAAGlW,IAAgB;IACjC,IAAM3U,KAAK,GAAG6pB,wBAAwB,CACpCgB,QAAQ,CAAC1T,QAAQ,EAAE,EACnB2S,WAAW,EACXC,YAAY,CACb;IACD,IACE/pB,KAAK,KAAK6qB,QAAQ,CAAC1T,QAAQ,EAAE,IAC7B5G,QAAQ,KAAKsa,QAAQ,CAAC3U,WAAW,EAAE,CAACX,GAAG,EAAE,EACzC;MACA,OAAO,IAAIe,QAAQ,CAACtW,KAAK,EAAE8X,cAAY,CAACvH,QAAQ,CAAC,CAAC;KACnD,MAAM;MACL,OAAOoE,IAAI;;GAEd,MAAM;IACL,IAAMgO,YAAY,GAAGhO,IAAoB;IACzCK,OAAO,GAAG2N,YAAY;IACtB,IAAIpS,QAAQ,KAAKoS,YAAY,CAACzM,WAAW,EAAE,CAACX,GAAG,EAAE,EAAE;MACjDP,OAAO,GAAGA,OAAO,CAAC4B,cAAc,CAAC,IAAIN,QAAQ,CAAC/F,QAAQ,CAAC,CAAC;;IAE1DoS,YAAY,CAAC1D,YAAY,CAAC5G,cAAc,EAAE,UAAC5B,SAAS,EAAEC,SAAS;MAC7D,IAAMC,YAAY,GAAG+T,oBAAoB,CACvChU,SAAS,EACToT,WAAW,CAACtL,iBAAiB,CAAC/H,SAAS,CAAC,EACxCsT,YAAY,CACb;MACD,IAAIpT,YAAY,KAAKD,SAAS,EAAE;QAC9B1B,OAAO,GAAGA,OAAO,CAAC6B,oBAAoB,CAACJ,SAAS,EAAEE,YAAY,CAAC;;KAElE,CAAC;IACF,OAAO3B,OAAO;;AAElB;;AC5PA;;;;;;;;;;;;;;;;AAqBA;;;AAGA;EAAA;IACU,UAAK,GAAgB,IAAI;IAEhB,aAAQ,GAAoC,IAAI8V,GAAG,EAAE;;;;;;;;EAQtEC,iCAAI,GAAJ,UAAKhiB,IAAU;IACb,IAAI,IAAI,CAAC/I,KAAK,IAAI,IAAI,EAAE;MACtB,OAAO,IAAI,CAACA,KAAK,CAACye,QAAQ,CAAC1V,IAAI,CAAC;KACjC,MAAM,IAAI,CAACA,IAAI,CAACkN,OAAO,EAAE,IAAI,IAAI,CAAC+U,QAAQ,CAACC,IAAI,GAAG,CAAC,EAAE;MACpD,IAAMC,QAAQ,GAAGniB,IAAI,CAACkC,QAAQ,EAAE;MAChClC,IAAI,GAAGA,IAAI,CAACqC,QAAQ,EAAE;MACtB,IAAI,IAAI,CAAC4f,QAAQ,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;QAC/B,IAAM/O,SAAS,GAAG,IAAI,CAAC6O,QAAQ,CAACtnB,GAAG,CAACwnB,QAAQ,CAAC;QAC7C,OAAO/O,SAAS,CAACiP,IAAI,CAACriB,IAAI,CAAC;OAC5B,MAAM;QACL,OAAO,IAAI;;KAEd,MAAM;MACL,OAAO,IAAI;;GAEd;;;;;;;;EASDgiB,qCAAQ,GAAR,UAAShiB,IAAU,EAAEzE,IAAU;IAC7B,IAAIyE,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,IAAI,CAACjW,KAAK,GAAGsE,IAAI;MACjB,IAAI,CAAC0mB,QAAQ,CAACK,KAAK,EAAE;KACtB,MAAM,IAAI,IAAI,CAACrrB,KAAK,KAAK,IAAI,EAAE;MAC9B,IAAI,CAACA,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC+W,WAAW,CAAChO,IAAI,EAAEzE,IAAI,CAAC;KAChD,MAAM;MACL,IAAM4mB,QAAQ,GAAGniB,IAAI,CAACkC,QAAQ,EAAE;MAChC,IAAI,CAAC,IAAI,CAAC+f,QAAQ,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;QAChC,IAAI,CAACF,QAAQ,CAACxnB,GAAG,CAAC0nB,QAAQ,EAAE,IAAIH,kBAAkB,EAAE,CAAC;;MAGvD,IAAM3e,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACwnB,QAAQ,CAAC;MACzCniB,IAAI,GAAGA,IAAI,CAACqC,QAAQ,EAAE;MACtBgB,KAAK,CAACkf,QAAQ,CAACviB,IAAI,EAAEzE,IAAI,CAAC;;GAE7B;;;;;;;EAQDymB,mCAAM,GAAN,UAAOhiB,IAAU;IACf,IAAIA,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,IAAI,CAACjW,KAAK,GAAG,IAAI;MACjB,IAAI,CAACgrB,QAAQ,CAACK,KAAK,EAAE;MACrB,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,IAAI,CAACrrB,KAAK,KAAK,IAAI,EAAE;QACvB,IAAI,IAAI,CAACA,KAAK,CAACgW,UAAU,EAAE,EAAE;;UAE3B,OAAO,KAAK;SACb,MAAM;UACL,IAAMhW,KAAK,GAAG,IAAI,CAACA,KAAK;UACxB,IAAI,CAACA,KAAK,GAAG,IAAI;UAEjB,IAAMurB,MAAI,GAAG,IAAI;UACjBvrB,KAAK,CAACif,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAEyrB,IAAI;YAC3CD,MAAI,CAACD,QAAQ,CAAC,IAAIjhB,IAAI,CAACtK,GAAG,CAAC,EAAEyrB,IAAI,CAAC;WACnC,CAAC;UAEF,OAAO,IAAI,CAACC,MAAM,CAAC1iB,IAAI,CAAC;;OAE3B,MAAM,IAAI,IAAI,CAACiiB,QAAQ,CAACC,IAAI,GAAG,CAAC,EAAE;QACjC,IAAMC,QAAQ,GAAGniB,IAAI,CAACkC,QAAQ,EAAE;QAChClC,IAAI,GAAGA,IAAI,CAACqC,QAAQ,EAAE;QACtB,IAAI,IAAI,CAAC4f,QAAQ,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;UAC/B,IAAMQ,YAAY,GAAG,IAAI,CAACV,QAAQ,CAACtnB,GAAG,CAACwnB,QAAQ,CAAC,CAACO,MAAM,CAAC1iB,IAAI,CAAC;UAC7D,IAAI2iB,YAAY,EAAE;YAChB,IAAI,CAACV,QAAQ,CAACW,MAAM,CAACT,QAAQ,CAAC;;;QAIlC,OAAO,IAAI,CAACF,QAAQ,CAACC,IAAI,KAAK,CAAC;OAChC,MAAM;QACL,OAAO,IAAI;;;GAGhB;;;;;;;;EASDF,wCAAW,GAAX,UAAYa,UAAgB,EAAEC,IAAmC;IAC/D,IAAI,IAAI,CAAC7rB,KAAK,KAAK,IAAI,EAAE;MACvB6rB,IAAI,CAACD,UAAU,EAAE,IAAI,CAAC5rB,KAAK,CAAC;KAC7B,MAAM;MACL,IAAI,CAACif,YAAY,CAAC,UAAClf,GAAG,EAAEyrB,IAAI;QAC1B,IAAMziB,IAAI,GAAG,IAAIsB,IAAI,CAACuhB,UAAU,CAAClrB,QAAQ,EAAE,GAAG,GAAG,GAAGX,GAAG,CAAC;QACxDyrB,IAAI,CAACM,WAAW,CAAC/iB,IAAI,EAAE8iB,IAAI,CAAC;OAC7B,CAAC;;GAEL;;;;;;EAODd,yCAAY,GAAZ,UAAac,IAAgD;IAC3D,IAAI,CAACb,QAAQ,CAACe,OAAO,CAAC,UAACP,IAAI,EAAEzrB,GAAG;MAC9B8rB,IAAI,CAAC9rB,GAAG,EAAEyrB,IAAI,CAAC;KAChB,CAAC;GACH;EACH,yBAAC;AAAD,CAAC;;ACrJD;;;;;;;;;;;;;;;;AAoBA;;;;AAIA,IAAYQ,aAKX;AALD,WAAYA,aAAa;EACvBA,2DAAS;EACTA,mDAAK;EACLA,qEAAc;EACdA,uEAAe;AACjB,CAAC,EALWA,aAAa,KAAbA,aAAa;AAiCzB;;;;;;;AAOA;EACE,yBACSC,QAAiB,EACjBC,UAAmB,EACnBC,OAAsB,EACtBC,MAAe;IAHf,aAAQ,GAARH,QAAQ;IACR,eAAU,GAAVC,UAAU;IACV,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IAEblpB,MAAM,CAAC,CAACkpB,MAAM,IAAIF,UAAU,EAAE,qCAAqC,CAAC;;;;;;EAM/DG,oBAAI,GAAG,IAAIA,eAAe,eACjB,IAAI,EAClB,KAAK,EACL,IAAI,aACQ,KAAK,CAClB;;;;;EAMMA,sBAAM,GAAG,IAAIA,eAAe,CACjC,KAAK,iBACW,IAAI,EACpB,IAAI,aACQ,KAAK,CAClB;;;;;EAMMA,oCAAoB,GAAG,UAAUF,OAAe;IACrD,OAAO,IAAIE,eAAe,CACxB,KAAK,iBACW,IAAI,EACpBF,OAAO,aACK,IAAI,CACjB;GACF;EACH,sBAAC;CA3CD;;AChEA;;;;;;;;;;;;;;;;AAsBA;;;;;;;EAaE,yCAC4BpjB,IAAU,oBACVujB,YAAoC,oBACpCC,MAAe;IAFf,SAAI,GAAJxjB,IAAI;IACJ,iBAAY,GAAZujB,YAAY;IACZ,WAAM,GAANC,MAAM;;IAdlC,SAAI,GAAGP,aAAa,CAACQ,cAAc;;IAGnC,WAAM,GAAGH,eAAe,CAACI,IAAI;;;;;EAiB7BC,wCAAiB,GAAjB,UAAkBjW,SAAiB;IACjC,IAAI,CAAC,IAAI,CAAC1N,IAAI,CAACkN,OAAO,EAAE,EAAE;MACxB/S,MAAM,CACJ,IAAI,CAAC6F,IAAI,CAACkC,QAAQ,EAAE,KAAKwL,SAAS,EAClC,+CAA+C,CAChD;MACD,OAAO,IAAIiW,YAAY,CACrB,IAAI,CAAC3jB,IAAI,CAACqC,QAAQ,EAAE,EACpB,IAAI,CAACkhB,YAAY,EACjB,IAAI,CAACC,MAAM,CACZ;KACF,MAAM,IAAI,IAAI,CAACD,YAAY,CAACtsB,KAAK,IAAI,IAAI,EAAE;MAC1CkD,MAAM,CACJ,IAAI,CAACopB,YAAY,CAACtB,QAAQ,CAAC/U,OAAO,EAAE,EACpC,0DAA0D,CAC3D;;MAED,OAAO,IAAI;KACZ,MAAM;MACL,IAAMkG,SAAS,GAAG,IAAI,CAACmQ,YAAY,CAACK,OAAO,CAAC,IAAItiB,IAAI,CAACoM,SAAS,CAAC,CAAC;MAChE,OAAO,IAAIiW,YAAY,CAACriB,IAAI,CAACuiB,KAAK,EAAEzQ,SAAS,EAAE,IAAI,CAACoQ,MAAM,CAAC;;GAE9D;EACH,mBAAC;AAAD,CAAC;;ACnED;;;;;;;;;;;;;;;;AAqBA,IAAIM,sBAA8D;AAElE;;;;;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAG;EACpB,IAAI,CAACD,sBAAsB,EAAE;IAC3BA,sBAAsB,GAAG,IAAI7T,SAAS,CACpCjT,aAAa,CACd;;EAEH,OAAO8mB,sBAAsB;AAC/B,CAAC;AAED;;;AAGA;;;;;;EAsBE,uBACkB7sB,KAAe,EACfgrB,QAGG;IAHH;MAAAA,WAGZ8B,aAAa,EAAE;IAAA;IAJH,UAAK,GAAL9sB,KAAK;IACL,aAAQ,GAARgrB,QAAQ;;;;;;;EAfnB+B,wBAAU,GAAjB,UAAqB9mB,GAAuB;IAC1C,IAAIulB,IAAI,GAAqBuB,aAAa,CAACH,KAAK;IAChD/lB,IAAI,CAACZ,GAAG,EAAE,UAACwc,SAAiB,EAAEuK,SAAY;MACxCxB,IAAI,GAAGA,IAAI,CAAChoB,GAAG,CAAC,IAAI6G,IAAI,CAACoY,SAAS,CAAC,EAAEuK,SAAS,CAAC;KAChD,CAAC;IACF,OAAOxB,IAAI;GACZ;;;;;EAmBDuB,+BAAO,GAAP;IACE,OAAO,IAAI,CAAC/sB,KAAK,KAAK,IAAI,IAAI,IAAI,CAACgrB,QAAQ,CAAC/U,OAAO,EAAE;GACtD;;;;;;;;;;;;;EAcD8W,wDAAgC,GAAhC,UACE5hB,YAAkB,EAClB8hB,SAA4B;IAE5B,IAAI,IAAI,CAACjtB,KAAK,IAAI,IAAI,IAAIitB,SAAS,CAAC,IAAI,CAACjtB,KAAK,CAAC,EAAE;MAC/C,OAAO;QAAE+I,IAAI,EAAEsB,IAAI,CAACuiB,KAAK;QAAE5sB,KAAK,EAAE,IAAI,CAACA;MAAK,CAAE;KAC/C,MAAM;MACL,IAAImL,YAAY,CAAC8K,OAAO,EAAE,EAAE;QAC1B,OAAO,IAAI;OACZ,MAAM;QACL,IAAMa,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;QACrC,IAAMmB,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;QACtC,IAAI1K,KAAK,KAAK,IAAI,EAAE;UAClB,IAAM8gB,yBAAyB,GAAG9gB,KAAK,CAAC+gB,gCAAgC,CACtEhiB,YAAY,CAACC,QAAQ,EAAE,EACvB6hB,SAAS,CACV;UACD,IAAIC,yBAAyB,IAAI,IAAI,EAAE;YACrC,IAAME,QAAQ,GAAG,IAAI/iB,IAAI,CAACyM,KAAK,CAAC,CAAC1K,KAAK,CACpC8gB,yBAAyB,CAACnkB,IAAI,CAC/B;YACD,OAAO;cAAEA,IAAI,EAAEqkB,QAAQ;cAAEptB,KAAK,EAAEktB,yBAAyB,CAACltB;YAAK,CAAE;WAClE,MAAM;YACL,OAAO,IAAI;;SAEd,MAAM;UACL,OAAO,IAAI;;;;GAIlB;;;;;;;EAQD+sB,gDAAwB,GAAxB,UACE5hB,YAAkB;IAElB,OAAO,IAAI,CAACgiB,gCAAgC,CAAChiB,YAAY,EAAE;MAAM,WAAI;IAAA,EAAC;GACvE;;;;;EAMD4hB,+BAAO,GAAP,UAAQ5hB,YAAkB;IACxB,IAAIA,YAAY,CAAC8K,OAAO,EAAE,EAAE;MAC1B,OAAO,IAAI;KACZ,MAAM;MACL,IAAMa,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;MACrC,IAAMkR,SAAS,GAAG,IAAI,CAAC6O,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;MAC1C,IAAIqF,SAAS,KAAK,IAAI,EAAE;QACtB,OAAOA,SAAS,CAACwQ,OAAO,CAACxhB,YAAY,CAACC,QAAQ,EAAE,CAAC;OAClD,MAAM;QACL,OAAO2hB,aAAa,CAACH,KAAK;;;GAG/B;;;;;;;;EASDG,2BAAG,GAAH,UAAI5hB,YAAkB,EAAEkiB,KAAe;IACrC,IAAIliB,YAAY,CAAC8K,OAAO,EAAE,EAAE;MAC1B,OAAO,IAAI8W,aAAa,CAACM,KAAK,EAAE,IAAI,CAACrC,QAAQ,CAAC;KAC/C,MAAM;MACL,IAAMlU,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;MACrC,IAAMmB,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC,IAAIiW,aAAa,CAACH,KAAK;MAC7D,IAAMU,QAAQ,GAAGlhB,KAAK,CAAC5I,GAAG,CAAC2H,YAAY,CAACC,QAAQ,EAAE,EAAEiiB,KAAK,CAAC;MAC1D,IAAMpP,WAAW,GAAG,IAAI,CAAC+M,QAAQ,CAACxR,MAAM,CAAC1C,KAAK,EAAEwW,QAAQ,CAAC;MACzD,OAAO,IAAIP,aAAa,CAAC,IAAI,CAAC/sB,KAAK,EAAEie,WAAW,CAAC;;GAEpD;;;;;;;EAQD8O,8BAAM,GAAN,UAAO5hB,YAAkB;IACvB,IAAIA,YAAY,CAAC8K,OAAO,EAAE,EAAE;MAC1B,IAAI,IAAI,CAAC+U,QAAQ,CAAC/U,OAAO,EAAE,EAAE;QAC3B,OAAO8W,aAAa,CAACH,KAAK;OAC3B,MAAM;QACL,OAAO,IAAIG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC/B,QAAQ,CAAC;;KAEhD,MAAM;MACL,IAAMlU,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;MACrC,IAAMmB,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;MACtC,IAAI1K,KAAK,EAAE;QACT,IAAMkhB,QAAQ,GAAGlhB,KAAK,CAAC3I,MAAM,CAAC0H,YAAY,CAACC,QAAQ,EAAE,CAAC;QACtD,IAAI6S,WAAW;QACf,IAAIqP,QAAQ,CAACrX,OAAO,EAAE,EAAE;UACtBgI,WAAW,GAAG,IAAI,CAAC+M,QAAQ,CAACvnB,MAAM,CAACqT,KAAK,CAAC;SAC1C,MAAM;UACLmH,WAAW,GAAG,IAAI,CAAC+M,QAAQ,CAACxR,MAAM,CAAC1C,KAAK,EAAEwW,QAAQ,CAAC;;QAErD,IAAI,IAAI,CAACttB,KAAK,KAAK,IAAI,IAAIie,WAAW,CAAChI,OAAO,EAAE,EAAE;UAChD,OAAO8W,aAAa,CAACH,KAAK;SAC3B,MAAM;UACL,OAAO,IAAIG,aAAa,CAAC,IAAI,CAAC/sB,KAAK,EAAEie,WAAW,CAAC;;OAEpD,MAAM;QACL,OAAO,IAAI;;;GAGhB;;;;;;;EAQD8O,2BAAG,GAAH,UAAI5hB,YAAkB;IACpB,IAAIA,YAAY,CAAC8K,OAAO,EAAE,EAAE;MAC1B,OAAO,IAAI,CAACjW,KAAK;KAClB,MAAM;MACL,IAAM8W,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;MACrC,IAAMmB,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;MACtC,IAAI1K,KAAK,EAAE;QACT,OAAOA,KAAK,CAAC1I,GAAG,CAACyH,YAAY,CAACC,QAAQ,EAAE,CAAC;OAC1C,MAAM;QACL,OAAO,IAAI;;;GAGhB;;;;;;;;EASD2hB,+BAAO,GAAP,UAAQ5hB,YAAkB,EAAEoiB,OAAyB;IACnD,IAAIpiB,YAAY,CAAC8K,OAAO,EAAE,EAAE;MAC1B,OAAOsX,OAAO;KACf,MAAM;MACL,IAAMzW,KAAK,GAAG3L,YAAY,CAACF,QAAQ,EAAE;MACrC,IAAMmB,KAAK,GAAG,IAAI,CAAC4e,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC,IAAIiW,aAAa,CAACH,KAAK;MAC7D,IAAMU,QAAQ,GAAGlhB,KAAK,CAACohB,OAAO,CAACriB,YAAY,CAACC,QAAQ,EAAE,EAAEmiB,OAAO,CAAC;MAChE,IAAItP,WAAW;MACf,IAAIqP,QAAQ,CAACrX,OAAO,EAAE,EAAE;QACtBgI,WAAW,GAAG,IAAI,CAAC+M,QAAQ,CAACvnB,MAAM,CAACqT,KAAK,CAAC;OAC1C,MAAM;QACLmH,WAAW,GAAG,IAAI,CAAC+M,QAAQ,CAACxR,MAAM,CAAC1C,KAAK,EAAEwW,QAAQ,CAAC;;MAErD,OAAO,IAAIP,aAAa,CAAC,IAAI,CAAC/sB,KAAK,EAAEie,WAAW,CAAC;;GAEpD;;;;;;;;;EAUD8O,4BAAI,GAAJ,UAAQpoB,EAA6D;IACnE,OAAO,IAAI,CAAC8oB,KAAK,CAACpjB,IAAI,CAACuiB,KAAK,EAAEjoB,EAAE,CAAC;GAClC;;;;;;;;;EAUOooB,6BAAK,GAAb,UACEW,SAAe,EACf/oB,EAAoE;IAEpE,IAAMgpB,KAAK,GAAuB,EAAE;IACpC,IAAI,CAAC3C,QAAQ,CAAC9R,gBAAgB,CAC5B,UAACgS,QAAgB,EAAE/O,SAA2B;MAC5CwR,KAAK,CAACzC,QAAQ,CAAC,GAAG/O,SAAS,CAACsR,KAAK,CAACC,SAAS,CAACthB,KAAK,CAAC8e,QAAQ,CAAC,EAAEvmB,EAAE,CAAC;KACjE,CACF;IACD,OAAOA,EAAE,CAAC+oB,SAAS,EAAE,IAAI,CAAC1tB,KAAK,EAAE2tB,KAAK,CAAC;GACxC;;;;;;;;EASDZ,kCAAU,GAAV,UAAchkB,IAAU,EAAE1B,CAAqC;IAC7D,OAAO,IAAI,CAACumB,WAAW,CAAC7kB,IAAI,EAAEsB,IAAI,CAACuiB,KAAK,EAAEvlB,CAAC,CAAC;GAC7C;EAEO0lB,mCAAW,GAAnB,UACEc,YAAkB,EAClBH,SAAe,EACfrmB,CAAqC;IAErC,IAAMuR,MAAM,GAAG,IAAI,CAAC5Y,KAAK,GAAGqH,CAAC,CAACqmB,SAAS,EAAE,IAAI,CAAC1tB,KAAK,CAAC,GAAG,KAAK;IAC5D,IAAI4Y,MAAM,EAAE;MACV,OAAOA,MAAM;KACd,MAAM;MACL,IAAIiV,YAAY,CAAC5X,OAAO,EAAE,EAAE;QAC1B,OAAO,IAAI;OACZ,MAAM;QACL,IAAMa,KAAK,GAAG+W,YAAY,CAAC5iB,QAAQ,EAAG;QACtC,IAAM6iB,SAAS,GAAG,IAAI,CAAC9C,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;QAC1C,IAAIgX,SAAS,EAAE;UACb,OAAOA,SAAS,CAACF,WAAW,CAC1BC,YAAY,CAACziB,QAAQ,EAAE,EACvBsiB,SAAS,CAACthB,KAAK,CAAC0K,KAAK,CAAC,EACtBzP,CAAC,CACF;SACF,MAAM;UACL,OAAO,IAAI;;;;GAIlB;;;;;;;EAQD0lB,qCAAa,GAAb,UACEhkB,IAAU,EACV1B,CAAiC;IAEjC,OAAO,IAAI,CAAC0mB,cAAc,CAAChlB,IAAI,EAAEsB,IAAI,CAACuiB,KAAK,EAAEvlB,CAAC,CAAC;GAChD;EAEO0lB,sCAAc,GAAtB,UACEc,YAAkB,EAClBG,mBAAyB,EACzB3mB,CAAiC;IAEjC,IAAIwmB,YAAY,CAAC5X,OAAO,EAAE,EAAE;MAC1B,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,IAAI,CAACjW,KAAK,EAAE;QACdqH,CAAC,CAAC2mB,mBAAmB,EAAE,IAAI,CAAChuB,KAAK,CAAC;;MAEpC,IAAM8W,KAAK,GAAG+W,YAAY,CAAC5iB,QAAQ,EAAE;MACrC,IAAM6iB,SAAS,GAAG,IAAI,CAAC9C,QAAQ,CAACtnB,GAAG,CAACoT,KAAK,CAAC;MAC1C,IAAIgX,SAAS,EAAE;QACb,OAAOA,SAAS,CAACC,cAAc,CAC7BF,YAAY,CAACziB,QAAQ,EAAE,EACvB4iB,mBAAmB,CAAC5hB,KAAK,CAAC0K,KAAK,CAAC,EAChCzP,CAAC,CACF;OACF,MAAM;QACL,OAAO0lB,aAAa,CAACH,KAAK;;;GAG/B;;;;;;;;EASDG,+BAAO,GAAP,UAAQ1lB,CAAiC;IACvC,IAAI,CAAC4mB,QAAQ,CAAC5jB,IAAI,CAACuiB,KAAK,EAAEvlB,CAAC,CAAC;GAC7B;EAEO0lB,gCAAQ,GAAhB,UACEiB,mBAAyB,EACzB3mB,CAAiC;IAEjC,IAAI,CAAC2jB,QAAQ,CAAC9R,gBAAgB,CAAC,UAACzC,SAAS,EAAE0F,SAAS;MAClDA,SAAS,CAAC8R,QAAQ,CAACD,mBAAmB,CAAC5hB,KAAK,CAACqK,SAAS,CAAC,EAAEpP,CAAC,CAAC;KAC5D,CAAC;IACF,IAAI,IAAI,CAACrH,KAAK,EAAE;MACdqH,CAAC,CAAC2mB,mBAAmB,EAAE,IAAI,CAAChuB,KAAK,CAAC;;GAErC;;;;;EAMD+sB,oCAAY,GAAZ,UAAa1lB,CAAmC;IAC9C,IAAI,CAAC2jB,QAAQ,CAAC9R,gBAAgB,CAC5B,UAACzC,SAAiB,EAAE0F,SAA2B;MAC7C,IAAIA,SAAS,CAACnc,KAAK,EAAE;QACnBqH,CAAC,CAACoP,SAAS,EAAE0F,SAAS,CAACnc,KAAK,CAAC;;KAEhC,CACF;GACF;;EAhWM+sB,mBAAK,GAAG,IAAIA,aAAa,CAAM,IAAI,CAAC;EAiW7C,oBAAC;CAnWD;;ACzCA;;;;;;;;;;;;;;;;AAoBA;;;;;;AAMA;EAIE,wBAAmBxY,MAAuB,EAASxL,IAAU;IAA1C,WAAM,GAANwL,MAAM;IAA0B,SAAI,GAAJxL,IAAI;;IAFvD,SAAI,GAAGijB,aAAa,CAACkC,eAAe;;EAIpCC,0CAAiB,GAAjB,UAAkB1X,SAAiB;IACjC,IAAI,IAAI,CAAC1N,IAAI,CAACkN,OAAO,EAAE,EAAE;MACvB,OAAO,IAAIkY,cAAc,CAAC,IAAI,CAAC5Z,MAAM,EAAElK,IAAI,CAACuiB,KAAK,CAAC;KACnD,MAAM;MACL,OAAO,IAAIuB,cAAc,CAAC,IAAI,CAAC5Z,MAAM,EAAE,IAAI,CAACxL,IAAI,CAACqC,QAAQ,EAAE,CAAC;;GAE/D;EACH,qBAAC;AAAD,CAAC;;ACvCD;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAOA;EAIE,mBACSmJ,MAAuB,EACvBxL,IAAU,EACVgZ,IAAU;IAFV,WAAM,GAANxN,MAAM;IACN,SAAI,GAAJxL,IAAI;IACJ,SAAI,GAAJgZ,IAAI;;IALb,SAAI,GAAGiK,aAAa,CAACoC,SAAS;;EAQ9BC,qCAAiB,GAAjB,UAAkB5X,SAAiB;IACjC,IAAI,IAAI,CAAC1N,IAAI,CAACkN,OAAO,EAAE,EAAE;MACvB,OAAO,IAAIoY,SAAS,CAClB,IAAI,CAAC9Z,MAAM,EACXlK,IAAI,CAACuiB,KAAK,EACV,IAAI,CAAC7K,IAAI,CAACvD,iBAAiB,CAAC/H,SAAS,CAAC,CACvC;KACF,MAAM;MACL,OAAO,IAAI4X,SAAS,CAAC,IAAI,CAAC9Z,MAAM,EAAE,IAAI,CAACxL,IAAI,CAACqC,QAAQ,EAAE,EAAE,IAAI,CAAC2W,IAAI,CAAC;;GAErE;EACH,gBAAC;AAAD,CAAC;;ACjDD;;;;;;;;;;;;;;;;AAwBA;;;;;;;AAOA;EAIE,kCAC4BxN,MAAuB,oBACvBxL,IAAU,oBACViiB,QAA6B;IAF7B,WAAM,GAANzW,MAAM;IACN,SAAI,GAAJxL,IAAI;IACJ,aAAQ,GAARiiB,QAAQ;;IALpC,SAAI,GAAGgB,aAAa,CAACsC,KAAK;;;;;EAW1BC,iCAAiB,GAAjB,UAAkB9X,SAAiB;IACjC,IAAI,IAAI,CAAC1N,IAAI,CAACkN,OAAO,EAAE,EAAE;MACvB,IAAMkG,SAAS,GAAG,IAAI,CAAC6O,QAAQ,CAAC2B,OAAO,CAAC,IAAItiB,IAAI,CAACoM,SAAS,CAAC,CAAC;MAC5D,IAAI0F,SAAS,CAAClG,OAAO,EAAE,EAAE;;QAEvB,OAAO,IAAI;OACZ,MAAM,IAAIkG,SAAS,CAACnc,KAAK,EAAE;;QAE1B,OAAO,IAAIquB,SAAS,CAAC,IAAI,CAAC9Z,MAAM,EAAElK,IAAI,CAACuiB,KAAK,EAAEzQ,SAAS,CAACnc,KAAK,CAAC;OAC/D,MAAM;;QAEL,OAAO,IAAIuuB,KAAK,CAAC,IAAI,CAACha,MAAM,EAAElK,IAAI,CAACuiB,KAAK,EAAEzQ,SAAS,CAAC;;KAEvD,MAAM;MACLjZ,MAAM,CACJ,IAAI,CAAC6F,IAAI,CAACkC,QAAQ,EAAE,KAAKwL,SAAS,EAClC,gEAAgE,CACjE;MACD,OAAO,IAAI8X,KAAK,CAAC,IAAI,CAACha,MAAM,EAAE,IAAI,CAACxL,IAAI,CAACqC,QAAQ,EAAE,EAAE,IAAI,CAAC4f,QAAQ,CAAC;;GAErE;;;;EAKDuD,wBAAQ,GAAR;IACE,OACE,YAAY,GACZ,IAAI,CAACxlB,IAAI,GACT,IAAI,GACJ,IAAI,CAACwL,MAAM,CAAC7T,QAAQ,EAAE,GACtB,UAAU,GACV,IAAI,CAACsqB,QAAQ,CAACtqB,QAAQ,EAAE,GACxB,GAAG;GAEN;EACH,YAAC;AAAD,CAAC;;AChFD;;;;;;;;;;;;;;;;AAoBA;;;;;;AAMA;;;;;;EAME,mBACUyhB,KAAW,EACXqM,iBAA0B,EAC1BC,SAAkB;IAFlB,UAAK,GAALtM,KAAK;IACL,sBAAiB,GAAjBqM,iBAAiB;IACjB,cAAS,GAATC,SAAS;;;;;;EAOnBC,sCAAkB,GAAlB;IACE,OAAO,IAAI,CAACF,iBAAiB;GAC9B;;;;;EAMDE,8BAAU,GAAV;IACE,OAAO,IAAI,CAACD,SAAS;GACtB;;;;;EAMDC,qCAAiB,GAAjB,UAAkB3lB,IAAU;IAC1B,IAAIA,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,OAAO,IAAI,CAAC0Y,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAACF,SAAS;;IAGrD,IAAMvD,QAAQ,GAAGniB,IAAI,CAACkC,QAAQ,EAAE;IAChC,OAAO,IAAI,CAAC2jB,kBAAkB,CAAC1D,QAAQ,CAAC;GACzC;;;;;EAMDwD,sCAAkB,GAAlB,UAAmB3uB,GAAW;IAC5B,OACG,IAAI,CAAC4uB,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAACF,SAAS,IAAK,IAAI,CAACtM,KAAK,CAAC0M,QAAQ,CAAC9uB,GAAG,CAAC;GAE7E;;;;EAKD2uB,2BAAO,GAAP;IACE,OAAO,IAAI,CAACvM,KAAK;GAClB;EACH,gBAAC;AAAD,CAAC;;ACnFD;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAOA;;;;;;EAME,mBACmB2M,WAAsB,EACtBC,YAAuB;IADvB,gBAAW,GAAXD,WAAW;IACX,iBAAY,GAAZC,YAAY;;;;;;;;EA0B/BC,mCAAe,GAAf,UACEC,SAAe,EACfC,QAAiB,EACjBC,QAAiB;IAEjB,OAAO,IAAIH,SAAS,CAClB,IAAIN,SAAS,CAACO,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,EAC5C,IAAI,CAACJ,YAAY,CAClB;GACF;;;;;;;EAQDC,oCAAgB,GAAhB,UACEI,UAAgB,EAChBF,QAAiB,EACjBC,QAAiB;IAEjB,OAAO,IAAIH,SAAS,CAClB,IAAI,CAACF,WAAW,EAChB,IAAIJ,SAAS,CAACU,UAAU,EAAEF,QAAQ,EAAEC,QAAQ,CAAC,CAC9C;GACF;;;;EAKDH,iCAAa,GAAb;IACE,OAAO,IAAI,CAACF,WAAW;GACxB;;;;EAKDE,wCAAoB,GAApB;IACE,OAAO,IAAI,CAACF,WAAW,CAACH,kBAAkB,EAAE,GACxC,IAAI,CAACG,WAAW,CAACO,OAAO,EAAE,GAC1B,IAAI;GACT;;;;EAKDL,kCAAc,GAAd;IACE,OAAO,IAAI,CAACD,YAAY;GACzB;;;;EAKDC,yCAAqB,GAArB;IACE,OAAO,IAAI,CAACD,YAAY,CAACJ,kBAAkB,EAAE,GACzC,IAAI,CAACI,YAAY,CAACM,OAAO,EAAE,GAC3B,IAAI;GACT;;;;;EA7EML,eAAK,GAAG,IAAIA,SAAS,CAC1B,IAAIN,SAAS,CACXpQ,YAAY,CAAC/H,UAAU,uBACD,KAAK,eACb,KAAK,CACpB,EACD,IAAImY,SAAS,CACXpQ,YAAY,CAAC/H,UAAU,uBACD,KAAK,eACb,KAAK,CACpB,CACF;EAmEH,gBAAC;CA7FD;;AC5BA;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;EACE,gBACStI,IAAY,EACZ6V,YAAkB,EAClBrN,SAAkB,EAClB6Y,OAAc,EACdtM,QAAwB;IAJxB,SAAI,GAAJ/U,IAAI;IACJ,iBAAY,GAAZ6V,YAAY;IACZ,cAAS,GAATrN,SAAS;IACT,YAAO,GAAP6Y,OAAO;IACP,aAAQ,GAARtM,QAAQ;;;;;;EAOVuM,kBAAW,GAAlB,UAAmBlc,QAAc;IAC/B,OAAO,IAAIkc,MAAM,CAACA,MAAM,CAACC,KAAK,EAAEnc,QAAQ,CAAC;GAC1C;;;;;;EAOMkc,uBAAgB,GAAvB,UAAwBrE,QAAgB,EAAE7X,QAAc;IACtD,OAAO,IAAIkc,MAAM,CAACA,MAAM,CAACE,WAAW,EAAEpc,QAAQ,EAAE6X,QAAQ,CAAC;GAC1D;;;;;;EAOMqE,yBAAkB,GAAzB,UAA0BrE,QAAgB,EAAE7X,QAAc;IACxD,OAAO,IAAIkc,MAAM,CAACA,MAAM,CAACG,aAAa,EAAErc,QAAQ,EAAE6X,QAAQ,CAAC;GAC5D;;;;;;;EAQMqE,yBAAkB,GAAzB,UACErE,QAAgB,EAChByE,WAAiB,EACjBC,WAAiB;IAEjB,OAAO,IAAIL,MAAM,CAACA,MAAM,CAACM,aAAa,EAAEF,WAAW,EAAEzE,QAAQ,EAAE0E,WAAW,CAAC;GAC5E;;;;;;EAOML,uBAAgB,GAAvB,UAAwBrE,QAAgB,EAAE7X,QAAc;IACtD,OAAO,IAAIkc,MAAM,CAACA,MAAM,CAACO,WAAW,EAAEzc,QAAQ,EAAE6X,QAAQ,CAAC;GAC1D;;;EAIMqE,kBAAW,GAAG,aAAa;;EAG3BA,oBAAa,GAAG,eAAe;;EAG/BA,oBAAa,GAAG,eAAe;;EAG/BA,kBAAW,GAAG,aAAa;;EAG3BA,YAAK,GAAG,OAAO;EACxB,aAAC;CAzED;;AC5BA;;;;;;;;;;;;;;;;AA4BA;;;;;;;AAOA;EACE,uBAA6BlN,MAAa;IAAb,WAAM,GAANA,MAAM;;EAEnC0N,mCAAW,GAAX,UACEhO,IAAU,EACVhiB,GAAW,EACXutB,QAAc,EACd0C,YAAkB,EAClBzb,MAA2B,EAC3B0b,oBAAmD;IAEnD/sB,MAAM,CACJ6e,IAAI,CAACmO,SAAS,CAAC,IAAI,CAAC7N,MAAM,CAAC,EAC3B,mDAAmD,CACpD;IACD,IAAM8N,QAAQ,GAAGpO,IAAI,CAACvD,iBAAiB,CAACze,GAAG,CAAC;;IAE5C,IACEowB,QAAQ,CAAC1R,QAAQ,CAACuR,YAAY,CAAC,CAACnY,MAAM,CAACyV,QAAQ,CAAC7O,QAAQ,CAACuR,YAAY,CAAC,CAAC,EACvE;;;;MAIA,IAAIG,QAAQ,CAACla,OAAO,EAAE,KAAKqX,QAAQ,CAACrX,OAAO,EAAE,EAAE;;;;QAK7C,OAAO8L,IAAI;;;IAIf,IAAIkO,oBAAoB,IAAI,IAAI,EAAE;MAChC,IAAI3C,QAAQ,CAACrX,OAAO,EAAE,EAAE;QACtB,IAAI8L,IAAI,CAAC8M,QAAQ,CAAC9uB,GAAG,CAAC,EAAE;UACtBkwB,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACc,kBAAkB,CAACtwB,GAAG,EAAEowB,QAAQ,CAAC,CACzC;SACF,MAAM;UACLjtB,MAAM,CACJ6e,IAAI,CAAC/L,UAAU,EAAE,EACjB,qEAAqE,CACtE;;OAEJ,MAAM,IAAIma,QAAQ,CAACla,OAAO,EAAE,EAAE;QAC7Bga,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACe,gBAAgB,CAACvwB,GAAG,EAAEutB,QAAQ,CAAC,CACvC;OACF,MAAM;QACL2C,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACgB,kBAAkB,CAACxwB,GAAG,EAAEutB,QAAQ,EAAE6C,QAAQ,CAAC,CACnD;;;IAGL,IAAIpO,IAAI,CAAC/L,UAAU,EAAE,IAAIsX,QAAQ,CAACrX,OAAO,EAAE,EAAE;MAC3C,OAAO8L,IAAI;KACZ,MAAM;;MAEL,OAAOA,IAAI,CAAClL,oBAAoB,CAAC9W,GAAG,EAAEutB,QAAQ,CAAC,CAACkD,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;;GAEzE;;;;EAKD0N,sCAAc,GAAd,UACET,OAAa,EACbmB,OAAa,EACbR,oBAAmD;IAEnD,IAAIA,oBAAoB,IAAI,IAAI,EAAE;MAChC,IAAI,CAACX,OAAO,CAACtZ,UAAU,EAAE,EAAE;QACzBsZ,OAAO,CAACrQ,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAE2W,SAAS;UAClD,IAAI,CAAC+Z,OAAO,CAAC5B,QAAQ,CAAC9uB,GAAG,CAAC,EAAE;YAC1BkwB,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACc,kBAAkB,CAACtwB,GAAG,EAAE2W,SAAS,CAAC,CAC1C;;SAEJ,CAAC;;MAEJ,IAAI,CAAC+Z,OAAO,CAACza,UAAU,EAAE,EAAE;QACzBya,OAAO,CAACxR,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAE2W,SAAS;UAClD,IAAI4Y,OAAO,CAACT,QAAQ,CAAC9uB,GAAG,CAAC,EAAE;YACzB,IAAMowB,QAAQ,GAAGb,OAAO,CAAC9Q,iBAAiB,CAACze,GAAG,CAAC;YAC/C,IAAI,CAACowB,QAAQ,CAACtY,MAAM,CAACnB,SAAS,CAAC,EAAE;cAC/BuZ,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACgB,kBAAkB,CAACxwB,GAAG,EAAE2W,SAAS,EAAEyZ,QAAQ,CAAC,CACpD;;WAEJ,MAAM;YACLF,oBAAoB,CAACG,gBAAgB,CACnCb,MAAM,CAACe,gBAAgB,CAACvwB,GAAG,EAAE2W,SAAS,CAAC,CACxC;;SAEJ,CAAC;;;IAGN,OAAO+Z,OAAO,CAACD,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;GACtC;;;;EAKD0N,sCAAc,GAAd,UAAeT,OAAa,EAAEzQ,WAAiB;IAC7C,IAAIyQ,OAAO,CAACrZ,OAAO,EAAE,EAAE;MACrB,OAAOqI,YAAY,CAAC/H,UAAU;KAC/B,MAAM;MACL,OAAO+Y,OAAO,CAAC1Y,cAAc,CAACiI,WAAW,CAAC;;GAE7C;;;;EAKDkR,oCAAY,GAAZ;IACE,OAAO,KAAK;GACb;;;;EAKDA,wCAAgB,GAAhB;IACE,OAAO,IAAI;GACZ;;;;EAKDA,gCAAQ,GAAR;IACE,OAAO,IAAI,CAAC1N,MAAM;GACnB;EACH,oBAAC;AAAD,CAAC;;ACtKD;;;;;;;;;;;;;;;;AAoBA;EAAA;IACmB,cAAS,GAAwB,IAAIyI,GAAG,EAAE;;EAE3D4F,iDAAgB,GAAhB,UAAiB/M,MAAc;IAC7B,IAAM1V,IAAI,GAAG0V,MAAM,CAAC1V,IAAI;IACxB,IAAMid,QAAQ,GAAGvH,MAAM,CAAClN,SAAU;IAClCvT,MAAM,CACJ+K,IAAI,KAAKshB,MAAM,CAACE,WAAW,IACzBxhB,IAAI,KAAKshB,MAAM,CAACM,aAAa,IAC7B5hB,IAAI,KAAKshB,MAAM,CAACG,aAAa,EAC/B,2CAA2C,CAC5C;IACDxsB,MAAM,CACJgoB,QAAQ,KAAK,WAAW,EACxB,iDAAiD,CAClD;IACD,IAAMyF,SAAS,GAAG,IAAI,CAACC,SAAS,CAACltB,GAAG,CAACwnB,QAAQ,CAAC;IAC9C,IAAIyF,SAAS,EAAE;MACb,IAAME,OAAO,GAAGF,SAAS,CAAC1iB,IAAI;MAC9B,IAAIA,IAAI,KAAKshB,MAAM,CAACE,WAAW,IAAIoB,OAAO,KAAKtB,MAAM,CAACG,aAAa,EAAE;QACnE,IAAI,CAACkB,SAAS,CAACptB,GAAG,CAChB0nB,QAAQ,EACRqE,MAAM,CAACgB,kBAAkB,CACvBrF,QAAQ,EACRvH,MAAM,CAACG,YAAY,EACnB6M,SAAS,CAAC7M,YAAY,CACvB,CACF;OACF,MAAM,IACL7V,IAAI,KAAKshB,MAAM,CAACG,aAAa,IAC7BmB,OAAO,KAAKtB,MAAM,CAACE,WAAW,EAC9B;QACA,IAAI,CAACmB,SAAS,CAACjF,MAAM,CAACT,QAAQ,CAAC;OAChC,MAAM,IACLjd,IAAI,KAAKshB,MAAM,CAACG,aAAa,IAC7BmB,OAAO,KAAKtB,MAAM,CAACM,aAAa,EAChC;QACA,IAAI,CAACe,SAAS,CAACptB,GAAG,CAChB0nB,QAAQ,EACRqE,MAAM,CAACc,kBAAkB,CAACnF,QAAQ,EAAEyF,SAAS,CAACrB,OAAO,CAAC,CACvD;OACF,MAAM,IACLrhB,IAAI,KAAKshB,MAAM,CAACM,aAAa,IAC7BgB,OAAO,KAAKtB,MAAM,CAACE,WAAW,EAC9B;QACA,IAAI,CAACmB,SAAS,CAACptB,GAAG,CAChB0nB,QAAQ,EACRqE,MAAM,CAACe,gBAAgB,CAACpF,QAAQ,EAAEvH,MAAM,CAACG,YAAY,CAAC,CACvD;OACF,MAAM,IACL7V,IAAI,KAAKshB,MAAM,CAACM,aAAa,IAC7BgB,OAAO,KAAKtB,MAAM,CAACM,aAAa,EAChC;QACA,IAAI,CAACe,SAAS,CAACptB,GAAG,CAChB0nB,QAAQ,EACRqE,MAAM,CAACgB,kBAAkB,CACvBrF,QAAQ,EACRvH,MAAM,CAACG,YAAY,EACnB6M,SAAS,CAACrB,OAAO,CAClB,CACF;OACF,MAAM;QACL,MAAM9Z,cAAc,CAClB,kCAAkC,GAChCmO,MAAM,GACN,kBAAkB,GAClBgN,SAAS,CACZ;;KAEJ,MAAM;MACL,IAAI,CAACC,SAAS,CAACptB,GAAG,CAAC0nB,QAAQ,EAAEvH,MAAM,CAAC;;GAEvC;EAED+M,2CAAU,GAAV;IACE,OAAOhuB,KAAK,CAACouB,IAAI,CAAC,IAAI,CAACF,SAAS,CAAClH,MAAM,EAAE,CAAC;GAC3C;EACH,6BAAC;AAAD,CAAC;;ACjGD;;;;;;;;;;;;;;;;AAmDA;;;;;;;AAOA;AACA;EAAA;;;;EAIEqH,iDAAgB,GAAhB,UAAiB7F,QAAiB;IAChC,OAAO,IAAI;GACZ;;;;EAKD6F,mDAAkB,GAAlB,UACE/Z,KAAa,EACb5K,KAAiB,EACjBtE,OAAiB;IAEjB,OAAO,IAAI;GACZ;EACH,6BAAC;AAAD,CAAC;AAED;;;;;AAKO,IAAMkpB,wBAAwB,GAAG,IAAID,sBAAsB,EAAE;AAEpE;;;;;;;AAOA;;;;;;EAME,sCACUE,OAAqB,EACrBC,UAAqB,EACrBC,uBAA2C;IAA3C;MAAAA,8BAA2C;IAAA;IAF3C,YAAO,GAAPF,OAAO;IACP,eAAU,GAAVC,UAAU;IACV,4BAAuB,GAAvBC,uBAAuB;;;;;EAMjCC,uDAAgB,GAAhB,UAAiBlG,QAAgB;IAC/B,IAAMvW,IAAI,GAAG,IAAI,CAACuc,UAAU,CAACG,aAAa,EAAE;IAC5C,IAAI1c,IAAI,CAACia,kBAAkB,CAAC1D,QAAQ,CAAC,EAAE;MACrC,OAAOvW,IAAI,CAAC0a,OAAO,EAAE,CAAC7Q,iBAAiB,CAAC0M,QAAQ,CAAC;KAClD,MAAM;MACL,IAAMoG,UAAU,GACd,IAAI,CAACH,uBAAuB,IAAI,IAAI,GAChC,IAAIzC,SAAS,CAAC,IAAI,CAACyC,uBAAuB,EAAE,IAAI,EAAE,KAAK,CAAC,GACxD,IAAI,CAACD,UAAU,CAACK,cAAc,EAAE;MACtC,OAAO,IAAI,CAACN,OAAO,CAACO,iBAAiB,CAACtG,QAAQ,EAAEoG,UAAU,CAAC;;GAE9D;;;;EAKDF,yDAAkB,GAAlB,UACEpa,KAAY,EACZ5K,KAAgB,EAChBtE,OAAgB;IAEhB,IAAM2pB,kBAAkB,GACtB,IAAI,CAACN,uBAAuB,IAAI,IAAI,GAChC,IAAI,CAACA,uBAAuB,GAC5B,IAAI,CAACD,UAAU,CAACQ,qBAAqB,EAAE;IAC7C,IAAMC,KAAK,GAAG,IAAI,CAACV,OAAO,CAACW,gBAAgB,CACzCH,kBAAkB,EAClBrlB,KAAK,EACL,CAAC,EACDtE,OAAO,EACPkP,KAAK,CACN;IACD,IAAI2a,KAAK,CAACnvB,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,IAAI;KACZ,MAAM;MACL,OAAOmvB,KAAK,CAAC,CAAC,CAAC;;GAElB;EACH,mCAAC;AAAD,CAAC;;AClJD;;;;;;;;;;;;;;;;AAsCA;;;;AAIA;;;;;EAKE,yBACkBE,SAAoB,EACpBC,OAAiB;IADjB,cAAS,GAATD,SAAS;IACT,YAAO,GAAPC,OAAO;;EAE3B,sBAAC;AAAD,CAAC;AAED;;;AAGA;;;;EAIE,uBAA6BC,OAAmB;IAAnB,YAAO,GAAPA,OAAO;;;;;EAKpCC,qCAAa,GAAb,UAAcH,SAAoB;IAChC3uB,MAAM,CACJ2uB,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE,CAACa,SAAS,CAAC,IAAI,CAAC6B,OAAO,CAAClO,QAAQ,EAAE,CAAC,EACtE,wBAAwB,CACzB;IACD3gB,MAAM,CACJ2uB,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE,CAACa,SAAS,CAAC,IAAI,CAAC6B,OAAO,CAAClO,QAAQ,EAAE,CAAC,EACvE,yBAAyB,CAC1B;GACF;;;;;;;;EASDmO,sCAAc,GAAd,UACEC,YAAuB,EACvBC,SAAoB,EACpBC,WAAyB,EACzBC,aAA0B;IAE1B,IAAMC,WAAW,GAAG,IAAI3B,sBAAsB,EAAE;IAChD,IAAI4B,YAAY,EAAEC,gBAAgB;IAClC,IAAIL,SAAS,CAACjkB,IAAI,KAAK+d,aAAa,CAACoC,SAAS,EAAE;MAC9C,IAAMoE,SAAS,GAAGN,SAAsB;MACxC,IAAIM,SAAS,CAACje,MAAM,CAAC0X,QAAQ,EAAE;QAC7BqG,YAAY,GAAG,IAAI,CAACG,mBAAmB,CACrCR,YAAY,EACZO,SAAS,CAACzpB,IAAI,EACdypB,SAAS,CAACzQ,IAAI,EACdoQ,WAAW,EACXC,aAAa,EACbC,WAAW,CACZ;OACF,MAAM;QACLnvB,MAAM,CAACsvB,SAAS,CAACje,MAAM,CAAC2X,UAAU,EAAE,iBAAiB,CAAC;;;;QAItDqG,gBAAgB,GACdC,SAAS,CAACje,MAAM,CAAC6X,MAAM,IACtB6F,YAAY,CAACV,cAAc,EAAE,CAACmB,UAAU,EAAE,IACzC,CAACF,SAAS,CAACzpB,IAAI,CAACkN,OAAO,EAAG;QAC9Bqc,YAAY,GAAG,IAAI,CAACK,qBAAqB,CACvCV,YAAY,EACZO,SAAS,CAACzpB,IAAI,EACdypB,SAAS,CAACzQ,IAAI,EACdoQ,WAAW,EACXC,aAAa,EACbG,gBAAgB,EAChBF,WAAW,CACZ;;KAEJ,MAAM,IAAIH,SAAS,CAACjkB,IAAI,KAAK+d,aAAa,CAACsC,KAAK,EAAE;MACjD,IAAMsE,KAAK,GAAGV,SAAkB;MAChC,IAAIU,KAAK,CAACre,MAAM,CAAC0X,QAAQ,EAAE;QACzBqG,YAAY,GAAG,IAAI,CAACO,eAAe,CACjCZ,YAAY,EACZW,KAAK,CAAC7pB,IAAI,EACV6pB,KAAK,CAAC5H,QAAQ,EACdmH,WAAW,EACXC,aAAa,EACbC,WAAW,CACZ;OACF,MAAM;QACLnvB,MAAM,CAAC0vB,KAAK,CAACre,MAAM,CAAC2X,UAAU,EAAE,iBAAiB,CAAC;;QAElDqG,gBAAgB,GACdK,KAAK,CAACre,MAAM,CAAC6X,MAAM,IAAI6F,YAAY,CAACV,cAAc,EAAE,CAACmB,UAAU,EAAE;QACnEJ,YAAY,GAAG,IAAI,CAACQ,iBAAiB,CACnCb,YAAY,EACZW,KAAK,CAAC7pB,IAAI,EACV6pB,KAAK,CAAC5H,QAAQ,EACdmH,WAAW,EACXC,aAAa,EACbG,gBAAgB,EAChBF,WAAW,CACZ;;KAEJ,MAAM,IAAIH,SAAS,CAACjkB,IAAI,KAAK+d,aAAa,CAACQ,cAAc,EAAE;MAC1D,IAAMuG,YAAY,GAAGb,SAAyB;MAC9C,IAAI,CAACa,YAAY,CAACxG,MAAM,EAAE;QACxB+F,YAAY,GAAG,IAAI,CAACU,aAAa,CAC/Bf,YAAY,EACZc,YAAY,CAAChqB,IAAI,EACjBgqB,YAAY,CAACzG,YAAY,EACzB6F,WAAW,EACXC,aAAa,EACbC,WAAW,CACZ;OACF,MAAM;QACLC,YAAY,GAAG,IAAI,CAACW,gBAAgB,CAClChB,YAAY,EACZc,YAAY,CAAChqB,IAAI,EACjBopB,WAAW,EACXC,aAAa,EACbC,WAAW,CACZ;;KAEJ,MAAM,IAAIH,SAAS,CAACjkB,IAAI,KAAK+d,aAAa,CAACkC,eAAe,EAAE;MAC3DoE,YAAY,GAAG,IAAI,CAACY,eAAe,CACjCjB,YAAY,EACZC,SAAS,CAACnpB,IAAI,EACdopB,WAAW,EACXE,WAAW,CACZ;KACF,MAAM;MACL,MAAM7c,cAAc,CAAC,0BAA0B,GAAG0c,SAAS,CAACjkB,IAAI,CAAC;;IAEnE,IAAM6jB,OAAO,GAAGO,WAAW,CAACc,UAAU,EAAE;IACxCnB,aAAa,CAACoB,mBAAmB,CAACnB,YAAY,EAAEK,YAAY,EAAER,OAAO,CAAC;IACtE,OAAO,IAAIuB,eAAe,CAACf,YAAY,EAAER,OAAO,CAAC;GAClD;;;;;;;EAQcE,iCAAmB,GAAlC,UACEC,YAAuB,EACvBK,YAAuB,EACvBD,WAAqB;IAErB,IAAMpD,SAAS,GAAGqD,YAAY,CAACjB,aAAa,EAAE;IAC9C,IAAIpC,SAAS,CAACN,kBAAkB,EAAE,EAAE;MAClC,IAAM2E,aAAa,GACjBrE,SAAS,CAACI,OAAO,EAAE,CAACrZ,UAAU,EAAE,IAAIiZ,SAAS,CAACI,OAAO,EAAE,CAACpZ,OAAO,EAAE;MACnE,IAAMsd,eAAe,GAAGtB,YAAY,CAACuB,oBAAoB,EAAE;MAC3D,IACEnB,WAAW,CAAC7vB,MAAM,GAAG,CAAC,IACtB,CAACyvB,YAAY,CAACZ,aAAa,EAAE,CAAC1C,kBAAkB,EAAE,IACjD2E,aAAa,IACZ,CAACrE,SAAS,CAACI,OAAO,EAAE,CAACxX,MAAM,sBAAsB0b,eAAe,CAAE,IACpE,CAACtE,SAAS,CAACI,OAAO,EAAE,CAACnZ,WAAW,EAAE,CAAC2B,MAAM,CAAC0b,eAAe,CAACrd,WAAW,EAAE,CAAC,EACxE;QACAmc,WAAW,CAAChsB,IAAI,CACdkpB,MAAM,CAACkE,WAAW,sBACKnB,YAAY,CAACkB,oBAAoB,EAAE,CACzD,CACF;;;GAGN;;;;;;;;;;EAWOxB,2DAAmC,GAA3C,UACEH,SAAoB,EACpB6B,UAAgB,EAChBvB,WAAyB,EACzB5d,MAA2B,EAC3B8d,WAAmC;IAEnC,IAAMsB,YAAY,GAAG9B,SAAS,CAACR,aAAa,EAAE;IAC9C,IAAIc,WAAW,CAACyB,cAAc,CAACF,UAAU,CAAC,IAAI,IAAI,EAAE;;MAElD,OAAO7B,SAAS;KACjB,MAAM;MACL,IAAIgC,aAAa;QAAEvC,UAAU;MAC7B,IAAIoC,UAAU,CAACzd,OAAO,EAAE,EAAE;;QAExB/S,MAAM,CACJ2uB,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,EAC/C,4DAA4D,CAC7D;QACD,IAAIkD,SAAS,CAACN,cAAc,EAAE,CAACmB,UAAU,EAAE,EAAE;;;;UAI3C,IAAMoB,WAAW,GAAGjC,SAAS,CAACH,qBAAqB,EAAE;UACrD,IAAMqC,gBAAgB,GACpBD,WAAW,YAAYxV,YAAY,GAC/BwV,WAAW,GACXxV,YAAY,CAAC/H,UAAU;UAC7B,IAAMyd,qBAAqB,GAAG7B,WAAW,CAAC8B,yBAAyB,CACjEF,gBAAgB,CACjB;UACDF,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACmC,cAAc,CACzCrC,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE,EACnC2E,qBAAqB,EACrB3B,WAAW,CACZ;SACF,MAAM;UACL,IAAM8B,YAAY,GAAGhC,WAAW,CAAC3I,sBAAsB,CACrDqI,SAAS,CAACH,qBAAqB,EAAE,CAClC;UACDmC,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACmC,cAAc,CACzCrC,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE,EACnC8E,YAAY,EACZ9B,WAAW,CACZ;;OAEJ,MAAM;QACL,IAAMnH,QAAQ,GAAGwI,UAAU,CAACzoB,QAAQ,EAAE;QACtC,IAAIigB,QAAQ,KAAK,WAAW,EAAE;UAC5BhoB,MAAM,CACJwwB,UAAU,CAAC/nB,SAAS,EAAE,KAAK,CAAC,EAC5B,uDAAuD,CACxD;UACD,IAAMyoB,YAAY,GAAGT,YAAY,CAACtE,OAAO,EAAE;UAC3CiC,UAAU,GAAGO,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE;;UAEjD,IAAMgF,eAAe,GAAGlC,WAAW,CAACmC,kCAAkC,CACpEZ,UAAU,EACVU,YAAY,EACZ9C,UAAU,CACX;UACD,IAAI+C,eAAe,IAAI,IAAI,EAAE;YAC3BR,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACnb,cAAc,CACzCwd,YAAY,EACZC,eAAe,CAChB;WACF,MAAM;;YAELR,aAAa,GAAGF,YAAY,CAACtE,OAAO,EAAE;;SAEzC,MAAM;UACL,IAAMkF,eAAe,GAAGb,UAAU,CAACtoB,QAAQ,EAAE;;UAE7C,IAAIopB,aAAa;UACjB,IAAIb,YAAY,CAAC/E,kBAAkB,CAAC1D,QAAQ,CAAC,EAAE;YAC7CoG,UAAU,GAAGO,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE;YACjD,IAAMoF,gBAAgB,GAAGtC,WAAW,CAACmC,kCAAkC,CACrEZ,UAAU,EACVC,YAAY,CAACtE,OAAO,EAAE,EACtBiC,UAAU,CACX;YACD,IAAImD,gBAAgB,IAAI,IAAI,EAAE;cAC5BD,aAAa,GAAGb,YAAY,CACzBtE,OAAO,EAAE,CACT7Q,iBAAiB,CAAC0M,QAAQ,CAAC,CAC3BnU,WAAW,CAACwd,eAAe,EAAEE,gBAAgB,CAAC;aAClD,MAAM;;cAELD,aAAa,GAAGb,YAAY,CACzBtE,OAAO,EAAE,CACT7Q,iBAAiB,CAAC0M,QAAQ,CAAC;;WAEjC,MAAM;YACLsJ,aAAa,GAAGrC,WAAW,CAACX,iBAAiB,CAC3CtG,QAAQ,EACR2G,SAAS,CAACN,cAAc,EAAE,CAC3B;;UAEH,IAAIiD,aAAa,IAAI,IAAI,EAAE;YACzBX,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAAChb,WAAW,CACtC4c,YAAY,CAACtE,OAAO,EAAE,EACtBnE,QAAQ,EACRsJ,aAAa,EACbD,eAAe,EACfhgB,MAAM,EACN8d,WAAW,CACZ;WACF,MAAM;;YAELwB,aAAa,GAAGF,YAAY,CAACtE,OAAO,EAAE;;;;MAI5C,OAAOwC,SAAS,CAAC6C,eAAe,CAC9Bb,aAAa,EACbF,YAAY,CAAChF,kBAAkB,EAAE,IAAI+E,UAAU,CAACzd,OAAO,EAAE,EACzD,IAAI,CAAC8b,OAAO,CAAC4C,YAAY,EAAE,CAC5B;;GAEJ;;;;;;;;;;;;EAaD3C,6CAAqB,GAArB,UACEC,YAAuB,EACvByB,UAAgB,EAChBkB,WAAiB,EACjBzC,WAAyB,EACzBC,aAA0B,EAC1BG,gBAAyB,EACzBF,WAAmC;IAEnC,IAAMwC,aAAa,GAAG5C,YAAY,CAACV,cAAc,EAAE;IACnD,IAAIuD,cAAc;IAClB,IAAMC,YAAY,GAAGxC,gBAAgB,GACjC,IAAI,CAACR,OAAO,GACZ,IAAI,CAACA,OAAO,CAACiD,gBAAgB,EAAE;IACnC,IAAItB,UAAU,CAACzd,OAAO,EAAE,EAAE;MACxB6e,cAAc,GAAGC,YAAY,CAACb,cAAc,CAC1CW,aAAa,CAACxF,OAAO,EAAE,EACvBuF,WAAW,EACX,IAAI,CACL;KACF,MAAM,IAAIG,YAAY,CAACJ,YAAY,EAAE,IAAI,CAACE,aAAa,CAACnC,UAAU,EAAE,EAAE;;MAErE,IAAMuC,aAAa,GAAGJ,aAAa,CAChCxF,OAAO,EAAE,CACTtY,WAAW,CAAC2c,UAAU,EAAEkB,WAAW,CAAC;MACvCE,cAAc,GAAGC,YAAY,CAACb,cAAc,CAC1CW,aAAa,CAACxF,OAAO,EAAE,EACvB4F,aAAa,EACb,IAAI,CACL;KACF,MAAM;MACL,IAAM/J,QAAQ,GAAGwI,UAAU,CAACzoB,QAAQ,EAAE;MACtC,IACE,CAAC4pB,aAAa,CAACK,iBAAiB,CAACxB,UAAU,CAAC,IAC5CA,UAAU,CAAC/nB,SAAS,EAAE,GAAG,CAAC,EAC1B;;QAEA,OAAOsmB,YAAY;;MAErB,IAAMsC,eAAe,GAAGb,UAAU,CAACtoB,QAAQ,EAAE;MAC7C,IAAMsL,SAAS,GAAGme,aAAa,CAACxF,OAAO,EAAE,CAAC7Q,iBAAiB,CAAC0M,QAAQ,CAAC;MACrE,IAAMvU,YAAY,GAAGD,SAAS,CAACK,WAAW,CAACwd,eAAe,EAAEK,WAAW,CAAC;MACxE,IAAI1J,QAAQ,KAAK,WAAW,EAAE;QAC5B4J,cAAc,GAAGC,YAAY,CAACne,cAAc,CAC1Cie,aAAa,CAACxF,OAAO,EAAE,EACvB1Y,YAAY,CACb;OACF,MAAM;QACLme,cAAc,GAAGC,YAAY,CAAChe,WAAW,CACvC8d,aAAa,CAACxF,OAAO,EAAE,EACvBnE,QAAQ,EACRvU,YAAY,EACZ4d,eAAe,EACfvD,wBAAwB,EACxB,IAAI,CACL;;;IAGL,IAAMsB,YAAY,GAAGL,YAAY,CAACkD,gBAAgB,CAChDL,cAAc,EACdD,aAAa,CAAClG,kBAAkB,EAAE,IAAI+E,UAAU,CAACzd,OAAO,EAAE,EAC1D8e,YAAY,CAACJ,YAAY,EAAE,CAC5B;IACD,IAAMpgB,MAAM,GAAG,IAAI6c,4BAA4B,CAC7Ce,WAAW,EACXG,YAAY,EACZF,aAAa,CACd;IACD,OAAO,IAAI,CAACgD,mCAAmC,CAC7C9C,YAAY,EACZoB,UAAU,EACVvB,WAAW,EACX5d,MAAM,EACN8d,WAAW,CACZ;GACF;;;;;;;;;;;EAYDL,2CAAmB,GAAnB,UACEC,YAAuB,EACvByB,UAAgB,EAChBkB,WAAiB,EACjBzC,WAAyB,EACzBC,aAA0B,EAC1BC,WAAmC;IAEnC,IAAMsB,YAAY,GAAG1B,YAAY,CAACZ,aAAa,EAAE;IACjD,IAAIiB,YAAY,EAAEuB,aAAa;IAC/B,IAAMtf,MAAM,GAAG,IAAI6c,4BAA4B,CAC7Ce,WAAW,EACXF,YAAY,EACZG,aAAa,CACd;IACD,IAAIsB,UAAU,CAACzd,OAAO,EAAE,EAAE;MACxB4d,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACmC,cAAc,CACzCjC,YAAY,CAACZ,aAAa,EAAE,CAAChC,OAAO,EAAE,EACtCuF,WAAW,EACXvC,WAAW,CACZ;MACDC,YAAY,GAAGL,YAAY,CAACyC,eAAe,CACzCb,aAAa,EACb,IAAI,EACJ,IAAI,CAAC9B,OAAO,CAAC4C,YAAY,EAAE,CAC5B;KACF,MAAM;MACL,IAAMzJ,QAAQ,GAAGwI,UAAU,CAACzoB,QAAQ,EAAE;MACtC,IAAIigB,QAAQ,KAAK,WAAW,EAAE;QAC5B2I,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACnb,cAAc,CACzCqb,YAAY,CAACZ,aAAa,EAAE,CAAChC,OAAO,EAAE,EACtCuF,WAAW,CACZ;QACDtC,YAAY,GAAGL,YAAY,CAACyC,eAAe,CACzCb,aAAa,EACbF,YAAY,CAAChF,kBAAkB,EAAE,EACjCgF,YAAY,CAACjB,UAAU,EAAE,CAC1B;OACF,MAAM;QACL,IAAM6B,eAAe,GAAGb,UAAU,CAACtoB,QAAQ,EAAE;QAC7C,IAAM+kB,QAAQ,GAAGwD,YAAY,CAACtE,OAAO,EAAE,CAAC7Q,iBAAiB,CAAC0M,QAAQ,CAAC;QACnE,IAAIoC,QAAQ;QACZ,IAAIiH,eAAe,CAACte,OAAO,EAAE,EAAE;;UAE7BqX,QAAQ,GAAGsH,WAAW;SACvB,MAAM;UACL,IAAMle,SAAS,GAAGnC,MAAM,CAAC8gB,gBAAgB,CAACnK,QAAQ,CAAC;UACnD,IAAIxU,SAAS,IAAI,IAAI,EAAE;YACrB,IACE6d,eAAe,CAAC9iB,OAAO,EAAE,KAAK,WAAW,IACzCiF,SAAS,CAAC+H,QAAQ,CAAC8V,eAAe,CAACe,MAAM,EAAE,CAAC,CAACrf,OAAO,EAAE,EACtD;;;cAGAqX,QAAQ,GAAG5W,SAAS;aACrB,MAAM;cACL4W,QAAQ,GAAG5W,SAAS,CAACK,WAAW,CAACwd,eAAe,EAAEK,WAAW,CAAC;;WAEjE,MAAM;;YAELtH,QAAQ,GAAGhP,YAAY,CAAC/H,UAAU;;;QAGtC,IAAI,CAAC4Z,QAAQ,CAACtY,MAAM,CAACyV,QAAQ,CAAC,EAAE;UAC9B,IAAMiI,YAAY,GAAG,IAAI,CAACxD,OAAO,CAAChb,WAAW,CAC3C4c,YAAY,CAACtE,OAAO,EAAE,EACtBnE,QAAQ,EACRoC,QAAQ,EACRiH,eAAe,EACfhgB,MAAM,EACN8d,WAAW,CACZ;UACDC,YAAY,GAAGL,YAAY,CAACyC,eAAe,CACzCa,YAAY,EACZ5B,YAAY,CAAChF,kBAAkB,EAAE,EACjC,IAAI,CAACoD,OAAO,CAAC4C,YAAY,EAAE,CAC5B;SACF,MAAM;UACLrC,YAAY,GAAGL,YAAY;;;;IAIjC,OAAOK,YAAY;GACpB;;;;;;;EAQcN,4BAAc,GAA7B,UACEH,SAAoB,EACpB3G,QAAgB;IAEhB,OAAO2G,SAAS,CAACR,aAAa,EAAE,CAACzC,kBAAkB,CAAC1D,QAAQ,CAAC;GAC9D;;;;;;;;;;;EAYO8G,uCAAe,GAAvB,UACEH,SAAoB,EACpB9oB,IAAU,EACVysB,eAAoC,EACpCrD,WAAyB,EACzB2B,WAAwB,EACxBzB,WAAmC;IANrC;;;;;;;IAcE,IAAIoD,YAAY,GAAG5D,SAAS;IAC5B2D,eAAe,CAACE,OAAO,CAAC,UAACvqB,YAAY,EAAEuL,SAAS;MAC9C,IAAMif,SAAS,GAAG5sB,IAAI,CAACqD,KAAK,CAACjB,YAAY,CAAC;MAC1C,IAAI6mB,aAAa,CAAC4D,cAAc,CAAC/D,SAAS,EAAE8D,SAAS,CAAC1qB,QAAQ,EAAE,CAAC,EAAE;QACjEwqB,YAAY,GAAG1X,KAAI,CAAC0U,mBAAmB,CACrCgD,YAAY,EACZE,SAAS,EACTjf,SAAS,EACTyb,WAAW,EACX2B,WAAW,EACXzB,WAAW,CACZ;;KAEJ,CAAC;IAEFmD,eAAe,CAACE,OAAO,CAAC,UAACvqB,YAAY,EAAEuL,SAAS;MAC9C,IAAMif,SAAS,GAAG5sB,IAAI,CAACqD,KAAK,CAACjB,YAAY,CAAC;MAC1C,IAAI,CAAC6mB,aAAa,CAAC4D,cAAc,CAAC/D,SAAS,EAAE8D,SAAS,CAAC1qB,QAAQ,EAAE,CAAC,EAAE;QAClEwqB,YAAY,GAAG1X,KAAI,CAAC0U,mBAAmB,CACrCgD,YAAY,EACZE,SAAS,EACTjf,SAAS,EACTyb,WAAW,EACX2B,WAAW,EACXzB,WAAW,CACZ;;KAEJ,CAAC;IAEF,OAAOoD,YAAY;GACpB;;;;;;;EAQOzD,mCAAW,GAAnB,UAAoBrd,IAAU,EAAEie,KAA0B;IACxDA,KAAK,CAAC8C,OAAO,CAAC,UAACvqB,YAAY,EAAEuL,SAAS;MACpC/B,IAAI,GAAGA,IAAI,CAACoC,WAAW,CAAC5L,YAAY,EAAEuL,SAAS,CAAC;KACjD,CAAC;IACF,OAAO/B,IAAI;GACZ;;;;;;;;;;;;EAaOqd,yCAAiB,GAAzB,UACEH,SAAoB,EACpB9oB,IAAU,EACVysB,eAAoC,EACpCrD,WAAyB,EACzB2B,WAAwB,EACxBvB,gBAAyB,EACzBF,WAAmC;IAPrC;;;IAWE,IACER,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE,CAACpZ,OAAO,EAAE,IAC9C,CAAC4b,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,EAChD;MACA,OAAOkD,SAAS;;;;;;;;IASlB,IAAI4D,YAAY,GAAG5D,SAAS;IAC5B,IAAIgE,aAAa;IACjB,IAAI9sB,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB4f,aAAa,GAAGL,eAAe;KAChC,MAAM;MACLK,aAAa,GAAG9I,aAAa,CAACH,KAAK,CAACY,OAAO,CAACzkB,IAAI,EAAEysB,eAAe,CAAC;;IAEpE,IAAMlE,UAAU,GAAGO,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE;IACvDwG,aAAa,CAAC7K,QAAQ,CAAC9R,gBAAgB,CAAC,UAACgS,QAAQ,EAAE/O,SAAS;MAC1D,IAAImV,UAAU,CAACzC,QAAQ,CAAC3D,QAAQ,CAAC,EAAE;QACjC,IAAM4K,WAAW,GAAGjE,SAAS,CAC1BN,cAAc,EAAE,CAChBlC,OAAO,EAAE,CACT7Q,iBAAiB,CAAC0M,QAAQ,CAAC;QAC9B,IAAMoC,QAAQ,GAAGvP,KAAI,CAACgY,WAAW,CAACD,WAAW,EAAE3Z,SAAS,CAAC;QACzDsZ,YAAY,GAAG1X,KAAI,CAAC4U,qBAAqB,CACvC8C,YAAY,EACZ,IAAIprB,IAAI,CAAC6gB,QAAQ,CAAC,EAClBoC,QAAQ,EACR6E,WAAW,EACX2B,WAAW,EACXvB,gBAAgB,EAChBF,WAAW,CACZ;;KAEJ,CAAC;IACFwD,aAAa,CAAC7K,QAAQ,CAAC9R,gBAAgB,CAAC,UAACgS,QAAQ,EAAE8K,cAAc;MAC/D,IAAMC,kBAAkB,GACtB,CAACpE,SAAS,CAACN,cAAc,EAAE,CAAC3C,kBAAkB,CAAC1D,QAAQ,CAAC,IACxD8K,cAAc,CAACh2B,KAAK,IAAI,IAAI;MAC9B,IAAI,CAACsxB,UAAU,CAACzC,QAAQ,CAAC3D,QAAQ,CAAC,IAAI,CAAC+K,kBAAkB,EAAE;QACzD,IAAMH,WAAW,GAAGjE,SAAS,CAC1BN,cAAc,EAAE,CAChBlC,OAAO,EAAE,CACT7Q,iBAAiB,CAAC0M,QAAQ,CAAC;QAC9B,IAAMoC,QAAQ,GAAGvP,KAAI,CAACgY,WAAW,CAACD,WAAW,EAAEE,cAAc,CAAC;QAC9DP,YAAY,GAAG1X,KAAI,CAAC4U,qBAAqB,CACvC8C,YAAY,EACZ,IAAIprB,IAAI,CAAC6gB,QAAQ,CAAC,EAClBoC,QAAQ,EACR6E,WAAW,EACX2B,WAAW,EACXvB,gBAAgB,EAChBF,WAAW,CACZ;;KAEJ,CAAC;IAEF,OAAOoD,YAAY;GACpB;;;;;;;;;;;EAYOzD,qCAAa,GAArB,UACEH,SAAoB,EACpBqE,OAAa,EACb5J,YAAoC,EACpC6F,WAAyB,EACzBC,aAA0B,EAC1BC,WAAmC;IAEnC,IAAIF,WAAW,CAACyB,cAAc,CAACsC,OAAO,CAAC,IAAI,IAAI,EAAE;MAC/C,OAAOrE,SAAS;;;IAIlB,IAAMU,gBAAgB,GAAGV,SAAS,CAACN,cAAc,EAAE,CAACmB,UAAU,EAAE;;;IAIhE,IAAMoB,WAAW,GAAGjC,SAAS,CAACN,cAAc,EAAE;IAC9C,IAAIjF,YAAY,CAACtsB,KAAK,IAAI,IAAI,EAAE;;MAE9B,IACGk2B,OAAO,CAACjgB,OAAO,EAAE,IAAI6d,WAAW,CAACnF,kBAAkB,EAAE,IACtDmF,WAAW,CAACoB,iBAAiB,CAACgB,OAAO,CAAC,EACtC;QACA,OAAO,IAAI,CAACvD,qBAAqB,CAC/Bd,SAAS,EACTqE,OAAO,EACPpC,WAAW,CAACzE,OAAO,EAAE,CAAC5Q,QAAQ,CAACyX,OAAO,CAAC,EACvC/D,WAAW,EACXC,aAAa,EACbG,gBAAgB,EAChBF,WAAW,CACZ;OACF,MAAM,IAAI6D,OAAO,CAACjgB,OAAO,EAAE,EAAE;;;QAG5B,IAAIkgB,iBAAe,GAAGpJ,aAAa,CAACH,KAAK;QACzCkH,WAAW,CAACzE,OAAO,EAAE,CAACpQ,YAAY,CAACvJ,SAAS,EAAE,UAAClV,IAAI,EAAEmU,IAAI;UACvDwhB,iBAAe,GAAGA,iBAAe,CAAC3yB,GAAG,CAAC,IAAI6G,IAAI,CAAC7J,IAAI,CAAC,EAAEmU,IAAI,CAAC;SAC5D,CAAC;QACF,OAAO,IAAI,CAACme,iBAAiB,CAC3BjB,SAAS,EACTqE,OAAO,EACPC,iBAAe,EACfhE,WAAW,EACXC,aAAa,EACbG,gBAAgB,EAChBF,WAAW,CACZ;OACF,MAAM;QACL,OAAOR,SAAS;;KAEnB,MAAM;;MAEL,IAAIuE,iBAAe,GAAGrJ,aAAa,CAACH,KAAK;MACzCN,YAAY,CAACoJ,OAAO,CAAC,UAACW,SAAS,EAAEr2B,KAAK;QACpC,IAAMs2B,eAAe,GAAGJ,OAAO,CAAC9pB,KAAK,CAACiqB,SAAS,CAAC;QAChD,IAAIvC,WAAW,CAACoB,iBAAiB,CAACoB,eAAe,CAAC,EAAE;UAClDF,iBAAe,GAAGA,iBAAe,CAAC5yB,GAAG,CACnC6yB,SAAS,EACTvC,WAAW,CAACzE,OAAO,EAAE,CAAC5Q,QAAQ,CAAC6X,eAAe,CAAC,CAChD;;OAEJ,CAAC;MACF,OAAO,IAAI,CAACxD,iBAAiB,CAC3BjB,SAAS,EACTqE,OAAO,EACPE,iBAAe,EACfjE,WAAW,EACXC,aAAa,EACbG,gBAAgB,EAChBF,WAAW,CACZ;;GAEJ;;;;;;;;;EAUOL,uCAAe,GAAvB,UACEH,SAAoB,EACpB9oB,IAAU,EACVopB,WAAyB,EACzBE,WAAmC;IAEnC,IAAMkE,aAAa,GAAG1E,SAAS,CAACN,cAAc,EAAE;IAChD,IAAMe,YAAY,GAAGT,SAAS,CAACsD,gBAAgB,CAC7CoB,aAAa,CAAClH,OAAO,EAAE,EACvBkH,aAAa,CAAC5H,kBAAkB,EAAE,IAAI5lB,IAAI,CAACkN,OAAO,EAAE,EACpDsgB,aAAa,CAAC7D,UAAU,EAAE,CAC3B;IACD,OAAO,IAAI,CAAC0C,mCAAmC,CAC7C9C,YAAY,EACZvpB,IAAI,EACJopB,WAAW,EACXnB,wBAAwB,EACxBqB,WAAW,CACZ;GACF;;;;;;;;;;EAWOL,wCAAgB,GAAxB,UACEH,SAAoB,EACpB9oB,IAAU,EACVopB,WAAyB,EACzBqE,mBAAgC,EAChCnE,WAAmC;IAEnC,IAAInD,QAAQ;IACZ,IAAIiD,WAAW,CAACyB,cAAc,CAAC7qB,IAAI,CAAC,IAAI,IAAI,EAAE;MAC5C,OAAO8oB,SAAS;KACjB,MAAM;MACL,IAAMtd,MAAM,GAAG,IAAI6c,4BAA4B,CAC7Ce,WAAW,EACXN,SAAS,EACT2E,mBAAmB,CACpB;MACD,IAAMC,aAAa,GAAG5E,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE;MACzD,IAAIwE,aAAa;MACjB,IAAI9qB,IAAI,CAACkN,OAAO,EAAE,IAAIlN,IAAI,CAACkC,QAAQ,EAAE,KAAK,WAAW,EAAE;QACrD,IAAI+J,OAAO;QACX,IAAI6c,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,EAAE;UACnD3Z,OAAO,GAAGmd,WAAW,CAAC3I,sBAAsB,CAC1CqI,SAAS,CAACH,qBAAqB,EAAE,CAClC;SACF,MAAM;UACL,IAAMgF,cAAc,GAAG7E,SAAS,CAACN,cAAc,EAAE,CAAClC,OAAO,EAAE;UAC3DnsB,MAAM,CACJwzB,cAAc,YAAYpY,YAAY,EACtC,+CAA+C,CAChD;UACDtJ,OAAO,GAAGmd,WAAW,CAAC8B,yBAAyB,CAC7CyC,cAA8B,CAC/B;;QAEH1hB,OAAO,GAAGA,OAAe;QACzB6e,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACmC,cAAc,CACzCuC,aAAa,EACbzhB,OAAO,EACPqd,WAAW,CACZ;OACF,MAAM;QACL,IAAMnH,QAAQ,GAAGniB,IAAI,CAACkC,QAAQ,EAAE;QAChC,IAAIqiB,QAAQ,GAAG6E,WAAW,CAACX,iBAAiB,CAC1CtG,QAAQ,EACR2G,SAAS,CAACN,cAAc,EAAE,CAC3B;QACD,IACEjE,QAAQ,IAAI,IAAI,IAChBuE,SAAS,CAACN,cAAc,EAAE,CAAC3C,kBAAkB,CAAC1D,QAAQ,CAAC,EACvD;UACAoC,QAAQ,GAAGmJ,aAAa,CAACjY,iBAAiB,CAAC0M,QAAQ,CAAC;;QAEtD,IAAIoC,QAAQ,IAAI,IAAI,EAAE;UACpBuG,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAAChb,WAAW,CACtC0f,aAAa,EACbvL,QAAQ,EACRoC,QAAQ,EACRvkB,IAAI,CAACqC,QAAQ,EAAE,EACfmJ,MAAM,EACN8d,WAAW,CACZ;SACF,MAAM,IAAIR,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE,CAACR,QAAQ,CAAC3D,QAAQ,CAAC,EAAE;;UAEjE2I,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAAChb,WAAW,CACtC0f,aAAa,EACbvL,QAAQ,EACR5M,YAAY,CAAC/H,UAAU,EACvBxN,IAAI,CAACqC,QAAQ,EAAE,EACfmJ,MAAM,EACN8d,WAAW,CACZ;SACF,MAAM;UACLwB,aAAa,GAAG4C,aAAa;;QAE/B,IACE5C,aAAa,CAAC5d,OAAO,EAAE,IACvB4b,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,EAC/C;;UAEAO,QAAQ,GAAGiD,WAAW,CAAC3I,sBAAsB,CAC3CqI,SAAS,CAACH,qBAAqB,EAAE,CAClC;UACD,IAAIxC,QAAQ,CAAClZ,UAAU,EAAE,EAAE;YACzB6d,aAAa,GAAG,IAAI,CAAC9B,OAAO,CAACmC,cAAc,CACzCL,aAAa,EACb3E,QAAQ,EACRmD,WAAW,CACZ;;;;MAIPnD,QAAQ,GACN2C,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,IAC/CwD,WAAW,CAACyB,cAAc,CAACvpB,IAAI,CAACuiB,KAAK,CAAC,IAAI,IAAI;MAChD,OAAOiF,SAAS,CAAC6C,eAAe,CAC9Bb,aAAa,EACb3E,QAAQ,EACR,IAAI,CAAC6C,OAAO,CAAC4C,YAAY,EAAE,CAC5B;;GAEJ;EACH,oBAAC;AAAD,CAAC;;ACx5BD;;;;;;;;;;;;;;;;AAyBA;;;;;;;AAOA;;;;;EAOE,wBAAoBgC,MAAa;IAAb,WAAM,GAANA,MAAM;;;;;IAKxB,IAAI,CAACtU,MAAM,GAAG,IAAI,CAACsU,MAAM,CAAC/S,cAAc,EAAE,CAACC,QAAQ,EAAE;;;;;;;;;;;;;;;;EAiBvD+S,iDAAwB,GAAxB,UACE9E,OAAiB,EACjB+E,UAAgB,EAChBC,kBAAuC;IAHzC;IAKE,IAAMC,MAAM,GAAY,EAAE;IAC1B,IAAMC,KAAK,GAAa,EAAE;IAE1BlF,OAAO,CAAC/F,OAAO,CAAC,gBAAM;MACpB,IACEpI,MAAM,CAAC1V,IAAI,KAAKshB,MAAM,CAACM,aAAa,IACpC9R,KAAI,CAACsE,MAAM,CAAC4U,mBAAmB,CAC7BtT,MAAM,CAAC2L,OAAe,EACtB3L,MAAM,CAACG,YAAY,CACpB,EACD;QACAkT,KAAK,CAAC3wB,IAAI,CACRkpB,MAAM,CAAC2H,gBAAgB,CACrBvT,MAAM,CAAClN,SAAmB,EAC1BkN,MAAM,CAACG,YAAY,CACpB,CACF;;KAEJ,CAAC;IAEF,IAAI,CAACqT,sBAAsB,CACzBJ,MAAM,EACNxH,MAAM,CAACG,aAAa,EACpBoC,OAAO,EACPgF,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACM,sBAAsB,CACzBJ,MAAM,EACNxH,MAAM,CAACE,WAAW,EAClBqC,OAAO,EACPgF,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACM,sBAAsB,CACzBJ,MAAM,EACNxH,MAAM,CAACO,WAAW,EAClBkH,KAAK,EACLF,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACM,sBAAsB,CACzBJ,MAAM,EACNxH,MAAM,CAACM,aAAa,EACpBiC,OAAO,EACPgF,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACM,sBAAsB,CACzBJ,MAAM,EACNxH,MAAM,CAACC,KAAK,EACZsC,OAAO,EACPgF,kBAAkB,EAClBD,UAAU,CACX;IAED,OAAOE,MAAM;GACd;;;;;;;;;;;EAYOH,+CAAsB,GAA9B,UACEG,MAAe,EACfnlB,SAAiB,EACjBkgB,OAAiB,EACjBsF,aAAkC,EAClCP,UAAgB;IALlB;IAOE,IAAMQ,eAAe,GAAGvF,OAAO,CAACwF,MAAM,CAAC,gBAAM;MAAI,aAAM,CAACrpB,IAAI,KAAK2D,SAAS;IAAA,EAAC;IAE3EylB,eAAe,CAAC/wB,IAAI,CAAC,IAAI,CAACixB,eAAe,CAACh0B,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD8zB,eAAe,CAACtL,OAAO,CAAC,gBAAM;MAC5B,IAAMyL,kBAAkB,GAAGzZ,KAAI,CAAC0Z,wBAAwB,CACtD9T,MAAM,EACNkT,UAAU,CACX;MACDO,aAAa,CAACrL,OAAO,CAAC,sBAAY;QAChC,IAAI2L,YAAY,CAACC,UAAU,CAAChU,MAAM,CAAC1V,IAAI,CAAC,EAAE;UACxC8oB,MAAM,CAAC1wB,IAAI,CACTqxB,YAAY,CAACE,WAAW,CAACJ,kBAAkB,EAAEzZ,KAAI,CAAC4Y,MAAM,CAAC,CAC1D;;OAEJ,CAAC;KACH,CAAC;GACH;;;;;;;EAQOC,iDAAwB,GAAhC,UAAiCjT,MAAc,EAAEkT,UAAgB;IAC/D,IAAIlT,MAAM,CAAC1V,IAAI,KAAK,OAAO,IAAI0V,MAAM,CAAC1V,IAAI,KAAK,eAAe,EAAE;MAC9D,OAAO0V,MAAM;KACd,MAAM;MACLA,MAAM,CAACX,QAAQ,GAAG6T,UAAU,CAACgB,uBAAuB;MAElDlU,MAAM,CAAClN,SAAS,EAChBkN,MAAM,CAACG,YAAY,EACnB,IAAI,CAACzB,MAAM,CACZ;MACD,OAAOsB,MAAM;;GAEhB;;;;;;;EAQOiT,wCAAe,GAAvB,UAAwBlxB,CAAS,EAAEC,CAAS;IAC1C,IAAID,CAAC,CAAC+Q,SAAS,IAAI,IAAI,IAAI9Q,CAAC,CAAC8Q,SAAS,IAAI,IAAI,EAAE;MAC9C,MAAMjB,cAAc,CAAC,oCAAoC,CAAC;;IAE5D,IAAMsiB,QAAQ,GAAG,IAAIljB,SAAS,CAAClP,CAAC,CAAC+Q,SAAS,EAAE/Q,CAAC,CAACoe,YAAY,CAAC;IAC3D,IAAMiU,QAAQ,GAAG,IAAInjB,SAAS,CAACjP,CAAC,CAAC8Q,SAAS,EAAE9Q,CAAC,CAACme,YAAY,CAAC;IAC3D,OAAO,IAAI,CAACzB,MAAM,CAACvN,OAAO,CAACgjB,QAAQ,EAAEC,QAAQ,CAAC;GAC/C;EACH,qBAAC;AAAD,CAAC;;AClMD;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;AAUA;;;;;;EAWE,cAAoBpB,MAAa,EAAEqB,gBAA2B;IAA1C,WAAM,GAANrB,MAAM;IARlB,wBAAmB,GAAwB,EAAE;IASnD,IAAMzoB,MAAM,GAAG,IAAI,CAACyoB,MAAM,CAAC/S,cAAc,EAAE;IAE3C,IAAMqU,WAAW,GAAG,IAAIlI,aAAa,CAAC7hB,MAAM,CAAC2V,QAAQ,EAAE,CAAC;IACxD,IAAMyT,MAAM,GAAGppB,MAAM,CAACgqB,aAAa,EAAE;;;;;IAMrC,IAAI,CAACC,UAAU,GAAG,IAAInG,aAAa,CAACsF,MAAM,CAAC;IAE3C,IAAMc,kBAAkB,GAAGJ,gBAAgB,CAACzG,cAAc,EAAE;IAC5D,IAAM8G,iBAAiB,GAAGL,gBAAgB,CAAC3G,aAAa,EAAE;;IAG1D,IAAMjC,UAAU,GAAG6I,WAAW,CAAC/D,cAAc,CAC3C5V,YAAY,CAAC/H,UAAU,EACvB6hB,kBAAkB,CAAC/I,OAAO,EAAE,EAC5B,IAAI,CACL;IACD,IAAMJ,SAAS,GAAGqI,MAAM,CAACpD,cAAc,CACrC5V,YAAY,CAAC/H,UAAU,EACvB8hB,iBAAiB,CAAChJ,OAAO,EAAE,EAC3B,IAAI,CACL;IACD,IAAMyF,cAAc,GAAG,IAAIpG,SAAS,CAClCU,UAAU,EACVgJ,kBAAkB,CAACzJ,kBAAkB,EAAE,EACvCsJ,WAAW,CAACtD,YAAY,EAAE,CAC3B;IACD,IAAMd,aAAa,GAAG,IAAInF,SAAS,CACjCO,SAAS,EACToJ,iBAAiB,CAAC1J,kBAAkB,EAAE,EACtC2I,MAAM,CAAC3C,YAAY,EAAE,CACtB;;;;;IAMD,IAAI,CAACzD,UAAU,GAAG,IAAIlC,SAAS,CAAC6E,aAAa,EAAEiB,cAAc,CAAC;;;;;IAM9D,IAAI,CAACwD,eAAe,GAAG,IAAI1B,cAAc,CAAC,IAAI,CAACD,MAAM,CAAC;;;;;EAMxD4B,uBAAQ,GAAR;IACE,OAAO,IAAI,CAAC5B,MAAM;GACnB;;;;EAKD4B,6BAAc,GAAd;IACE,OAAO,IAAI,CAACrH,UAAU,CAACK,cAAc,EAAE,CAAClC,OAAO,EAAE;GAClD;;;;;EAMDkJ,qCAAsB,GAAtB,UAAuBxvB,IAAU;IAC/B,IAAMyvB,KAAK,GAAG,IAAI,CAACtH,UAAU,CAACQ,qBAAqB,EAAE;IACrD,IAAI8G,KAAK,EAAE;;;MAGT,IACE,IAAI,CAAC7B,MAAM,CAAC/S,cAAc,EAAE,CAAC6U,YAAY,EAAE,IAC1C,CAAC1vB,IAAI,CAACkN,OAAO,EAAE,IAAI,CAACuiB,KAAK,CAACha,iBAAiB,CAACzV,IAAI,CAACkC,QAAQ,EAAE,CAAC,CAACgL,OAAO,EAAG,EACxE;QACA,OAAOuiB,KAAK,CAAC/Z,QAAQ,CAAC1V,IAAI,CAAC;;;IAG/B,OAAO,IAAI;GACZ;;;;EAKDwvB,sBAAO,GAAP;IACE,OAAO,IAAI,CAACG,mBAAmB,CAACl2B,MAAM,KAAK,CAAC;GAC7C;;;;EAKD+1B,mCAAoB,GAApB,UAAqBxV,iBAAoC;IACvD,IAAI,CAAC2V,mBAAmB,CAACryB,IAAI,CAAC0c,iBAAiB,CAAC;GACjD;;;;;;EAODwV,sCAAuB,GAAvB,UACExV,iBAA2C,EAC3C4V,WAAmB;IAEnB,IAAMC,YAAY,GAAkB,EAAE;IACtC,IAAID,WAAW,EAAE;MACfz1B,MAAM,CACJ6f,iBAAiB,IAAI,IAAI,EACzB,iDAAiD,CAClD;MACD,IAAM8V,MAAI,GAAG,IAAI,CAAClC,MAAM,CAAC5tB,IAAI;MAC7B,IAAI,CAAC2vB,mBAAmB,CAAC3M,OAAO,CAAC,sBAAY;QAC3C4M,WAAW,yBAAyBA,WAAW;QAC/C,IAAMG,UAAU,GAAGpB,YAAY,CAACqB,iBAAiB,CAACJ,WAAW,EAAEE,MAAI,CAAC;QACpE,IAAIC,UAAU,EAAE;UACdF,YAAY,CAACvyB,IAAI,CAACyyB,UAAU,CAAC;;OAEhC,CAAC;;IAGJ,IAAI/V,iBAAiB,EAAE;MACrB,IAAIiW,SAAS,GAAG,EAAE;MAClB,KAAK,IAAIz2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACm2B,mBAAmB,CAACl2B,MAAM,EAAE,EAAED,CAAC,EAAE;QACxD,IAAM6nB,QAAQ,GAAG,IAAI,CAACsO,mBAAmB,CAACn2B,CAAC,CAAC;QAC5C,IAAI,CAAC6nB,QAAQ,CAAC6O,OAAO,CAAClW,iBAAiB,CAAC,EAAE;UACxCiW,SAAS,CAAC3yB,IAAI,CAAC+jB,QAAQ,CAAC;SACzB,MAAM,IAAIrH,iBAAiB,CAACmW,cAAc,EAAE,EAAE;;UAE7CF,SAAS,GAAGA,SAAS,CAACG,MAAM,CAAC,IAAI,CAACT,mBAAmB,CAAChuB,KAAK,CAACnI,CAAC,GAAG,CAAC,CAAC,CAAC;UACnE;;;MAGJ,IAAI,CAACm2B,mBAAmB,GAAGM,SAAS;KACrC,MAAM;MACL,IAAI,CAACN,mBAAmB,GAAG,EAAE;;IAE/B,OAAOE,YAAY;GACpB;;;;;;;;;EAUDL,6BAAc,GAAd,UACErG,SAAoB,EACpBC,WAAyB,EACzBqE,mBAAgC;IAEhC,IACEtE,SAAS,CAACjkB,IAAI,KAAK+d,aAAa,CAACsC,KAAK,IACtC4D,SAAS,CAAC3d,MAAM,CAAC4X,OAAO,KAAK,IAAI,EACjC;MACAjpB,MAAM,CACJ,IAAI,CAACguB,UAAU,CAACQ,qBAAqB,EAAE,EACvC,2DAA2D,CAC5D;MACDxuB,MAAM,CACJ,IAAI,CAACguB,UAAU,CAACsC,oBAAoB,EAAE,EACtC,yDAAyD,CAC1D;;IAGH,IAAMvB,YAAY,GAAG,IAAI,CAACf,UAAU;IACpC,IAAMtY,MAAM,GAAG,IAAI,CAACuf,UAAU,CAACiB,cAAc,CAC3CnH,YAAY,EACZC,SAAS,EACTC,WAAW,EACXqE,mBAAmB,CACpB;IACD,IAAI,CAAC2B,UAAU,CAACkB,aAAa,CAACzgB,MAAM,CAACiZ,SAAS,CAAC;IAE/C3uB,MAAM,CACJ0V,MAAM,CAACiZ,SAAS,CAACN,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,IACpD,CAACsD,YAAY,CAACV,cAAc,EAAE,CAAC5C,kBAAkB,EAAE,EACrD,yDAAyD,CAC1D;IAED,IAAI,CAACuC,UAAU,GAAGtY,MAAM,CAACiZ,SAAS;IAElC,OAAO,IAAI,CAACyH,yBAAyB,CACnC1gB,MAAM,CAACkZ,OAAO,EACdlZ,MAAM,CAACiZ,SAAS,CAACR,aAAa,EAAE,CAAChC,OAAO,EAAE,EAC1C,IAAI,CACL;GACF;;;;;EAMDkJ,+BAAgB,GAAhB,UAAiBb,YAA+B;IAC9C,IAAMzI,SAAS,GAAG,IAAI,CAACiC,UAAU,CAACG,aAAa,EAAE;IACjD,IAAMkI,cAAc,GAAa,EAAE;IACnC,IAAI,CAACtK,SAAS,CAACI,OAAO,EAAE,CAACrZ,UAAU,EAAE,EAAE;MACrC,IAAMwjB,SAAS,GAAGvK,SAAS,CAACI,OAAO,EAAkB;MACrDmK,SAAS,CAACva,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAE2W,SAAS;QACpD6iB,cAAc,CAAClzB,IAAI,CAACkpB,MAAM,CAACe,gBAAgB,CAACvwB,GAAG,EAAE2W,SAAS,CAAC,CAAC;OAC7D,CAAC;;IAEJ,IAAIuY,SAAS,CAACN,kBAAkB,EAAE,EAAE;MAClC4K,cAAc,CAAClzB,IAAI,CAACkpB,MAAM,CAACkE,WAAW,CAACxE,SAAS,CAACI,OAAO,EAAE,CAAC,CAAC;;IAE9D,OAAO,IAAI,CAACiK,yBAAyB,CACnCC,cAAc,EACdtK,SAAS,CAACI,OAAO,EAAE,EACnBqI,YAAY,CACb;GACF;;;;;;;;EASDa,wCAAyB,GAAzB,UACEzG,OAAiB,EACjB+E,UAAgB,EAChB9T,iBAAqC;IAErC,IAAMqU,aAAa,GAAGrU,iBAAiB,GACnC,CAACA,iBAAiB,CAAC,GACnB,IAAI,CAAC2V,mBAAmB;IAC5B,OAAO,IAAI,CAACJ,eAAe,CAACmB,wBAAwB,CAClD3H,OAAO,EACP+E,UAAU,EACVO,aAAa,CACd;GACF;EACH,WAAC;AAAD,CAAC;;ACnSD;;;;;;;;;;;;;;;;AA+BA,IAAInS,wBAA4C;AAEhD;;;;;;;;;;AAUA;EAAA;;;;;;;IAoBmB,UAAK,GAAsB,IAAI6F,GAAG,EAAE;;EAnBrD1gB,sBAAWsvB,mCAAsB;SAQjC;MACEx2B,MAAM,CAAC+hB,wBAAsB,EAAE,kCAAkC,CAAC;MAClE,OAAOA,wBAAsB;KAC9B;SAXD,aAAkC1P,GAAyB;MACzDrS,MAAM,CACJ,CAAC+hB,wBAAsB,EACvB,iDAAiD,CAClD;MACDA,wBAAsB,GAAG1P,GAAG;KAC7B;;;;EAeDmkB,2BAAO,GAAP;IACE,OAAO,IAAI,CAACC,KAAK,CAAC1O,IAAI,KAAK,CAAC;GAC7B;EAEDyO,kCAAc,GAAd,UACExH,SAAoB,EACpBC,WAAyB,EACzByH,sBAAmC;;IAEnC,IAAMzN,OAAO,GAAG+F,SAAS,CAAC3d,MAAM,CAAC4X,OAAO;IACxC,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB,IAAM0N,IAAI,GAAG,IAAI,CAACF,KAAK,CAACj2B,GAAG,CAACyoB,OAAO,CAAC;MACpCjpB,MAAM,CAAC22B,IAAI,IAAI,IAAI,EAAE,8CAA8C,CAAC;MACpE,OAAOA,IAAI,CAACT,cAAc,CACxBlH,SAAS,EACTC,WAAW,EACXyH,sBAAsB,CACvB;KACF,MAAM;MACL,IAAI7C,MAAM,GAAY,EAAE;;QAExB,KAAmB,sBAAI,CAAC4C,KAAK,CAACjQ,MAAM,EAAE,6CAAE;UAAnC,IAAMmQ,IAAI;UACb9C,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpBU,IAAI,CAACT,cAAc,CAAClH,SAAS,EAAEC,WAAW,EAAEyH,sBAAsB,CAAC,CACpE;;;;;;;;;;;;;MAGH,OAAO7C,MAAM;;GAEhB;;;;;;;;;;;EAYD2C,wCAAoB,GAApB,UACE7wB,KAAY,EACZka,iBAAoC,EACpCoP,WAAyB,EACzB2B,WAAwB,EACxBgG,mBAA4B;IAE5B,IAAM3N,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;IACvC,IAAI2Q,IAAI,GAAG,IAAI,CAACF,KAAK,CAACj2B,GAAG,CAACyoB,OAAO,CAAC;IAClC,IAAI,CAAC0N,IAAI,EAAE;;MAET,IAAIhD,UAAU,GAAG1E,WAAW,CAAC3I,sBAAsB,CACjDsQ,mBAAmB,GAAGhG,WAAW,GAAG,IAAI,CACzC;MACD,IAAIiG,kBAAkB,GAAG,KAAK;MAC9B,IAAIlD,UAAU,EAAE;QACdkD,kBAAkB,GAAG,IAAI;OAC1B,MAAM,IAAIjG,WAAW,YAAYxV,YAAY,EAAE;QAC9CuY,UAAU,GAAG1E,WAAW,CAAC8B,yBAAyB,CAACH,WAAW,CAAC;QAC/DiG,kBAAkB,GAAG,KAAK;OAC3B,MAAM;QACLlD,UAAU,GAAGvY,YAAY,CAAC/H,UAAU;QACpCwjB,kBAAkB,GAAG,KAAK;;MAE5B,IAAMlI,SAAS,GAAG,IAAI7C,SAAS,CAC7B,IAAIN,SAAS,sBACUmI,UAAU,EAC/BkD,kBAAkB,EAClB,KAAK,CACN,EACD,IAAIrL,SAAS,sBACUoF,WAAW,EAChCgG,mBAAmB,EACnB,KAAK,CACN,CACF;MACDD,IAAI,GAAG,IAAItB,IAAI,CAAC1vB,KAAK,EAAEgpB,SAAS,CAAC;MACjC,IAAI,CAAC8H,KAAK,CAACn2B,GAAG,CAAC2oB,OAAO,EAAE0N,IAAI,CAAC;;;IAI/BA,IAAI,CAACG,oBAAoB,CAACjX,iBAAiB,CAAC;IAC5C,OAAO8W,IAAI,CAACI,gBAAgB,CAAClX,iBAAiB,CAAC;GAChD;;;;;;;;;;;;EAaD2W,2CAAuB,GAAvB,UACE7wB,KAAY,EACZka,iBAA2C,EAC3C4V,WAAmB;;IAEnB,IAAMxM,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;IACvC,IAAMgR,OAAO,GAAY,EAAE;IAC3B,IAAItB,YAAY,GAAY,EAAE;IAC9B,IAAMuB,eAAe,GAAG,IAAI,CAACC,eAAe,EAAE;IAC9C,IAAIjO,OAAO,KAAK,SAAS,EAAE;;;QAEzB,KAAkC,sBAAI,CAACwN,KAAK,CAACU,OAAO,EAAE,6CAAE;UAA7C,4BAAmB;YAAlBC,WAAW;YAAET,IAAI;UAC3BjB,YAAY,GAAGA,YAAY,CAACO,MAAM,CAChCU,IAAI,CAACU,uBAAuB,CAACxX,iBAAiB,EAAE4V,WAAW,CAAC,CAC7D;UACD,IAAIkB,IAAI,CAAC5jB,OAAO,EAAE,EAAE;YAClB,IAAI,CAAC0jB,KAAK,CAAChO,MAAM,CAAC2O,WAAW,CAAC;;YAG9B,IAAI,CAACT,IAAI,CAACW,QAAQ,EAAE,CAAC5W,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;cACpDyB,OAAO,CAAC7zB,IAAI,CAACwzB,IAAI,CAACW,QAAQ,EAAE,CAAC;;;;;;;;;;;;;;;KAIpC,MAAM;;MAEL,IAAMX,IAAI,GAAG,IAAI,CAACF,KAAK,CAACj2B,GAAG,CAACyoB,OAAO,CAAC;MACpC,IAAI0N,IAAI,EAAE;QACRjB,YAAY,GAAGA,YAAY,CAACO,MAAM,CAChCU,IAAI,CAACU,uBAAuB,CAACxX,iBAAiB,EAAE4V,WAAW,CAAC,CAC7D;QACD,IAAIkB,IAAI,CAAC5jB,OAAO,EAAE,EAAE;UAClB,IAAI,CAAC0jB,KAAK,CAAChO,MAAM,CAACQ,OAAO,CAAC;;UAG1B,IAAI,CAAC0N,IAAI,CAACW,QAAQ,EAAE,CAAC5W,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;YACpDyB,OAAO,CAAC7zB,IAAI,CAACwzB,IAAI,CAACW,QAAQ,EAAE,CAAC;;;;;IAMrC,IAAIL,eAAe,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE,EAAE;;MAE9CF,OAAO,CAAC7zB,IAAI,CACV,IAAIqzB,SAAS,CAACzU,sBAAsB,CAACpc,KAAK,CAACqc,IAAI,EAAErc,KAAK,CAACE,IAAI,CAAC,CAC7D;;IAGH,OAAO;MAAEmxB,OAAO;MAAEnD,MAAM,EAAE6B;IAAY,CAAE;GACzC;EAEDc,iCAAa,GAAb;;IACE,IAAM9gB,MAAM,GAAG,EAAE;;MACjB,KAAmB,sBAAI,CAAC+gB,KAAK,CAACjQ,MAAM,EAAE,6CAAE;QAAnC,IAAMmQ,IAAI;QACb,IAAI,CAACA,IAAI,CAACW,QAAQ,EAAE,CAAC5W,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;UACpD7f,MAAM,CAACvS,IAAI,CAACwzB,IAAI,CAAC;;;;;;;;;;;;;;IAGrB,OAAOjhB,MAAM;GACd;;;;;EAMD8gB,0CAAsB,GAAtB,UAAuB3wB,IAAU;;IAC/B,IAAI+qB,WAAW,GAAgB,IAAI;;MACnC,KAAmB,sBAAI,CAAC6F,KAAK,CAACjQ,MAAM,EAAE,6CAAE;QAAnC,IAAMmQ,IAAI;QACb/F,WAAW,GAAGA,WAAW,IAAI+F,IAAI,CAACY,sBAAsB,CAAC1xB,IAAI,CAAC;;;;;;;;;;;;;IAEhE,OAAO+qB,WAAW;GACnB;EAED4F,gCAAY,GAAZ,UAAa7wB,KAAY;IACvB,IAAMqF,MAAM,GAAGrF,KAAK,CAAC+a,cAAc,EAAE;IACrC,IAAI1V,MAAM,CAACuqB,YAAY,EAAE,EAAE;MACzB,OAAO,IAAI,CAACiC,eAAe,EAAE;KAC9B,MAAM;MACL,IAAMvO,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;MACvC,OAAO,IAAI,CAACyQ,KAAK,CAACj2B,GAAG,CAACyoB,OAAO,CAAC;;GAEjC;EAEDuN,sCAAkB,GAAlB,UAAmB7wB,KAAY;IAC7B,OAAO,IAAI,CAAC8xB,YAAY,CAAC9xB,KAAK,CAAC,IAAI,IAAI;GACxC;EAED6wB,mCAAe,GAAf;IACE,OAAO,IAAI,CAACgB,eAAe,EAAE,IAAI,IAAI;GACtC;EAEDhB,mCAAe,GAAf;;;MACE,KAAmB,sBAAI,CAACC,KAAK,CAACjQ,MAAM,EAAE,6CAAE;QAAnC,IAAMmQ,IAAI;QACb,IAAIA,IAAI,CAACW,QAAQ,EAAE,CAAC5W,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;UACnD,OAAOoB,IAAI;;;;;;;;;;;;;;IAGf,OAAO,IAAI;GACZ;EACH,gBAAC;AAAD,CAAC;;ACtQD;;;;;;;;;;;;;;;;AAyBA;;;;;;AAMA;EACE,uBAAoBe,UAA+B;IAA/B,eAAU,GAAVA,UAAU;;EAI9BC,gCAAQ,GAAR,UAAS9xB,IAAU,EAAE4L,IAAU;IAC7B,IAAI5L,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,OAAO,IAAI4kB,aAAa,CAAC,IAAI9N,aAAa,CAACpY,IAAI,CAAC,CAAC;KAClD,MAAM;MACL,IAAMmmB,QAAQ,GAAG,IAAI,CAACF,UAAU,CAACG,wBAAwB,CAAChyB,IAAI,CAAC;MAC/D,IAAI+xB,QAAQ,IAAI,IAAI,EAAE;QACpB,IAAME,YAAY,GAAGF,QAAQ,CAAC/xB,IAAI;QAClC,IAAI/I,KAAK,GAAG86B,QAAQ,CAAC96B,KAAK;QAC1B,IAAMmL,YAAY,GAAGd,IAAI,CAACc,YAAY,CAAC6vB,YAAY,EAAEjyB,IAAI,CAAC;QAC1D/I,KAAK,GAAGA,KAAK,CAAC+W,WAAW,CAAC5L,YAAY,EAAEwJ,IAAI,CAAC;QAC7C,OAAO,IAAIkmB,aAAa,CAAC,IAAI,CAACD,UAAU,CAACp3B,GAAG,CAACw3B,YAAY,EAAEh7B,KAAK,CAAC,CAAC;OACnE,MAAM;QACL,IAAM2sB,OAAO,GAAG,IAAII,aAAa,CAACpY,IAAI,CAAC;QACvC,IAAMsmB,YAAY,GAAG,IAAI,CAACL,UAAU,CAACpN,OAAO,CAACzkB,IAAI,EAAE4jB,OAAO,CAAC;QAC3D,OAAO,IAAIkO,aAAa,CAACI,YAAY,CAAC;;;GAG3C;EAEDJ,iCAAS,GAAT,UAAU9xB,IAAU,EAAEmyB,OAAiC;IACrD,IAAIC,QAAQ,GAAG,IAAqB;IACpCt0B,IAAI,CAACq0B,OAAO,EAAE,UAAChQ,QAAgB,EAAEvW,IAAU;MACzCwmB,QAAQ,GAAGA,QAAQ,CAACC,QAAQ,CAACryB,IAAI,CAACqD,KAAK,CAAC8e,QAAQ,CAAC,EAAEvW,IAAI,CAAC;KACzD,CAAC;IACF,OAAOwmB,QAAQ;GAChB;;;;;;;;EASDN,mCAAW,GAAX,UAAY9xB,IAAU;IACpB,IAAIA,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,OAAO4kB,aAAa,CAACjO,KAAK;KAC3B,MAAM;MACL,IAAMqO,YAAY,GAAG,IAAI,CAACL,UAAU,CAACpN,OAAO,CAACzkB,IAAI,EAAEgkB,aAAa,CAACH,KAAK,CAAC;MACvE,OAAO,IAAIiO,aAAa,CAACI,YAAY,CAAC;;GAEzC;;;;;;;;EASDJ,wCAAgB,GAAhB,UAAiB9xB,IAAU;IACzB,OAAO,IAAI,CAACsyB,eAAe,CAACtyB,IAAI,CAAC,IAAI,IAAI;GAC1C;;;;;;;;EASD8xB,uCAAe,GAAf,UAAgB9xB,IAAU;IACxB,IAAM+xB,QAAQ,GAAG,IAAI,CAACF,UAAU,CAACG,wBAAwB,CAAChyB,IAAI,CAAC;IAC/D,IAAI+xB,QAAQ,IAAI,IAAI,EAAE;MACpB,OAAO,IAAI,CAACF,UAAU,CACnBl3B,GAAG,CAACo3B,QAAQ,CAAC/xB,IAAI,CAAC,CAClB0V,QAAQ,CAACpU,IAAI,CAACc,YAAY,CAAC2vB,QAAQ,CAAC/xB,IAAI,EAAEA,IAAI,CAAC,CAAC;KACpD,MAAM;MACL,OAAO,IAAI;;GAEd;;;;;;EAOD8xB,2CAAmB,GAAnB;IACE,IAAM7P,QAAQ,GAAgB,EAAE;IAChC,IAAMrW,IAAI,GAAG,IAAI,CAACimB,UAAU,CAAC56B,KAAK;IAClC,IAAI2U,IAAI,IAAI,IAAI,EAAE;;MAEhB,IAAI,CAACA,IAAI,CAACqB,UAAU,EAAE,EAAE;QACrBrB,IAAqB,CAACsK,YAAY,CACjC5G,cAAc,EACd,UAAC5B,SAAS,EAAEC,SAAS;UACnBsU,QAAQ,CAAC3kB,IAAI,CAAC,IAAIuO,SAAS,CAAC6B,SAAS,EAAEC,SAAS,CAAC,CAAC;SACnD,CACF;;KAEJ,MAAM;MACL,IAAI,CAACkkB,UAAU,CAAC5P,QAAQ,CAAC9R,gBAAgB,CAAC,UAACzC,SAAS,EAAE0F,SAAS;QAC7D,IAAIA,SAAS,CAACnc,KAAK,IAAI,IAAI,EAAE;UAC3BgrB,QAAQ,CAAC3kB,IAAI,CAAC,IAAIuO,SAAS,CAAC6B,SAAS,EAAE0F,SAAS,CAACnc,KAAK,CAAC,CAAC;;OAE3D,CAAC;;IAEJ,OAAOgrB,QAAQ;GAChB;EAED6P,0CAAkB,GAAlB,UAAmB9xB,IAAU;IAC3B,IAAIA,IAAI,CAACkN,OAAO,EAAE,EAAE;MAClB,OAAO,IAAI;KACZ,MAAM;MACL,IAAMqlB,aAAa,GAAG,IAAI,CAACD,eAAe,CAACtyB,IAAI,CAAC;MAChD,IAAIuyB,aAAa,IAAI,IAAI,EAAE;QACzB,OAAO,IAAIT,aAAa,CAAC,IAAI9N,aAAa,CAACuO,aAAa,CAAC,CAAC;OAC3D,MAAM;QACL,OAAO,IAAIT,aAAa,CAAC,IAAI,CAACD,UAAU,CAACjO,OAAO,CAAC5jB,IAAI,CAAC,CAAC;;;GAG5D;;;;;EAMD8xB,+BAAO,GAAP;IACE,OAAO,IAAI,CAACD,UAAU,CAAC3kB,OAAO,EAAE;GACjC;;;;;;;EAQD4kB,6BAAK,GAAL,UAAMlmB,IAAU;IACd,OAAO4mB,iBAAiB,CAAClxB,IAAI,CAACuiB,KAAK,EAAE,IAAI,CAACgO,UAAU,EAAEjmB,IAAI,CAAC;GAC5D;EAnIMkmB,mBAAK,GAAG,IAAIA,aAAa,CAAC,IAAI9N,aAAa,CAAC,IAAI,CAAC,CAAC;EAoI3D,oBAAC;CAvID;AAyIA,SAASwO,iBAAiB,CACxBpwB,YAAkB,EAClBqwB,SAA8B,EAC9B7mB,IAAU;EAEV,IAAI6mB,SAAS,CAACx7B,KAAK,IAAI,IAAI,EAAE;;IAE3B,OAAO2U,IAAI,CAACoC,WAAW,CAAC5L,YAAY,EAAEqwB,SAAS,CAACx7B,KAAK,CAAC;GACvD,MAAM;IACL,IAAIy7B,eAAa,GAAG,IAAI;IACxBD,SAAS,CAACxQ,QAAQ,CAAC9R,gBAAgB,CAAC,UAACgS,QAAQ,EAAE/O,SAAS;MACtD,IAAI+O,QAAQ,KAAK,WAAW,EAAE;;;QAG5BhoB,MAAM,CACJiZ,SAAS,CAACnc,KAAK,KAAK,IAAI,EACxB,2CAA2C,CAC5C;QACDy7B,eAAa,GAAGtf,SAAS,CAACnc,KAAK;OAChC,MAAM;QACL2U,IAAI,GAAG4mB,iBAAiB,CAACpwB,YAAY,CAACiB,KAAK,CAAC8e,QAAQ,CAAC,EAAE/O,SAAS,EAAExH,IAAI,CAAC;;KAE1E,CAAC;;IAEF,IAAI,CAACA,IAAI,CAAC8J,QAAQ,CAACtT,YAAY,CAAC,CAAC8K,OAAO,EAAE,IAAIwlB,eAAa,KAAK,IAAI,EAAE;MACpE9mB,IAAI,GAAGA,IAAI,CAACoC,WAAW,CAAC5L,YAAY,CAACiB,KAAK,CAAC,WAAW,CAAC,EAAEqvB,eAAa,CAAC;;IAEzE,OAAO9mB,IAAI;;AAEf;;ACrMA;;;;;;;;;;;;;;;;AAwCA;;;;;;;AAOA;EAAA;;;;;;;;IAQU,mBAAc,GAAkBkmB,aAAa,CAACjO,KAAK;;;;;;;;;IAUnD,eAAU,GAAkB,EAAE;IAE9B,iBAAY,GAAG,CAAC,CAAC;;;;;;;;EAQzB8O,+BAAW,GAAX,UAAY3yB,IAAU;IACpB,OAAO,IAAI4yB,YAAY,CAAC5yB,IAAI,EAAE,IAAI,CAAC;GACpC;;;;;;;;;EAUD2yB,gCAAY,GAAZ,UAAa3yB,IAAU,EAAEgZ,IAAU,EAAE6Z,OAAe,EAAEC,OAAiB;IACrE34B,MAAM,CACJ04B,OAAO,GAAG,IAAI,CAACE,YAAY,EAC3B,8CAA8C,CAC/C;IACD,IAAID,OAAO,KAAKjrB,SAAS,EAAE;MACzBirB,OAAO,GAAG,IAAI;;IAEhB,IAAI,CAACE,UAAU,CAAC11B,IAAI,CAAC;MACnB0C,IAAI;MACJgZ,IAAI;MACJ6Z,OAAO;MACPC,OAAO;KACR,CAAC;IAEF,IAAIA,OAAO,EAAE;MACX,IAAI,CAACG,cAAc,GAAG,IAAI,CAACA,cAAc,CAACZ,QAAQ,CAACryB,IAAI,EAAEgZ,IAAI,CAAC;;IAEhE,IAAI,CAAC+Z,YAAY,GAAGF,OAAO;GAC5B;;;;;;;;EASDF,4BAAQ,GAAR,UACE3yB,IAAU,EACVysB,eAAsC,EACtCoG,OAAe;IAEf14B,MAAM,CACJ04B,OAAO,GAAG,IAAI,CAACE,YAAY,EAC3B,8CAA8C,CAC/C;IACD,IAAI,CAACC,UAAU,CAAC11B,IAAI,CAAC;MACnB0C,IAAI;MACJiiB,QAAQ,EAAEwK,eAAe;MACzBoG,OAAO;MACPC,OAAO,EAAE;KACV,CAAC;IAEF,IAAI,CAACG,cAAc,GAAG,IAAI,CAACA,cAAc,CAACC,SAAS,CAAClzB,IAAI,EAAEysB,eAAe,CAAC;IAC1E,IAAI,CAACsG,YAAY,GAAGF,OAAO;GAC5B;;;;;EAMDF,4BAAQ,GAAR,UAASE,OAAe;IACtB,KAAK,IAAIr5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACw5B,UAAU,CAACv5B,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAM25B,MAAM,GAAG,IAAI,CAACH,UAAU,CAACx5B,CAAC,CAAC;MACjC,IAAI25B,MAAM,CAACN,OAAO,KAAKA,OAAO,EAAE;QAC9B,OAAOM,MAAM;;;IAGjB,OAAO,IAAI;GACZ;;;;;;;;;EAUDR,+BAAW,GAAX,UAAYE,OAAe;;;;;IAA3B;IAME,IAAMtc,GAAG,GAAG,IAAI,CAACyc,UAAU,CAACI,SAAS,CAAC,WAAC;MACrC,OAAO/0B,CAAC,CAACw0B,OAAO,KAAKA,OAAO;KAC7B,CAAC;IACF14B,MAAM,CAACoc,GAAG,IAAI,CAAC,EAAE,8CAA8C,CAAC;IAChE,IAAM8c,aAAa,GAAG,IAAI,CAACL,UAAU,CAACzc,GAAG,CAAC;IAC1C,IAAI,CAACyc,UAAU,CAACM,MAAM,CAAC/c,GAAG,EAAE,CAAC,CAAC;IAE9B,IAAIgd,sBAAsB,GAAGF,aAAa,CAACP,OAAO;IAClD,IAAIU,mCAAmC,GAAG,KAAK;IAE/C,IAAIh6B,CAAC,GAAG,IAAI,CAACw5B,UAAU,CAACv5B,MAAM,GAAG,CAAC;IAElC,OAAO85B,sBAAsB,IAAI/5B,CAAC,IAAI,CAAC,EAAE;MACvC,IAAMi6B,YAAY,GAAG,IAAI,CAACT,UAAU,CAACx5B,CAAC,CAAC;MACvC,IAAIi6B,YAAY,CAACX,OAAO,EAAE;QACxB,IACEt5B,CAAC,IAAI+c,GAAG,IACR,IAAI,CAACmd,mBAAmB,CAACD,YAAY,EAAEJ,aAAa,CAACrzB,IAAI,CAAC,EAC1D;;UAEAuzB,sBAAsB,GAAG,KAAK;SAC/B,MAAM,IAAIF,aAAa,CAACrzB,IAAI,CAAClI,QAAQ,CAAC27B,YAAY,CAACzzB,IAAI,CAAC,EAAE;;UAEzDwzB,mCAAmC,GAAG,IAAI;;;MAG9Ch6B,CAAC,EAAE;;IAGL,IAAI,CAAC+5B,sBAAsB,EAAE;MAC3B,OAAO,KAAK;KACb,MAAM,IAAIC,mCAAmC,EAAE;;MAE9C,IAAI,CAACG,UAAU,EAAE;MACjB,OAAO,IAAI;KACZ,MAAM;;MAEL,IAAIN,aAAa,CAACra,IAAI,EAAE;QACtB,IAAI,CAACia,cAAc,GAAG,IAAI,CAACA,cAAc,CAACW,WAAW,CACnDP,aAAa,CAACrzB,IAAI,CACnB;OACF,MAAM;QACL,IAAMiiB,QAAQ,GAAGoR,aAAa,CAACpR,QAAQ;QACvCnkB,IAAI,CAACmkB,QAAQ,EAAE,UAACvU,SAAiB;UAC/BsH,KAAI,CAACie,cAAc,GAAGje,KAAI,CAACie,cAAc,CAACW,WAAW,CACnDP,aAAa,CAACrzB,IAAI,CAACqD,KAAK,CAACqK,SAAS,CAAC,CACpC;SACF,CAAC;;MAEJ,OAAO,IAAI;;GAEd;;;;;;;;EASDilB,wCAAoB,GAApB,UAAqB3yB,IAAU;IAC7B,OAAO,IAAI,CAACizB,cAAc,CAACX,eAAe,CAACtyB,IAAI,CAAC;GACjD;;;;;;;;;;;EAYD2yB,0CAAsB,GAAtB,UACEkB,QAAc,EACdpG,mBAAgC,EAChCqG,iBAA4B,EAC5BC,mBAA6B;IAE7B,IAAI,CAACD,iBAAiB,IAAI,CAACC,mBAAmB,EAAE;MAC9C,IAAMxB,aAAa,GAAG,IAAI,CAACU,cAAc,CAACX,eAAe,CAACuB,QAAQ,CAAC;MACnE,IAAItB,aAAa,IAAI,IAAI,EAAE;QACzB,OAAOA,aAAa;OACrB,MAAM;QACL,IAAMyB,QAAQ,GAAG,IAAI,CAACf,cAAc,CAACgB,kBAAkB,CAACJ,QAAQ,CAAC;QACjE,IAAIG,QAAQ,CAAC9mB,OAAO,EAAE,EAAE;UACtB,OAAOugB,mBAAmB;SAC3B,MAAM,IACLA,mBAAmB,IAAI,IAAI,IAC3B,CAACuG,QAAQ,CAACE,gBAAgB,CAAC5yB,IAAI,CAACuiB,KAAK,CAAC,EACtC;;UAEA,OAAO,IAAI;SACZ,MAAM;UACL,IAAMsQ,YAAY,GAAG1G,mBAAmB,IAAIlY,YAAY,CAAC/H,UAAU;UACnE,OAAOwmB,QAAQ,CAACn6B,KAAK,CAACs6B,YAAY,CAAC;;;KAGxC,MAAM;MACL,IAAMtK,KAAK,GAAG,IAAI,CAACoJ,cAAc,CAACgB,kBAAkB,CAACJ,QAAQ,CAAC;MAC9D,IAAI,CAACE,mBAAmB,IAAIlK,KAAK,CAAC3c,OAAO,EAAE,EAAE;QAC3C,OAAOugB,mBAAmB;OAC3B,MAAM;;QAEL,IACE,CAACsG,mBAAmB,IACpBtG,mBAAmB,IAAI,IAAI,IAC3B,CAAC5D,KAAK,CAACqK,gBAAgB,CAAC5yB,IAAI,CAACuiB,KAAK,CAAC,EACnC;UACA,OAAO,IAAI;SACZ,MAAM;UACL,IAAM0K,MAAM,GAAG,SAATA,MAAM,CAAa6F,KAAkB;YACzC,OACE,CAACA,KAAK,CAACtB,OAAO,IAAIiB,mBAAmB,MACpC,CAACD,iBAAiB,IACjB,CAAC,CAACA,iBAAiB,CAACz4B,OAAO,CAAC+4B,KAAK,CAACvB,OAAO,CAAC,CAAC,KAC5CuB,KAAK,CAACp0B,IAAI,CAAClI,QAAQ,CAAC+7B,QAAQ,CAAC,IAAIA,QAAQ,CAAC/7B,QAAQ,CAACs8B,KAAK,CAACp0B,IAAI,CAAC,CAAC;WAEnE;UACD,IAAMq0B,WAAW,GAAG1B,SAAS,CAAC2B,UAAU,CACtC,IAAI,CAACtB,UAAU,EACfzE,MAAM,EACNsF,QAAQ,CACT;UACD,IAAMM,YAAY,GAAG1G,mBAAmB,IAAIlY,YAAY,CAAC/H,UAAU;UACnE,OAAO6mB,WAAW,CAACx6B,KAAK,CAACs6B,YAAY,CAAC;;;;GAI7C;;;;;;;;;EAUDxB,6CAAyB,GAAzB,UACEkB,QAAc,EACdU,sBAA2C;IAE3C,IAAIvJ,gBAAgB,GAAGzV,YAAY,CAAC/H,UAAkB;IACtD,IAAMgnB,WAAW,GAAG,IAAI,CAACvB,cAAc,CAACX,eAAe,CAACuB,QAAQ,CAAC;IACjE,IAAIW,WAAW,EAAE;MACf,IAAI,CAACA,WAAW,CAACvnB,UAAU,EAAE,EAAE;;QAE7BunB,WAAW,CAACte,YAAY,CAAC5G,cAAc,EAAE,UAAC5B,SAAS,EAAEuW,SAAS;UAC5D+G,gBAAgB,GAAGA,gBAAgB,CAACld,oBAAoB,CACtDJ,SAAS,EACTuW,SAAS,CACV;SACF,CAAC;;MAEJ,OAAO+G,gBAAgB;KACxB,MAAM,IAAIuJ,sBAAsB,EAAE;;;MAGjC,IAAME,OAAK,GAAG,IAAI,CAACxB,cAAc,CAACgB,kBAAkB,CAACJ,QAAQ,CAAC;MAC9DU,sBAAsB,CAACre,YAAY,CACjC5G,cAAc,EACd,UAAC5B,SAAS,EAAEC,SAAS;QACnB,IAAM/B,IAAI,GAAG6oB,OAAK,CACfR,kBAAkB,CAAC,IAAI3yB,IAAI,CAACoM,SAAS,CAAC,CAAC,CACvC7T,KAAK,CAAC8T,SAAS,CAAC;QACnBqd,gBAAgB,GAAGA,gBAAgB,CAACld,oBAAoB,CACtDJ,SAAS,EACT9B,IAAI,CACL;OACF,CACF;;MAED6oB,OAAK,CAACC,mBAAmB,EAAE,CAAC1R,OAAO,CAAC,mBAAS;QAC3CgI,gBAAgB,GAAGA,gBAAgB,CAACld,oBAAoB,CACtD+E,SAAS,CAACpb,IAAI,EACdob,SAAS,CAACjH,IAAI,CACf;OACF,CAAC;MACF,OAAOof,gBAAgB;KACxB,MAAM;;;MAGL,IAAMnB,KAAK,GAAG,IAAI,CAACoJ,cAAc,CAACgB,kBAAkB,CAACJ,QAAQ,CAAC;MAC9DhK,KAAK,CAAC6K,mBAAmB,EAAE,CAAC1R,OAAO,CAAC,mBAAS;QAC3CgI,gBAAgB,GAAGA,gBAAgB,CAACld,oBAAoB,CACtD+E,SAAS,CAACpb,IAAI,EACdob,SAAS,CAACjH,IAAI,CACf;OACF,CAAC;MACF,OAAOof,gBAAgB;;GAE1B;;;;;;;;;;;;;;;;;;;;;EAsBD2H,sDAAkC,GAAlC,UACEkB,QAAc,EACdna,SAAe,EACfib,iBAA8B,EAC9BC,kBAA+B;IAE/Bz6B,MAAM,CACJw6B,iBAAiB,IAAIC,kBAAkB,EACvC,2DAA2D,CAC5D;IACD,IAAM50B,IAAI,GAAG6zB,QAAQ,CAACxwB,KAAK,CAACqW,SAAS,CAAC;IACtC,IAAI,IAAI,CAACuZ,cAAc,CAACiB,gBAAgB,CAACl0B,IAAI,CAAC,EAAE;;;MAG9C,OAAO,IAAI;KACZ,MAAM;;MAEL,IAAM60B,UAAU,GAAG,IAAI,CAAC5B,cAAc,CAACgB,kBAAkB,CAACj0B,IAAI,CAAC;MAC/D,IAAI60B,UAAU,CAAC3nB,OAAO,EAAE,EAAE;;QAExB,OAAO0nB,kBAAkB,CAAClf,QAAQ,CAACgE,SAAS,CAAC;OAC9C,MAAM;;;;;;;QAOL,OAAOmb,UAAU,CAACh7B,KAAK,CAAC+6B,kBAAkB,CAAClf,QAAQ,CAACgE,SAAS,CAAC,CAAC;;;GAGpE;;;;;;;;;;EAWDiZ,qCAAiB,GAAjB,UACEkB,QAAc,EACd1R,QAAgB,EAChByS,kBAA6B;IAE7B,IAAM50B,IAAI,GAAG6zB,QAAQ,CAACxwB,KAAK,CAAC8e,QAAQ,CAAC;IACrC,IAAMoQ,aAAa,GAAG,IAAI,CAACU,cAAc,CAACX,eAAe,CAACtyB,IAAI,CAAC;IAC/D,IAAIuyB,aAAa,IAAI,IAAI,EAAE;MACzB,OAAOA,aAAa;KACrB,MAAM;MACL,IAAIqC,kBAAkB,CAAC/O,kBAAkB,CAAC1D,QAAQ,CAAC,EAAE;QACnD,IAAM0S,UAAU,GAAG,IAAI,CAAC5B,cAAc,CAACgB,kBAAkB,CAACj0B,IAAI,CAAC;QAC/D,OAAO60B,UAAU,CAACh7B,KAAK,CACrB+6B,kBAAkB,CAACtO,OAAO,EAAE,CAAC7Q,iBAAiB,CAAC0M,QAAQ,CAAC,CACzD;OACF,MAAM;QACL,OAAO,IAAI;;;GAGhB;;;;;;EAODwQ,kCAAc,GAAd,UAAe3yB,IAAU;IACvB,OAAO,IAAI,CAACizB,cAAc,CAACX,eAAe,CAACtyB,IAAI,CAAC;GACjD;;;;;EAMD2yB,oCAAgB,GAAhB,UACEkB,QAAc,EACdnL,kBAA+B,EAC/B3R,SAAoB,EACpB7G,KAAa,EACbnR,OAAgB,EAChBkP,KAAY;IAEZ,IAAI6mB,SAAe;IACnB,IAAMjL,KAAK,GAAG,IAAI,CAACoJ,cAAc,CAACgB,kBAAkB,CAACJ,QAAQ,CAAC;IAC9D,IAAMtB,aAAa,GAAG1I,KAAK,CAACyI,eAAe,CAAChxB,IAAI,CAACuiB,KAAK,CAAC;IACvD,IAAI0O,aAAa,IAAI,IAAI,EAAE;MACzBuC,SAAS,GAAGvC,aAAa;KAC1B,MAAM,IAAI7J,kBAAkB,IAAI,IAAI,EAAE;MACrCoM,SAAS,GAAGjL,KAAK,CAAChwB,KAAK,CAAC6uB,kBAAkB,CAAC;KAC5C,MAAM;;MAEL,OAAO,EAAE;;IAEXoM,SAAS,GAAGA,SAAS,CAACrN,SAAS,CAACxZ,KAAK,CAAC;IACtC,IAAI,CAAC6mB,SAAS,CAAC5nB,OAAO,EAAE,IAAI,CAAC4nB,SAAS,CAAC7nB,UAAU,EAAE,EAAE;MACnD,IAAM2b,KAAK,GAAG,EAAE;MAChB,IAAMlmB,GAAG,GAAGuL,KAAK,CAACyG,UAAU,EAAE;MAC9B,IAAMN,IAAI,GAAGrV,OAAO,GACf+1B,SAA0B,CAAC5d,sBAAsB,CAACH,SAAS,EAAE9I,KAAK,CAAC,GACnE6mB,SAA0B,CAACje,eAAe,CAACE,SAAS,EAAE9I,KAAK,CAAC;MACjE,IAAI3C,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;MACzB,OAAOjJ,IAAI,IAAIsd,KAAK,CAACnvB,MAAM,GAAGyW,KAAK,EAAE;QACnC,IAAIxN,GAAG,CAAC4I,IAAI,EAAEyL,SAAS,CAAC,KAAK,CAAC,EAAE;UAC9B6R,KAAK,CAACtrB,IAAI,CAACgO,IAAI,CAAC;;QAElBA,IAAI,GAAG8I,IAAI,CAACG,OAAO,EAAE;;MAEvB,OAAOqU,KAAK;KACb,MAAM;MACL,OAAO,EAAE;;GAEZ;EAEO+J,uCAAmB,GAA3B,UAA4BoC,WAAwB,EAAE/0B,IAAU;IAC9D,IAAI+0B,WAAW,CAAC/b,IAAI,EAAE;MACpB,OAAO+b,WAAW,CAAC/0B,IAAI,CAAClI,QAAQ,CAACkI,IAAI,CAAC;KACvC,MAAM;MACL,KAAK,IAAM0N,SAAS,IAAIqnB,WAAW,CAAC9S,QAAQ,EAAE;QAC5C,IACE8S,WAAW,CAAC9S,QAAQ,CAAClkB,cAAc,CAAC2P,SAAS,CAAC,IAC9CqnB,WAAW,CAAC/0B,IAAI,CAACqD,KAAK,CAACqK,SAAS,CAAC,CAAC5V,QAAQ,CAACkI,IAAI,CAAC,EAChD;UACA,OAAO,IAAI;;;MAGf,OAAO,KAAK;;GAEf;;;;EAKO2yB,8BAAU,GAAlB;IACE,IAAI,CAACM,cAAc,GAAGN,SAAS,CAAC2B,UAAU,CACxC,IAAI,CAACtB,UAAU,EACfL,SAAS,CAACqC,cAAc,EACxB1zB,IAAI,CAACuiB,KAAK,CACX;IACD,IAAI,IAAI,CAACmP,UAAU,CAACv5B,MAAM,GAAG,CAAC,EAAE;MAC9B,IAAI,CAACs5B,YAAY,GAAG,IAAI,CAACC,UAAU,CAAC,IAAI,CAACA,UAAU,CAACv5B,MAAM,GAAG,CAAC,CAAC,CAACo5B,OAAO;KACxE,MAAM;MACL,IAAI,CAACE,YAAY,GAAG,CAAC,CAAC;;GAEzB;;;;EAKcJ,wBAAc,GAA7B,UAA8ByB,KAAkB;IAC9C,OAAOA,KAAK,CAACtB,OAAO;GACrB;;;;;EAMcH,oBAAU,GAAzB,UACEsC,MAAqB,EACrB1G,MAAmC,EACnC2G,QAAc;IAEd,IAAIC,aAAa,GAAGrD,aAAa,CAACjO,KAAK;IACvC,KAAK,IAAIrqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGy7B,MAAM,CAACx7B,MAAM,EAAE,EAAED,CAAC,EAAE;MACtC,IAAM46B,KAAK,GAAGa,MAAM,CAACz7B,CAAC,CAAC;;;;MAIvB,IAAI+0B,MAAM,CAAC6F,KAAK,CAAC,EAAE;QACjB,IAAMxH,SAAS,GAAGwH,KAAK,CAACp0B,IAAI;QAC5B,IAAIoC,YAAY;QAChB,IAAIgyB,KAAK,CAACpb,IAAI,EAAE;UACd,IAAIkc,QAAQ,CAACp9B,QAAQ,CAAC80B,SAAS,CAAC,EAAE;YAChCxqB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAAC8yB,QAAQ,EAAEtI,SAAS,CAAC;YACrDuI,aAAa,GAAGA,aAAa,CAAC9C,QAAQ,CAACjwB,YAAY,EAAEgyB,KAAK,CAACpb,IAAI,CAAC;WACjE,MAAM,IAAI4T,SAAS,CAAC90B,QAAQ,CAACo9B,QAAQ,CAAC,EAAE;YACvC9yB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACwqB,SAAS,EAAEsI,QAAQ,CAAC;YACrDC,aAAa,GAAGA,aAAa,CAAC9C,QAAQ,CACpC/wB,IAAI,CAACuiB,KAAK,EACVuQ,KAAK,CAACpb,IAAI,CAACtD,QAAQ,CAACtT,YAAY,CAAC,CAClC;WACF,MAAM;SAGR,MAAM,IAAIgyB,KAAK,CAACnS,QAAQ,EAAE;UACzB,IAAIiT,QAAQ,CAACp9B,QAAQ,CAAC80B,SAAS,CAAC,EAAE;YAChCxqB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAAC8yB,QAAQ,EAAEtI,SAAS,CAAC;YACrDuI,aAAa,GAAGA,aAAa,CAACjC,SAAS,CACrC9wB,YAAY,EACZgyB,KAAK,CAACnS,QAAQ,CACf;WACF,MAAM,IAAI2K,SAAS,CAAC90B,QAAQ,CAACo9B,QAAQ,CAAC,EAAE;YACvC9yB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACwqB,SAAS,EAAEsI,QAAQ,CAAC;YACrD,IAAI9yB,YAAY,CAAC8K,OAAO,EAAE,EAAE;cAC1BioB,aAAa,GAAGA,aAAa,CAACjC,SAAS,CACrC5xB,IAAI,CAACuiB,KAAK,EACVuQ,KAAK,CAACnS,QAAQ,CACf;aACF,MAAM;cACL,IAAM5e,KAAK,GAAG2Q,OAAO,CAACogB,KAAK,CAACnS,QAAQ,EAAE7f,YAAY,CAACF,QAAQ,EAAE,CAAC;cAC9D,IAAImB,KAAK,EAAE;;gBAET,IAAM+xB,QAAQ,GAAG/xB,KAAK,CAACqS,QAAQ,CAACtT,YAAY,CAACC,QAAQ,EAAE,CAAC;gBACxD8yB,aAAa,GAAGA,aAAa,CAAC9C,QAAQ,CAAC/wB,IAAI,CAACuiB,KAAK,EAAEuR,QAAQ,CAAC;;;WAGjE,MAAM;SAGR,MAAM;UACL,MAAM3oB,cAAc,CAAC,4CAA4C,CAAC;;;;IAIxE,OAAO0oB,aAAa;GACrB;EACH,gBAAC;AAAD,CAAC;AAED;;;;;;AAMA;;;;;EA4BE,sBAAYn1B,IAAU,EAAEyyB,SAAoB;IAC1C,IAAI,CAAC4C,SAAS,GAAGr1B,IAAI;IACrB,IAAI,CAAC6xB,UAAU,GAAGY,SAAS;;;;;;;;;;;;EAa7BG,6CAAsB,GAAtB,UACEnF,mBAAgC,EAChCqG,iBAA4B,EAC5BC,mBAA6B;IAE7B,OAAO,IAAI,CAAClC,UAAU,CAACpR,sBAAsB,CAC3C,IAAI,CAAC4U,SAAS,EACd5H,mBAAmB,EACnBqG,iBAAiB,EACjBC,mBAAmB,CACpB;GACF;;;;;;;;EASDnB,gDAAyB,GAAzB,UACE2B,sBAA2C;IAE3C,OAAO,IAAI,CAAC1C,UAAU,CAAC3G,yBAAyB,CAC9C,IAAI,CAACmK,SAAS,EACdd,sBAAsB,CACP;GAClB;;;;;;;;;;;;;;;;;;;;EAqBD3B,yDAAkC,GAAlC,UACE5yB,IAAU,EACV20B,iBAA8B,EAC9BC,kBAA+B;IAE/B,OAAO,IAAI,CAAC/C,UAAU,CAACtG,kCAAkC,CACvD,IAAI,CAAC8J,SAAS,EACdr1B,IAAI,EACJ20B,iBAAiB,EACjBC,kBAAkB,CACnB;GACF;;;;;;;;;EAUDhC,qCAAc,GAAd,UAAe5yB,IAAU;IACvB,OAAO,IAAI,CAAC6xB,UAAU,CAAChH,cAAc,CAAC,IAAI,CAACwK,SAAS,CAAChyB,KAAK,CAACrD,IAAI,CAAC,CAAC;GAClE;;;;;;;;;;;;EAaD4yB,uCAAgB,GAAhB,UACElK,kBAA+B,EAC/B3R,SAAoB,EACpB7G,KAAa,EACbnR,OAAgB,EAChBkP,KAAY;IAEZ,OAAO,IAAI,CAAC4jB,UAAU,CAAChJ,gBAAgB,CACrC,IAAI,CAACwM,SAAS,EACd3M,kBAAkB,EAClB3R,SAAS,EACT7G,KAAK,EACLnR,OAAO,EACPkP,KAAK,CACN;GACF;;;;;;;;;EAUD2kB,wCAAiB,GAAjB,UACEzQ,QAAgB,EAChBmT,mBAA8B;IAE9B,OAAO,IAAI,CAACzD,UAAU,CAACpJ,iBAAiB,CACtC,IAAI,CAAC4M,SAAS,EACdlT,QAAQ,EACRmT,mBAAmB,CACpB;GACF;;;;;;;EAQD1C,4BAAK,GAAL,UAAMllB,SAAiB;IACrB,OAAO,IAAIklB,YAAY,CAAC,IAAI,CAACyC,SAAS,CAAChyB,KAAK,CAACqK,SAAS,CAAC,EAAE,IAAI,CAACmkB,UAAU,CAAC;GAC1E;EACH,mBAAC;AAAD,CAAC;;ACvwBD;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;EAkBE,kBAAoB0D,eAA+B;IAA/B,oBAAe,GAAfA,eAAe;;;;IAd3B,mBAAc,GAA6BvR,aAAa,CAACH,KAAK;;;;IAK9D,sBAAiB,GAAG,IAAI8O,SAAS,EAAE;IAE1B,kBAAa,GAAwB,IAAI5Q,GAAG,EAAE;IAC9C,kBAAa,GAAwB,IAAIA,GAAG,EAAE;;;;;;;EAa/DyT,qCAAkB,GAAlB,UACEx1B,IAAU,EACVy1B,OAAa,EACb5C,OAAe,EACfC,OAAiB;;IAGjB,IAAI,CAAC4C,iBAAiB,CAACC,YAAY,CAAC31B,IAAI,EAAEy1B,OAAO,EAAE5C,OAAO,EAAEC,OAAO,CAAC;IAEpE,IAAI,CAACA,OAAO,EAAE;MACZ,OAAO,EAAE;KACV,MAAM;MACL,OAAO,IAAI,CAAC8C,2BAA2B,CACrC,IAAItQ,SAAS,CAAChC,eAAe,CAACI,IAAI,EAAE1jB,IAAI,EAAEy1B,OAAO,CAAC,CACnD;;GAEJ;;;;;;EAODD,iCAAc,GAAd,UACEx1B,IAAU,EACVysB,eAAsC,EACtCoG,OAAe;;IAGf,IAAI,CAAC6C,iBAAiB,CAACG,QAAQ,CAAC71B,IAAI,EAAEysB,eAAe,EAAEoG,OAAO,CAAC;IAE/D,IAAMiD,UAAU,GAAG9R,aAAa,CAAC+R,UAAU,CAACtJ,eAAe,CAAC;IAE5D,OAAO,IAAI,CAACmJ,2BAA2B,CACrC,IAAIpQ,KAAK,CAAClC,eAAe,CAACI,IAAI,EAAE1jB,IAAI,EAAE81B,UAAU,CAAC,CAClD;GACF;;;;;;;EAQDN,+BAAY,GAAZ,UAAa3C,OAAe,EAAErP,MAAuB;IAAvB;MAAAA,cAAuB;IAAA;IACnD,IAAM4Q,KAAK,GAAG,IAAI,CAACsB,iBAAiB,CAACM,QAAQ,CAACnD,OAAO,CAAC;IACtD,IAAMoD,gBAAgB,GAAG,IAAI,CAACP,iBAAiB,CAAC9B,WAAW,CAACf,OAAO,CAAC;IACpE,IAAI,CAACoD,gBAAgB,EAAE;MACrB,OAAO,EAAE;KACV,MAAM;MACL,IAAIC,cAAY,GAAGlS,aAAa,CAACH,KAAK;MACtC,IAAIuQ,KAAK,CAACpb,IAAI,IAAI,IAAI,EAAE;;QAEtBkd,cAAY,GAAGA,cAAY,CAACz7B,GAAG,CAAC6G,IAAI,CAACuiB,KAAK,EAAE,IAAI,CAAC;OAClD,MAAM;QACL/lB,IAAI,CAACs2B,KAAK,CAACnS,QAAQ,EAAE,UAAC1gB,UAAkB,EAAEqK,IAAU;UAClDsqB,cAAY,GAAGA,cAAY,CAACz7B,GAAG,CAAC,IAAI6G,IAAI,CAACC,UAAU,CAAC,EAAEqK,IAAI,CAAC;SAC5D,CAAC;;MAEJ,OAAO,IAAI,CAACgqB,2BAA2B,CACrC,IAAIjS,YAAY,CAACyQ,KAAK,CAACp0B,IAAI,EAAEk2B,cAAY,EAAE1S,MAAM,CAAC,CACnD;;GAEJ;;;;;;EAODgS,uCAAoB,GAApB,UAAqBx1B,IAAU,EAAEy1B,OAAa;IAC5C,OAAO,IAAI,CAACG,2BAA2B,CACrC,IAAItQ,SAAS,CAAChC,eAAe,CAAC6S,MAAM,EAAEn2B,IAAI,EAAEy1B,OAAO,CAAC,CACrD;GACF;;;;;;EAODD,mCAAgB,GAAhB,UACEx1B,IAAU,EACVysB,eAAsC;IAEtC,IAAMqJ,UAAU,GAAG9R,aAAa,CAAC+R,UAAU,CAACtJ,eAAe,CAAC;IAE5D,OAAO,IAAI,CAACmJ,2BAA2B,CACrC,IAAIpQ,KAAK,CAAClC,eAAe,CAAC6S,MAAM,EAAEn2B,IAAI,EAAE81B,UAAU,CAAC,CACpD;GACF;;;;;;EAODN,sCAAmB,GAAnB,UAAoBx1B,IAAU;IAC5B,OAAO,IAAI,CAAC41B,2BAA2B,CACrC,IAAIxQ,cAAc,CAAC9B,eAAe,CAAC6S,MAAM,EAAEn2B,IAAI,CAAC,CACjD;GACF;;;;;;EAODw1B,4CAAyB,GAAzB,UAA0Bx1B,IAAU,EAAEgZ,IAAU,EAAEod,GAAW;IAC3D,IAAMC,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACF,GAAG,CAAC;IAC1C,IAAIC,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAc,CAACH,QAAQ,CAAC;MAC3C,IAAMI,SAAS,GAAGF,CAAC,CAACv2B,IAAI;QACtBojB,OAAO,GAAGmT,CAAC,CAACnT,OAAO;MACrB,IAAMhhB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACq0B,SAAS,EAAEz2B,IAAI,CAAC;MACvD,IAAMohB,EAAE,GAAG,IAAIkE,SAAS,CACtBhC,eAAe,CAACoT,oBAAoB,CAACtT,OAAO,CAAC,EAC7ChhB,YAAY,EACZ4W,IAAI,CACL;MACD,OAAO,IAAI,CAAC2d,qBAAqB,CAACF,SAAS,EAAErV,EAAE,CAAC;KACjD,MAAM;;MAEL,OAAO,EAAE;;GAEZ;;;;;;EAODoU,wCAAqB,GAArB,UACEx1B,IAAU,EACVysB,eAAsC,EACtC2J,GAAW;IAEX,IAAMC,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACF,GAAG,CAAC;IAC1C,IAAIC,QAAQ,EAAE;MACZ,IAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAc,CAACH,QAAQ,CAAC;MAC3C,IAAMI,SAAS,GAAGF,CAAC,CAACv2B,IAAI;QACtBojB,OAAO,GAAGmT,CAAC,CAACnT,OAAO;MACrB,IAAMhhB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACq0B,SAAS,EAAEz2B,IAAI,CAAC;MACvD,IAAM81B,UAAU,GAAG9R,aAAa,CAAC+R,UAAU,CAACtJ,eAAe,CAAC;MAC5D,IAAMrL,EAAE,GAAG,IAAIoE,KAAK,CAClBlC,eAAe,CAACoT,oBAAoB,CAACtT,OAAO,CAAC,EAC7ChhB,YAAY,EACZ0zB,UAAU,CACX;MACD,OAAO,IAAI,CAACa,qBAAqB,CAACF,SAAS,EAAErV,EAAE,CAAC;KACjD,MAAM;;MAEL,OAAO,EAAE;;GAEZ;;;;;;EAODoU,4CAAyB,GAAzB,UAA0Bx1B,IAAU,EAAEo2B,GAAW;IAC/C,IAAMC,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACF,GAAG,CAAC;IAC1C,IAAIC,QAAQ,EAAE;MACZ,IAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAc,CAACH,QAAQ,CAAC;MAC3C,IAAMI,SAAS,GAAGF,CAAC,CAACv2B,IAAI;QACtBojB,OAAO,GAAGmT,CAAC,CAACnT,OAAO;MACrB,IAAMhhB,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACq0B,SAAS,EAAEz2B,IAAI,CAAC;MACvD,IAAMohB,EAAE,GAAG,IAAIgE,cAAc,CAC3B9B,eAAe,CAACoT,oBAAoB,CAACtT,OAAO,CAAC,EAC7ChhB,YAAY,CACb;MACD,OAAO,IAAI,CAACu0B,qBAAqB,CAACF,SAAS,EAAErV,EAAE,CAAC;KACjD,MAAM;;MAEL,OAAO,EAAE;;GAEZ;;;;;;EAODoU,uCAAoB,GAApB,UACE11B,KAAY,EACZka,iBAAoC;IAEpC,IAAMha,IAAI,GAAGF,KAAK,CAACE,IAAI;IAEvB,IAAI+qB,WAAW,GAAgB,IAAI;IACnC,IAAI6L,wBAAwB,GAAG,KAAK;;;IAGpC,IAAI,CAACC,cAAc,CAACC,aAAa,CAAC92B,IAAI,EAAE,UAAC+2B,eAAe,EAAEC,EAAE;MAC1D,IAAM50B,YAAY,GAAGd,IAAI,CAACc,YAAY,CAAC20B,eAAe,EAAE/2B,IAAI,CAAC;MAC7D+qB,WAAW,GAAGA,WAAW,IAAIiM,EAAE,CAACtF,sBAAsB,CAACtvB,YAAY,CAAC;MACpEw0B,wBAAwB,GACtBA,wBAAwB,IAAII,EAAE,CAAC3F,eAAe,EAAE;KACnD,CAAC;IACF,IAAI4F,SAAS,GAAG,IAAI,CAACJ,cAAc,CAACl8B,GAAG,CAACqF,IAAI,CAAC;IAC7C,IAAI,CAACi3B,SAAS,EAAE;MACdA,SAAS,GAAG,IAAItG,SAAS,EAAE;MAC3B,IAAI,CAACkG,cAAc,GAAG,IAAI,CAACA,cAAc,CAACp8B,GAAG,CAACuF,IAAI,EAAEi3B,SAAS,CAAC;KAC/D,MAAM;MACLL,wBAAwB,GACtBA,wBAAwB,IAAIK,SAAS,CAAC5F,eAAe,EAAE;MACzDtG,WAAW,GAAGA,WAAW,IAAIkM,SAAS,CAACvF,sBAAsB,CAACpwB,IAAI,CAACuiB,KAAK,CAAC;;IAG3E,IAAIkN,mBAAmB;IACvB,IAAIhG,WAAW,IAAI,IAAI,EAAE;MACvBgG,mBAAmB,GAAG,IAAI;KAC3B,MAAM;MACLA,mBAAmB,GAAG,KAAK;MAC3BhG,WAAW,GAAGxV,YAAY,CAAC/H,UAAU;MACrC,IAAMoW,OAAO,GAAG,IAAI,CAACiT,cAAc,CAACjT,OAAO,CAAC5jB,IAAI,CAAC;MACjD4jB,OAAO,CAACsT,YAAY,CAAC,UAACxpB,SAAS,EAAEypB,cAAc;QAC7C,IAAM9N,aAAa,GAAG8N,cAAc,CAACzF,sBAAsB,CAACpwB,IAAI,CAACuiB,KAAK,CAAC;QACvE,IAAIwF,aAAa,EAAE;UACjB0B,WAAW,GAAGA,WAAW,CAACjd,oBAAoB,CAC5CJ,SAAS,EACT2b,aAAa,CACd;;OAEJ,CAAC;;IAGJ,IAAM+N,iBAAiB,GAAGH,SAAS,CAACI,kBAAkB,CAACv3B,KAAK,CAAC;IAC7D,IAAI,CAACs3B,iBAAiB,IAAI,CAACt3B,KAAK,CAAC+a,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;;MAEhE,IAAM2G,QAAQ,GAAGb,QAAQ,CAAC8B,aAAa,CAACx3B,KAAK,CAAC;MAC9C3F,MAAM,CACJ,CAAC,IAAI,CAACo9B,aAAa,CAACnV,GAAG,CAACiU,QAAQ,CAAC,EACjC,wCAAwC,CACzC;MACD,IAAMD,GAAG,GAAGZ,QAAQ,CAACgC,gBAAgB,EAAE;MACvC,IAAI,CAACD,aAAa,CAAC98B,GAAG,CAAC47B,QAAQ,EAAED,GAAG,CAAC;MACrC,IAAI,CAACqB,aAAa,CAACh9B,GAAG,CAAC27B,GAAG,EAAEC,QAAQ,CAAC;;IAEvC,IAAMjN,WAAW,GAAG,IAAI,CAACsM,iBAAiB,CAACgC,WAAW,CAAC13B,IAAI,CAAC;IAC5D,IAAIguB,MAAM,GAAGiJ,SAAS,CAAChG,oBAAoB,CACzCnxB,KAAK,EACLka,iBAAiB,EACjBoP,WAAW,EACX2B,WAAW,EACXgG,mBAAmB,CACpB;IACD,IAAI,CAACqG,iBAAiB,IAAI,CAACR,wBAAwB,EAAE;MACnD,IAAM9F,IAAI,sBAAsBmG,SAAS,CAACrF,YAAY,CAAC9xB,KAAK,CAAC;MAC7DkuB,MAAM,GAAGA,MAAM,CAACoC,MAAM,CAAC,IAAI,CAACuH,cAAc,CAAC73B,KAAK,EAAEgxB,IAAI,CAAC,CAAC;;IAE1D,OAAO9C,MAAM;GACd;;;;;;;;;;;EAYDwH,0CAAuB,GAAvB,UACE11B,KAAY,EACZka,iBAA2C,EAC3C4V,WAAmB;IAHrB;;IAME,IAAM5vB,IAAI,GAAGF,KAAK,CAACE,IAAI;IACvB,IAAM43B,cAAc,GAAG,IAAI,CAACf,cAAc,CAACl8B,GAAG,CAACqF,IAAI,CAAC;IACpD,IAAI6vB,YAAY,GAAY,EAAE;;;;IAI9B,IACE+H,cAAc,KACb93B,KAAK,CAACqgB,eAAe,EAAE,KAAK,SAAS,IACpCyX,cAAc,CAACP,kBAAkB,CAACv3B,KAAK,CAAC,CAAC,EAC3C;;;;MAIA,IAAM+3B,gBAAgB,GAAGD,cAAc,CAACpG,uBAAuB,CAC7D1xB,KAAK,EACLka,iBAAiB,EACjB4V,WAAW,CACZ;MACD,IAAIgI,cAAc,CAAC1qB,OAAO,EAAE,EAAE;QAC5B,IAAI,CAAC2pB,cAAc,GAAG,IAAI,CAACA,cAAc,CAACn8B,MAAM,CAACsF,IAAI,CAAC;;MAExD,IAAMmxB,OAAO,GAAG0G,gBAAgB,CAAC1G,OAAO;MACxCtB,YAAY,GAAGgI,gBAAgB,CAAC7J,MAAM;;;;;;;MAOtC,IAAM8J,eAAe,GACnB,CAAC,CAAC,KACF3G,OAAO,CAACiC,SAAS,CAAC,eAAK;QACrB,OAAOtzB,KAAK,CAAC+a,cAAc,EAAE,CAAC6U,YAAY,EAAE;OAC7C,CAAC;MACJ,IAAMqI,OAAO,GAAG,IAAI,CAAClB,cAAc,CAACmB,UAAU,CAC5Ch4B,IAAI,EACJ,UAACoC,YAAY,EAAE61B,eAAe;QAC5B,OAAOA,eAAe,CAAC5G,eAAe,EAAE;OACzC,CACF;MAED,IAAIyG,eAAe,IAAI,CAACC,OAAO,EAAE;QAC/B,IAAMnU,OAAO,GAAG,IAAI,CAACiT,cAAc,CAACjT,OAAO,CAAC5jB,IAAI,CAAC;;;QAGjD,IAAI,CAAC4jB,OAAO,CAAC1W,OAAO,EAAE,EAAE;;UAEtB,IAAMgrB,QAAQ,GAAG,IAAI,CAACC,+BAA+B,CAACvU,OAAO,CAAC;;UAG9D,KAAK,IAAIpqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0+B,QAAQ,CAACz+B,MAAM,EAAE,EAAED,CAAC,EAAE;YACxC,IAAMs3B,IAAI,GAAGoH,QAAQ,CAAC1+B,CAAC,CAAC;cACtB4+B,QAAQ,GAAGtH,IAAI,CAACW,QAAQ,EAAE;YAC5B,IAAM4G,QAAQ,GAAG,IAAI,CAACC,sBAAsB,CAACxH,IAAI,CAAC;YAClD,IAAI,CAACyE,eAAe,CAACgD,cAAc,CACjC/C,QAAQ,CAACgD,kBAAkB,CAACJ,QAAQ,CAAC,EACrC,IAAI,CAACK,YAAY,CAACL,QAAQ,CAAC,EAC3BC,QAAQ,CAACK,MAAM,EACfL,QAAQ,CAAC9uB,UAAU,CACpB;;;;;;;MASP,IAAI,CAACwuB,OAAO,IAAI5G,OAAO,CAAC13B,MAAM,GAAG,CAAC,IAAI,CAACm2B,WAAW,EAAE;;;QAGlD,IAAIkI,eAAe,EAAE;;UAEnB,IAAMa,UAAU,GAAkB,IAAI;UACtC,IAAI,CAACpD,eAAe,CAACqD,aAAa,CAChCpD,QAAQ,CAACgD,kBAAkB,CAAC14B,KAAK,CAAC,EAClC64B,UAAU,CACX;SACF,MAAM;UACLxH,OAAO,CAACnO,OAAO,CAAC,UAAC6V,aAAoB;YACnC,IAAMC,WAAW,GAAG9jB,KAAI,CAACuiB,aAAa,CAAC58B,GAAG,CACxC66B,QAAQ,CAAC8B,aAAa,CAACuB,aAAa,CAAC,CACtC;YACD7jB,KAAI,CAACugB,eAAe,CAACqD,aAAa,CAChCpD,QAAQ,CAACgD,kBAAkB,CAACK,aAAa,CAAC,EAC1CC,WAAW,CACZ;WACF,CAAC;;;;MAIN,IAAI,CAACC,WAAW,CAAC5H,OAAO,CAAC;;IAI3B,OAAOtB,YAAY;GACpB;;;;;;;;;;;;EAaD2F,yCAAsB,GAAtB,UAAuBx1B,IAAU,EAAE8zB,iBAA4B;IAC7D,IAAMkF,iBAAiB,GAAG,IAAI;IAC9B,IAAMvG,SAAS,GAAG,IAAI,CAACiD,iBAAiB;IACxC,IAAM3K,WAAW,GAAG,IAAI,CAAC8L,cAAc,CAACmB,UAAU,CAChDh4B,IAAI,EACJ,UAAC2kB,SAAS,EAAEsS,SAAS;MACnB,IAAM70B,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACuiB,SAAS,EAAE3kB,IAAI,CAAC;MACvD,IAAM+qB,WAAW,GAAGkM,SAAS,CAACvF,sBAAsB,CAACtvB,YAAY,CAAC;MAClE,IAAI2oB,WAAW,EAAE;QACf,OAAOA,WAAW;;KAErB,CACF;IACD,OAAO0H,SAAS,CAAChS,sBAAsB,CACrCzgB,IAAI,EACJ+qB,WAAW,EACX+I,iBAAiB,EACjBkF,iBAAiB,CAClB;GACF;;;;;EAMOxD,kDAA+B,GAAvC,UACE5R,OAAiC;IAEjC,OAAOA,OAAO,CAACqV,IAAI,CACjB,UAAC72B,YAAY,EAAE82B,mBAAmB,EAAEC,QAAQ;MAC1C,IAAID,mBAAmB,IAAIA,mBAAmB,CAAC7H,eAAe,EAAE,EAAE;QAChE,IAAM+H,YAAY,GAAGF,mBAAmB,CAACvH,eAAe,EAAE;QAC1D,OAAO,CAACyH,YAAY,CAAC;OACtB,MAAM;;QAEL,IAAIC,OAAK,GAAW,EAAE;QACtB,IAAIH,mBAAmB,EAAE;UACvBG,OAAK,GAAGH,mBAAmB,CAACI,aAAa,EAAE;;QAE7Cx7B,IAAI,CAACq7B,QAAQ,EAAE,UAACI,IAAY,EAAEC,UAAkB;UAC9CH,OAAK,GAAGA,OAAK,CAACjJ,MAAM,CAACoJ,UAAU,CAAC;SACjC,CAAC;QACF,OAAOH,OAAK;;KAEf,CACF;GACF;EAEO7D,8BAAW,GAAnB,UAAoBiE,OAAgB;IAClC,KAAK,IAAI52B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG42B,OAAO,CAAChgC,MAAM,EAAE,EAAEoJ,CAAC,EAAE;MACvC,IAAM62B,YAAY,GAAGD,OAAO,CAAC52B,CAAC,CAAC;MAC/B,IAAI,CAAC62B,YAAY,CAAC7e,cAAc,EAAE,CAAC6U,YAAY,EAAE,EAAE;;QAEjD,IAAMiK,eAAe,GAAGnE,QAAQ,CAAC8B,aAAa,CAACoC,YAAY,CAAC;QAC5D,IAAME,eAAe,GAAG,IAAI,CAACrC,aAAa,CAAC58B,GAAG,CAACg/B,eAAe,CAAC;QAC/D,IAAI,CAACpC,aAAa,CAAC3U,MAAM,CAAC+W,eAAe,CAAC;QAC1C,IAAI,CAAClC,aAAa,CAAC7U,MAAM,CAACgX,eAAe,CAAC;;;GAG/C;;;;;;EAOcpE,2BAAkB,GAAjC,UAAkC11B,KAAY;IAC5C,IACEA,KAAK,CAAC+a,cAAc,EAAE,CAAC6U,YAAY,EAAE,IACrC,CAAC5vB,KAAK,CAAC+a,cAAc,EAAE,CAACgf,SAAS,EAAE,EACnC;;;;MAIA,OAAO/5B,KAAK,CAACia,MAAM,EAAG;KACvB,MAAM;MACL,OAAOja,KAAK;;GAEf;;;;;;EAOO01B,iCAAc,GAAtB,UAAuB11B,KAAY,EAAEgxB,IAAU;IAC7C,IAAM9wB,IAAI,GAAGF,KAAK,CAACE,IAAI;IACvB,IAAMo2B,GAAG,GAAG,IAAI,CAACqC,YAAY,CAAC34B,KAAK,CAAC;IACpC,IAAMu4B,QAAQ,GAAG,IAAI,CAACC,sBAAsB,CAACxH,IAAI,CAAC;IAElD,IAAM9C,MAAM,GAAG,IAAI,CAACuH,eAAe,CAACgD,cAAc,CAChD/C,QAAQ,CAACgD,kBAAkB,CAAC14B,KAAK,CAAC,EAClCs2B,GAAG,EACHiC,QAAQ,CAACK,MAAM,EACfL,QAAQ,CAAC9uB,UAAU,CACpB;IAED,IAAMqa,OAAO,GAAG,IAAI,CAACiT,cAAc,CAACjT,OAAO,CAAC5jB,IAAI,CAAC;;;IAGjD,IAAIo2B,GAAG,EAAE;MACPj8B,MAAM,CACJ,CAACypB,OAAO,CAAC3sB,KAAK,CAACo6B,eAAe,EAAE,EAChC,mDAAmD,CACpD;KACF,MAAM;;MAEL,IAAMyI,aAAa,GAAGlW,OAAO,CAACqV,IAAI,CAChC,UAAC72B,YAAY,EAAE82B,mBAAmB,EAAEC,QAAQ;QAC1C,IACE,CAAC/2B,YAAY,CAAC8K,OAAO,EAAE,IACvBgsB,mBAAmB,IACnBA,mBAAmB,CAAC7H,eAAe,EAAE,EACrC;UACA,OAAO,CAAC6H,mBAAmB,CAACvH,eAAe,EAAE,CAACF,QAAQ,EAAE,CAAC;SAC1D,MAAM;;UAEL,IAAIsI,SAAO,GAAY,EAAE;UACzB,IAAIb,mBAAmB,EAAE;YACvBa,SAAO,GAAGA,SAAO,CAAC3J,MAAM,CACtB8I,mBAAmB,CAACI,aAAa,EAAE,CAACxkB,GAAG,CAAC,cAAI;cAAI,WAAI,CAAC2c,QAAQ,EAAE;YAAA,EAAC,CACjE;;UAEH3zB,IAAI,CAACq7B,QAAQ,EAAE,UAACI,IAAY,EAAES,YAAqB;YACjDD,SAAO,GAAGA,SAAO,CAAC3J,MAAM,CAAC4J,YAAY,CAAC;WACvC,CAAC;UACF,OAAOD,SAAO;;OAEjB,CACF;MACD,KAAK,IAAIvgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsgC,aAAa,CAACrgC,MAAM,EAAE,EAAED,CAAC,EAAE;QAC7C,IAAMygC,WAAW,GAAGH,aAAa,CAACtgC,CAAC,CAAC;QACpC,IAAI,CAAC+7B,eAAe,CAACqD,aAAa,CAChCpD,QAAQ,CAACgD,kBAAkB,CAACyB,WAAW,CAAC,EACxC,IAAI,CAACxB,YAAY,CAACwB,WAAW,CAAC,CAC/B;;;IAGL,OAAOjM,MAAM;GACd;EAEOwH,yCAAsB,GAA9B,UACE1E,IAAU;IADZ;IAGE,IAAMhxB,KAAK,GAAGgxB,IAAI,CAACW,QAAQ,EAAE;IAC7B,IAAM2E,GAAG,GAAG,IAAI,CAACqC,YAAY,CAAC34B,KAAK,CAAC;IAEpC,OAAO;MACL44B,MAAM,EAAE;QACN,IAAMjJ,KAAK,GAAGqB,IAAI,CAACtI,cAAc,EAAE,IAAIjT,YAAY,CAAC/H,UAAU;QAC9D,OAAOiiB,KAAK,CAACnZ,IAAI,EAAE;OACpB;MACD/M,UAAU,EAAE,oBAAC2wB,MAAc;QACzB,IAAIA,MAAM,KAAK,IAAI,EAAE;UACnB,IAAI9D,GAAG,EAAE;YACP,OAAOphB,KAAI,CAACmlB,yBAAyB,CAACr6B,KAAK,CAACE,IAAI,EAAEo2B,GAAG,CAAC;WACvD,MAAM;YACL,OAAOphB,KAAI,CAAColB,mBAAmB,CAACt6B,KAAK,CAACE,IAAI,CAAC;;SAE9C,MAAM;;;UAGL,IAAMlF,KAAK,GAAG8E,kBAAkB,CAACs6B,MAAM,EAAEp6B,KAAK,CAAC;UAC/C,OAAOkV,KAAI,CAACwc,uBAAuB,CACjC1xB,KAAK,uBACiB,IAAI,EAC1BhF,KAAK,CACN;;;KAGN;GACF;;;;EAKc06B,sBAAa,GAA5B,UAA6B11B,KAAY;IACvC,OAAOA,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE,GAAG,GAAG,GAAGmI,KAAK,CAACqgB,eAAe,EAAE;GAC7D;;;;EAKcqV,uBAAc,GAA7B,UACEa,QAAgB;IAEhB,IAAMgE,UAAU,GAAGhE,QAAQ,CAACh7B,OAAO,CAAC,GAAG,CAAC;IACxClB,MAAM,CACJkgC,UAAU,KAAK,CAAC,CAAC,IAAIA,UAAU,GAAGhE,QAAQ,CAAC58B,MAAM,GAAG,CAAC,EACrD,eAAe,CAChB;IACD,OAAO;MACL2pB,OAAO,EAAEiT,QAAQ,CAACj3B,MAAM,CAACi7B,UAAU,GAAG,CAAC,CAAC;MACxCr6B,IAAI,EAAE,IAAIsB,IAAI,CAAC+0B,QAAQ,CAACj3B,MAAM,CAAC,CAAC,EAAEi7B,UAAU,CAAC;KAC9C;GACF;;;;EAKO7E,kCAAe,GAAvB,UAAwBY,GAAW;IACjC,OAAO,IAAI,CAACqB,aAAa,CAAC98B,GAAG,CAACy7B,GAAG,CAAC;GACnC;;;;EAKOZ,+BAAY,GAApB,UAAqB11B,KAAY;IAC/B,IAAMu2B,QAAQ,GAAGb,QAAQ,CAAC8B,aAAa,CAACx3B,KAAK,CAAC;IAC9C,OAAO,IAAI,CAACy3B,aAAa,CAAC58B,GAAG,CAAC07B,QAAQ,CAAC;GACxC;;;;EAUcb,yBAAgB,GAA/B;IACE,OAAOA,QAAQ,CAAC8E,aAAa,EAAE;GAChC;;;;EAKO9E,wCAAqB,GAA7B,UACEiB,SAAe,EACftN,SAAoB;IAEpB,IAAM8N,SAAS,GAAG,IAAI,CAACJ,cAAc,CAACl8B,GAAG,CAAC87B,SAAS,CAAC;IACpDt8B,MAAM,CAAC88B,SAAS,EAAE,sDAAsD,CAAC;IACzE,IAAM7N,WAAW,GAAG,IAAI,CAACsM,iBAAiB,CAACgC,WAAW,CAACjB,SAAS,CAAC;IACjE,OAAOQ,SAAS,CAAC5G,cAAc,CAC7BlH,SAAS,EACTC,WAAW,kBACM,IAAI,CACtB;GACF;;;;;;;;;;;;;;EAeOoM,8CAA2B,GAAnC,UAAoCrM,SAAoB;IACtD,OAAO,IAAI,CAACoR,qBAAqB,CAC/BpR,SAAS,EACT,IAAI,CAAC0N,cAAc,kBACF,IAAI,EACrB,IAAI,CAACnB,iBAAiB,CAACgC,WAAW,CAACp2B,IAAI,CAACuiB,KAAK,CAAC,CAC/C;GACF;;;;EAKO2R,wCAAqB,GAA7B,UACErM,SAAoB,EACpBqR,aAAuC,EACvCzP,WAAwB,EACxB3B,WAAyB;IAEzB,IAAID,SAAS,CAACnpB,IAAI,CAACkN,OAAO,EAAE,EAAE;MAC5B,OAAO,IAAI,CAACutB,gCAAgC,CAC1CtR,SAAS,EACTqR,aAAa,EACbzP,WAAW,EACX3B,WAAW,CACZ;KACF,MAAM;MACL,IAAM6N,SAAS,GAAGuD,aAAa,CAAC7/B,GAAG,CAAC2G,IAAI,CAACuiB,KAAK,CAAC;;MAG/C,IAAIkH,WAAW,IAAI,IAAI,IAAIkM,SAAS,IAAI,IAAI,EAAE;QAC5ClM,WAAW,GAAGkM,SAAS,CAACvF,sBAAsB,CAACpwB,IAAI,CAACuiB,KAAK,CAAC;;MAG5D,IAAImK,MAAM,GAAY,EAAE;MACxB,IAAMtgB,SAAS,GAAGyb,SAAS,CAACnpB,IAAI,CAACkC,QAAQ,EAAE;MAC3C,IAAMw4B,cAAc,GAAGvR,SAAS,CAACwR,iBAAiB,CAACjtB,SAAS,CAAC;MAC7D,IAAM0F,SAAS,GAAGonB,aAAa,CAACvY,QAAQ,CAACtnB,GAAG,CAAC+S,SAAS,CAAC;MACvD,IAAI0F,SAAS,IAAIsnB,cAAc,EAAE;QAC/B,IAAME,gBAAgB,GAAG7P,WAAW,GAChCA,WAAW,CAACtV,iBAAiB,CAAC/H,SAAS,CAAC,GACxC,IAAI;QACR,IAAMmtB,gBAAgB,GAAGzR,WAAW,CAAC/lB,KAAK,CAACqK,SAAS,CAAC;QACrDsgB,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAACmK,qBAAqB,CACxBG,cAAc,EACdtnB,SAAS,EACTwnB,gBAAgB,EAChBC,gBAAgB,CACjB,CACF;;MAGH,IAAI5D,SAAS,EAAE;QACbjJ,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB6G,SAAS,CAAC5G,cAAc,CAAClH,SAAS,EAAEC,WAAW,EAAE2B,WAAW,CAAC,CAC9D;;MAGH,OAAOiD,MAAM;;GAEhB;;;;EAKOwH,mDAAgC,GAAxC,UACErM,SAAoB,EACpBqR,aAAuC,EACvCzP,WAAwB,EACxB3B,WAAyB;IAJ3B;IAME,IAAM6N,SAAS,GAAGuD,aAAa,CAAC7/B,GAAG,CAAC2G,IAAI,CAACuiB,KAAK,CAAC;;IAG/C,IAAIkH,WAAW,IAAI,IAAI,IAAIkM,SAAS,IAAI,IAAI,EAAE;MAC5ClM,WAAW,GAAGkM,SAAS,CAACvF,sBAAsB,CAACpwB,IAAI,CAACuiB,KAAK,CAAC;;IAG5D,IAAImK,MAAM,GAAY,EAAE;IACxBwM,aAAa,CAACvY,QAAQ,CAAC9R,gBAAgB,CAAC,UAACzC,SAAS,EAAE0F,SAAS;MAC3D,IAAMwnB,gBAAgB,GAAG7P,WAAW,GAChCA,WAAW,CAACtV,iBAAiB,CAAC/H,SAAS,CAAC,GACxC,IAAI;MACR,IAAMmtB,gBAAgB,GAAGzR,WAAW,CAAC/lB,KAAK,CAACqK,SAAS,CAAC;MACrD,IAAMgtB,cAAc,GAAGvR,SAAS,CAACwR,iBAAiB,CAACjtB,SAAS,CAAC;MAC7D,IAAIgtB,cAAc,EAAE;QAClB1M,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpBpb,KAAI,CAACylB,gCAAgC,CACnCC,cAAc,EACdtnB,SAAS,EACTwnB,gBAAgB,EAChBC,gBAAgB,CACjB,CACF;;KAEJ,CAAC;IAEF,IAAI5D,SAAS,EAAE;MACbjJ,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB6G,SAAS,CAAC5G,cAAc,CAAClH,SAAS,EAAEC,WAAW,EAAE2B,WAAW,CAAC,CAC9D;;IAGH,OAAOiD,MAAM;GACd;;;;EA/IcwH,sBAAa,GAAG,CAAC;EAgJlC,eAAC;CA7vBD;;AChFA;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA;EAAA;IACU,cAAS,GAASjgB,YAAY,CAAC/H,UAAU;;EAEjDstB,gCAAO,GAAP,UAAQ96B,IAAU;IAChB,OAAO,IAAI,CAAC+6B,SAAS,CAACrlB,QAAQ,CAAC1V,IAAI,CAAC;GACrC;EAED86B,uCAAc,GAAd,UAAe96B,IAAU,EAAEg7B,eAAqB;IAC9C,IAAI,CAACD,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC/sB,WAAW,CAAChO,IAAI,EAAEg7B,eAAe,CAAC;GACnE;EACH,qBAAC;AAAD,CAAC;;ACpCD;;;;;;;;;;;;;;;;AAmBA;;;;;AAKA;EAAA;IACU,cAAS,GAA4B,EAAE;;EAE/CC,0CAAgB,GAAhB,UAAiBxjC,IAAY,EAAEyjC,MAAkB;IAAlB;MAAAA,UAAkB;IAAA;IAC/C,IAAI,CAACpjC,QAAQ,CAAC,IAAI,CAACqjC,SAAS,EAAE1jC,IAAI,CAAC,EAAE;MACnC,IAAI,CAAC0jC,SAAS,CAAC1jC,IAAI,CAAC,GAAG,CAAC;;IAG1B,IAAI,CAAC0jC,SAAS,CAAC1jC,IAAI,CAAC,IAAIyjC,MAAM;GAC/B;EAEDD,6BAAG,GAAH;IACE,OAAOG,QAAQ,CAAC,IAAI,CAACD,SAAS,CAAC;GAChC;EACH,sBAAC;AAAD,CAAC;;ACtCD;;;;;;;;;;;;;;;;AAoBA;EAAA;EAISE,0BAAa,GAApB,UAAqB70B,QAAkB;IACrC,IAAM80B,UAAU,GAAG90B,QAAQ,CAAC7O,QAAQ,EAAE;IAEtC,IAAI,CAAC,IAAI,CAAC4jC,YAAY,CAACD,UAAU,CAAC,EAAE;MAClC,IAAI,CAACC,YAAY,CAACD,UAAU,CAAC,GAAG,IAAIL,eAAe,EAAE;;IAGvD,OAAO,IAAI,CAACM,YAAY,CAACD,UAAU,CAAC;GACrC;EAEMD,gCAAmB,GAA1B,UACE70B,QAAkB,EAClBg1B,eAAwB;IAExB,IAAMF,UAAU,GAAG90B,QAAQ,CAAC7O,QAAQ,EAAE;IAEtC,IAAI,CAAC,IAAI,CAAC8jC,UAAU,CAACH,UAAU,CAAC,EAAE;MAChC,IAAI,CAACG,UAAU,CAACH,UAAU,CAAC,GAAGE,eAAe,EAAE;;IAGjD,OAAO,IAAI,CAACC,UAAU,CAACH,UAAU,CAAM;GACxC;EAxBcD,yBAAY,GAAqC,EAAE;EACnDA,uBAAU,GAA6B,EAAE;EAwB1D,mBAAC;CA1BD;;ACpBA;;;;;;;;;;;;;;;;AAoBA;;;;;;AAMA;EAGE,uBAAoBK,WAA4B;IAA5B,gBAAW,GAAXA,WAAW;IAFvB,UAAK,GAAmC,IAAI;;EAIpDC,2BAAG,GAAH;IACE,IAAMC,QAAQ,GAAG,IAAI,CAACF,WAAW,CAAC/gC,GAAG,EAAE;IAEvC,IAAM4mB,KAAK,gBAAQqa,QAAQ,CAAE;IAC7B,IAAI,IAAI,CAACC,KAAK,EAAE;MACd/9B,IAAI,CAAC,IAAI,CAAC+9B,KAAK,EAAE,UAACC,IAAY,EAAE7kC,KAAa;QAC3CsqB,KAAK,CAACua,IAAI,CAAC,GAAGva,KAAK,CAACua,IAAI,CAAC,GAAG7kC,KAAK;OAClC,CAAC;;IAEJ,IAAI,CAAC4kC,KAAK,GAAGD,QAAQ;IAErB,OAAOra,KAAK;GACb;EACH,oBAAC;AAAD,CAAC;;AC5CD;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA,IAAMwa,oBAAoB,GAAG,EAAE,GAAG,IAAI;AACtC,IAAMC,oBAAoB,GAAG,EAAE,GAAG,IAAI;AAEtC;AACA,IAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAE3C;;;AAGA;;;;;EAQE,uBAAYC,UAA2B,EAAUC,OAAsB;IAAtB,YAAO,GAAPA,OAAO;IANhD,mBAAc,GAA6B,EAAE;IAOnD,IAAI,CAACC,cAAc,GAAG,IAAIT,aAAa,CAACO,UAAU,CAAC;IAEnD,IAAMp7B,OAAO,GACXi7B,oBAAoB,GACpB,CAACC,oBAAoB,GAAGD,oBAAoB,IAAI3/B,IAAI,CAAC+O,MAAM,EAAE;IAC/DvK,qBAAqB,CAAC,IAAI,CAACy7B,YAAY,CAAC7hC,IAAI,CAAC,IAAI,CAAC,EAAE4B,IAAI,CAACC,KAAK,CAACyE,OAAO,CAAC,CAAC;;EAG1Ew7B,mCAAW,GAAX,UAAYR,IAAY;IACtB,IAAI,CAACS,cAAc,CAACT,IAAI,CAAC,GAAG,IAAI;GACjC;EAEOQ,oCAAY,GAApB;IAAA;IACE,IAAME,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACzhC,GAAG,EAAE;IACvC,IAAM8hC,aAAa,GAAiB,EAAE;IACtC,IAAIC,iBAAiB,GAAG,KAAK;IAE7B5+B,IAAI,CAAC0+B,KAAK,EAAE,UAACV,IAAY,EAAE7kC,KAAa;MACtC,IAAIA,KAAK,GAAG,CAAC,IAAIa,QAAQ,CAACkd,KAAI,CAACunB,cAAc,EAAET,IAAI,CAAC,EAAE;QACpDW,aAAa,CAACX,IAAI,CAAC,GAAG7kC,KAAK;QAC3BylC,iBAAiB,GAAG,IAAI;;KAE3B,CAAC;IAEF,IAAIA,iBAAiB,EAAE;MACrB,IAAI,CAACP,OAAO,CAACQ,WAAW,CAACF,aAAa,CAAC;;;IAIzC77B,qBAAqB,CACnB,IAAI,CAACy7B,YAAY,CAAC7hC,IAAI,CAAC,IAAI,CAAC,EAC5B4B,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC+O,MAAM,EAAE,GAAG,CAAC,GAAG8wB,qBAAqB,CAAC,CACtD;GACF;EACH,oBAAC;AAAD,CAAC;;AC9ED;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;AAcA;EAAA;;;;;IAKU,gBAAW,GAAgB,EAAE;;;;;;IAO7B,oBAAe,GAAG,CAAC;;;;;EAK3BW,gCAAW,GAAX,UAAYC,aAAsB;;IAEhC,IAAIC,QAAQ,GAAG,IAAI;IACnB,KAAK,IAAItjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqjC,aAAa,CAACpjC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAMwhB,SAAS,GAAG6hB,aAAa,CAACrjC,CAAC,CAAC;MAClC,IAAMujC,SAAS,GAAG/hB,SAAS,CAACV,OAAO,EAAE;MACrC,IAAIwiB,QAAQ,KAAK,IAAI,IAAI,CAACC,SAAS,CAACjuB,MAAM,CAACguB,QAAQ,CAACxiB,OAAO,EAAE,CAAC,EAAE;QAC9D,IAAI,CAAC0iB,WAAW,CAAC1/B,IAAI,CAACw/B,QAAQ,CAAC;QAC/BA,QAAQ,GAAG,IAAI;;MAGjB,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACrBA,QAAQ,GAAG,IAAIG,SAAS,CAACF,SAAS,CAAC;;MAGrCD,QAAQ,CAACI,GAAG,CAACliB,SAAS,CAAC;;IAEzB,IAAI8hB,QAAQ,EAAE;MACZ,IAAI,CAACE,WAAW,CAAC1/B,IAAI,CAACw/B,QAAQ,CAAC;;GAElC;;;;;;;;;;EAWDF,sCAAiB,GAAjB,UAAkB58B,IAAU,EAAE68B,aAAsB;IAClD,IAAI,CAACM,WAAW,CAACN,aAAa,CAAC;IAC/B,IAAI,CAACO,mCAAmC,CAAC,UAACL,SAAe;MACvD,gBAAS,CAACjuB,MAAM,CAAC9O,IAAI,CAAC;KAAA,CACvB;GACF;;;;;;;;;;EAWD48B,8CAAyB,GAAzB,UAA0BS,WAAiB,EAAER,aAAsB;IACjE,IAAI,CAACM,WAAW,CAACN,aAAa,CAAC;IAE/B,IAAI,CAACO,mCAAmC,CAAC,UAACL,SAAe;MACvD,OAAOA,SAAS,CAACjlC,QAAQ,CAACulC,WAAW,CAAC,IAAIA,WAAW,CAACvlC,QAAQ,CAACilC,SAAS,CAAC;KAC1E,CAAC;GACH;;;;;EAMOH,wDAAmC,GAA3C,UACE1Y,SAAkC;IAElC,IAAI,CAACoZ,eAAe,EAAE;IAEtB,IAAIC,OAAO,GAAG,IAAI;IAClB,KAAK,IAAI/jC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACwjC,WAAW,CAACvjC,MAAM,EAAED,CAAC,EAAE,EAAE;MAChD,IAAMgkC,SAAS,GAAG,IAAI,CAACR,WAAW,CAACxjC,CAAC,CAAC;MACrC,IAAIgkC,SAAS,EAAE;QACb,IAAMT,SAAS,GAAGS,SAAS,CAACljB,OAAO,EAAE;QACrC,IAAI4J,SAAS,CAAC6Y,SAAS,CAAC,EAAE;UACxB,IAAI,CAACC,WAAW,CAACxjC,CAAC,CAAC,CAACikC,KAAK,EAAE;UAC3B,IAAI,CAACT,WAAW,CAACxjC,CAAC,CAAC,GAAG,IAAI;SAC3B,MAAM;UACL+jC,OAAO,GAAG,KAAK;;;;IAKrB,IAAIA,OAAO,EAAE;MACX,IAAI,CAACP,WAAW,GAAG,EAAE;;IAGvB,IAAI,CAACM,eAAe,EAAE;GACvB;EACH,iBAAC;AAAD,CAAC;AAED;;;;AAIA;EAOE,mBAA6Br1B,KAAW;IAAX,UAAK,GAALA,KAAK;;;;;IAF1B,YAAO,GAAY,EAAE;;;;;EAO7Bg1B,uBAAG,GAAH,UAAIjiB,SAAgB;IAClB,IAAI,CAAC0iB,OAAO,CAACpgC,IAAI,CAAC0d,SAAS,CAAC;GAC7B;;;;EAKDiiB,yBAAK,GAAL;IACE,KAAK,IAAIzjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACkkC,OAAO,CAACjkC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAMwhB,SAAS,GAAG,IAAI,CAAC0iB,OAAO,CAAClkC,CAAC,CAAC;MACjC,IAAIwhB,SAAS,KAAK,IAAI,EAAE;QACtB,IAAI,CAAC0iB,OAAO,CAAClkC,CAAC,CAAC,GAAG,IAAI;QACtB,IAAMmkC,OAAO,GAAG3iB,SAAS,CAACX,cAAc,EAAE;QAC1C,IAAIvgB,MAAM,EAAE;UACVS,GAAG,CAAC,SAAS,GAAGygB,SAAS,CAACrjB,QAAQ,EAAE,CAAC;;QAEvC4I,cAAc,CAACo9B,OAAO,CAAC;;;GAG5B;;;;EAKDV,2BAAO,GAAP;IACE,OAAO,IAAI,CAACh1B,KAAK;GAClB;EACH,gBAAC;AAAD,CAAC;;ACrLD;;;;;;;;;;;;;;;;AAmBA;;;;AAIA;;;;EAWE,sBAAoB21B,cAAwB;IAAxB,mBAAc,GAAdA,cAAc;IAV1B,eAAU,GAKd,EAAE;IAMJzjC,MAAM,CACJR,KAAK,CAACC,OAAO,CAACgkC,cAAc,CAAC,IAAIA,cAAc,CAACnkC,MAAM,GAAG,CAAC,EAC1D,4BAA4B,CAC7B;;;;;;;EAiBOokC,8BAAO,GAAjB,UAAkBh1B,SAAiB;IAAE;SAAA,UAAqB,EAArBxP,qBAAqB,EAArBA,IAAqB;MAArBC;;IACnC,IAAIK,KAAK,CAACC,OAAO,CAAC,IAAI,CAACkkC,UAAU,CAACj1B,SAAS,CAAC,CAAC,EAAE;;MAE7C,IAAMk1B,SAAS,YAAO,IAAI,CAACD,UAAU,CAACj1B,SAAS,CAAC,CAAC;MAEjD,KAAK,IAAIrP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGukC,SAAS,CAACtkC,MAAM,EAAED,CAAC,EAAE,EAAE;QACzCukC,SAAS,CAACvkC,CAAC,CAAC,CAAC+jB,QAAQ,CAAC1jB,KAAK,CAACkkC,SAAS,CAACvkC,CAAC,CAAC,CAACikB,OAAO,EAAEnkB,OAAO,CAAC;;;GAG/D;EAEDukC,yBAAE,GAAF,UAAGh1B,SAAiB,EAAE0U,QAA8B,EAAEE,OAAgB;IACpE,IAAI,CAACugB,kBAAkB,CAACn1B,SAAS,CAAC;IAClC,IAAI,CAACi1B,UAAU,CAACj1B,SAAS,CAAC,GAAG,IAAI,CAACi1B,UAAU,CAACj1B,SAAS,CAAC,IAAI,EAAE;IAC7D,IAAI,CAACi1B,UAAU,CAACj1B,SAAS,CAAC,CAACvL,IAAI,CAAC;MAAEigB,QAAQ;MAAEE,OAAO;IAAA,CAAE,CAAC;IAEtD,IAAMzC,SAAS,GAAG,IAAI,CAACijB,eAAe,CAACp1B,SAAS,CAAC;IACjD,IAAImS,SAAS,EAAE;MACbuC,QAAQ,CAAC1jB,KAAK,CAAC4jB,OAAO,EAAEzC,SAAS,CAAC;;GAErC;EAED6iB,0BAAG,GAAH,UAAIh1B,SAAiB,EAAE0U,QAA8B,EAAEE,OAAgB;IACrE,IAAI,CAACugB,kBAAkB,CAACn1B,SAAS,CAAC;IAClC,IAAMk1B,SAAS,GAAG,IAAI,CAACD,UAAU,CAACj1B,SAAS,CAAC,IAAI,EAAE;IAClD,KAAK,IAAIrP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGukC,SAAS,CAACtkC,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IACEukC,SAAS,CAACvkC,CAAC,CAAC,CAAC+jB,QAAQ,KAAKA,QAAQ,KACjC,CAACE,OAAO,IAAIA,OAAO,KAAKsgB,SAAS,CAACvkC,CAAC,CAAC,CAACikB,OAAO,CAAC,EAC9C;QACAsgB,SAAS,CAACzK,MAAM,CAAC95B,CAAC,EAAE,CAAC,CAAC;QACtB;;;GAGL;EAEOqkC,yCAAkB,GAA1B,UAA2Bh1B,SAAiB;IAC1C1O,MAAM,CACJ,IAAI,CAACyjC,cAAc,CAACvb,IAAI,CAAC,YAAE;MACzB,OAAO6b,EAAE,KAAKr1B,SAAS;KACxB,CAAC,EACF,iBAAiB,GAAGA,SAAS,CAC9B;GACF;EACH,mBAAC;AAAD,CAAC;;ACnGD;;;;;;;;;;;;;;;;AAsBA;;;AAGA;EAAuCyD;EAOrC;IAAA,YACEsL,kBAAM,CAAC,SAAS,CAAC,CAAC;IAClB,IAAIumB,MAAc;IAClB,IAAIC,gBAAwB;IAC5B,IACE,OAAOtiC,QAAQ,KAAK,WAAW,IAC/B,OAAOA,QAAQ,CAACQ,gBAAgB,KAAK,WAAW,EAChD;MACA,IAAI,OAAOR,QAAQ,CAAC,QAAQ,CAAC,KAAK,WAAW,EAAE;;QAE7CsiC,gBAAgB,GAAG,kBAAkB;QACrCD,MAAM,GAAG,QAAQ;OAClB,MAAM,IAAI,OAAOriC,QAAQ,CAAC,WAAW,CAAC,KAAK,WAAW,EAAE;QACvDsiC,gBAAgB,GAAG,qBAAqB;QACxCD,MAAM,GAAG,WAAW;OACrB,MAAM,IAAI,OAAOriC,QAAQ,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;QACtDsiC,gBAAgB,GAAG,oBAAoB;QACvCD,MAAM,GAAG,UAAU;OACpB,MAAM,IAAI,OAAOriC,QAAQ,CAAC,cAAc,CAAC,KAAK,WAAW,EAAE;QAC1DsiC,gBAAgB,GAAG,wBAAwB;QAC3CD,MAAM,GAAG,cAAc;;;;;;;IAQ3BnpB,KAAI,CAACqpB,QAAQ,GAAG,IAAI;IAEpB,IAAID,gBAAgB,EAAE;MACpBtiC,QAAQ,CAACQ,gBAAgB,CACvB8hC,gBAAgB,EAChB;QACE,IAAMtL,OAAO,GAAG,CAACh3B,QAAQ,CAACqiC,MAAM,CAAC;QACjC,IAAIrL,OAAO,KAAK9d,KAAI,CAACqpB,QAAQ,EAAE;UAC7BrpB,KAAI,CAACqpB,QAAQ,GAAGvL,OAAO;UACvB9d,KAAI,CAACspB,OAAO,CAAC,SAAS,EAAExL,OAAO,CAAC;;OAEnC,EACD,KAAK,CACN;;;;EA7CEyL,6BAAW,GAAlB;IACE,OAAO,IAAIA,iBAAiB,EAAE;GAC/B;;;;;EAmDDA,2CAAe,GAAf,UAAgB11B,SAAiB;IAC/B1O,MAAM,CAAC0O,SAAS,KAAK,SAAS,EAAE,sBAAsB,GAAGA,SAAS,CAAC;IACnE,OAAO,CAAC,IAAI,CAACw1B,QAAQ,CAAC;GACvB;EACH,wBAAC;AAAD,CA5DA,CAAuCR,YAAY;;ACzBnD;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;AASA;EAAmCvxB;EAOjC;IAAA,YACEsL,kBAAM,CAAC,QAAQ,CAAC,CAAC;IAPX5C,aAAO,GAAG,IAAI;;;;;IAapB,IACE,OAAO/c,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACqE,gBAAgB,KAAK,WAAW,IAC9C,CAACkiC,eAAe,EAAE,EAClB;MACAvmC,MAAM,CAACqE,gBAAgB,CACrB,QAAQ,EACR;QACE,IAAI,CAAC0Y,KAAI,CAACypB,OAAO,EAAE;UACjBzpB,KAAI,CAACypB,OAAO,GAAG,IAAI;UACnBzpB,KAAI,CAACspB,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;;OAE/B,EACD,KAAK,CACN;MAEDrmC,MAAM,CAACqE,gBAAgB,CACrB,SAAS,EACT;QACE,IAAI0Y,KAAI,CAACypB,OAAO,EAAE;UAChBzpB,KAAI,CAACypB,OAAO,GAAG,KAAK;UACpBzpB,KAAI,CAACspB,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC;;OAEhC,EACD,KAAK,CACN;;;;EApCEI,yBAAW,GAAlB;IACE,OAAO,IAAIA,aAAa,EAAE;GAC3B;;;;;EA0CDA,uCAAe,GAAf,UAAgB71B,SAAiB;IAC/B1O,MAAM,CAAC0O,SAAS,KAAK,QAAQ,EAAE,sBAAsB,GAAGA,SAAS,CAAC;IAClE,OAAO,CAAC,IAAI,CAAC41B,OAAO,CAAC;GACtB;;;;EAKDC,uCAAe,GAAf;IACE,OAAO,IAAI,CAACD,OAAO;GACpB;EACH,oBAAC;AAAD,CA1DA,CAAmCZ,YAAY;;AC7B/C;;;;;;;;;;;;;;;;AAmBA;;;;;AAKA;;;;EASE,wBAAoBc,UAA2B;IAA3B,eAAU,GAAVA,UAAU;IAR9B,qBAAgB,GAAc,EAAE;IAChC,uBAAkB,GAAG,CAAC;IACtB,uBAAkB,GAAG,CAAC,CAAC;IACvB,YAAO,GAAwB,IAAI;;EAOnCC,mCAAU,GAAV,UAAWC,WAAmB,EAAEthB,QAAoB;IAClD,IAAI,CAACuhB,kBAAkB,GAAGD,WAAW;IACrC,IAAI,CAACE,OAAO,GAAGxhB,QAAQ;IACvB,IAAI,IAAI,CAACuhB,kBAAkB,GAAG,IAAI,CAACE,kBAAkB,EAAE;MACrD,IAAI,CAACD,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,GAAG,IAAI;;GAEtB;;;;;;;;EASDH,uCAAc,GAAd,UAAeK,UAAkB,EAAE1jC,IAAe;IAAlD;IACE,IAAI,CAAC2jC,gBAAgB,CAACD,UAAU,CAAC,GAAG1jC,IAAI;;MAEtC,IAAM4jC,SAAS,GAAGC,OAAKF,gBAAgB,CACrCE,OAAKJ,kBAAkB,CACX;MACd,OAAOI,OAAKF,gBAAgB,CAACE,OAAKJ,kBAAkB,CAAC;qCAC5CxlC,CAAC;QACR,IAAI2lC,SAAS,CAAC3lC,CAAC,CAAC,EAAE;UAChB+G,cAAc,CAAC;YACbyU,KAAI,CAAC2pB,UAAU,CAACQ,SAAS,CAAC3lC,CAAC,CAAC,CAAC;WAC9B,CAAC;;;MAJN,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2lC,SAAS,CAAC1lC,MAAM,EAAE,EAAED,CAAC;gBAAhCA,CAAC;;MAOV,IAAI4lC,OAAKJ,kBAAkB,KAAKI,OAAKN,kBAAkB,EAAE;QACvD,IAAIM,OAAKL,OAAO,EAAE;UAChBK,OAAKL,OAAO,EAAE;UACdK,OAAKL,OAAO,GAAG,IAAI;;;;MAIvBK,OAAKJ,kBAAkB,EAAE;;;IAnB3B,OAAO,IAAI,CAACE,gBAAgB,CAAC,IAAI,CAACF,kBAAkB,CAAC;;;;GAqBtD;EACH,qBAAC;AAAD,CAAC;;AC3ED;;;;;;;;;;;;;;;;AA6CA;AACO,IAAMK,6BAA6B,GAAG,OAAO;AAC7C,IAAMC,+BAA+B,GAAG,OAAO;AAC/C,IAAMC,iCAAiC,GAAG,YAAY;AACtD,IAAMC,8BAA8B,GAAG,SAAS;AAChD,IAAMC,0BAA0B,GAAG,IAAI;AACvC,IAAMC,0BAA0B,GAAG,IAAI;AACvC,IAAMC,8BAA8B,GAAG,KAAK;AAC5C,IAAMC,mCAAmC,GAAG,IAAI;AAChD,IAAMC,mCAAmC,GAAG,KAAK;AACjD,IAAMC,oCAAoC,GAAG,IAAI;AACjD,IAAMC,4BAA4B,GAAG,GAAG;AAExC,IAAMC,6CAA6C,GAAG,QAAQ;AAErE;AACA;AACA;AACA,IAAMC,iBAAiB,GAAG,IAAI;AAC9B,IAAMC,eAAe,GAAG,EAAE,CAAC;AAC3B,IAAMC,gBAAgB,GAAGF,iBAAiB,GAAGC,eAAe;AAE5D;;;;;;;AAOA,IAAME,0BAA0B,GAAG,KAAK;AAExC;;;;;AAKA,IAAMC,kBAAkB,GAAG,KAAK;AAEhC;;;;;;AAMA;;;;;;;;;;EA0BE,+BACSC,MAAc,EACd95B,QAAkB,EACjB+5B,aAAsB,EACvBC,kBAA2B,EAC3BC,aAAsB;IAJtB,WAAM,GAANH,MAAM;IACN,aAAQ,GAAR95B,QAAQ;IACP,kBAAa,GAAb+5B,aAAa;IACd,uBAAkB,GAAlBC,kBAAkB;IAClB,kBAAa,GAAbC,aAAa;IA9BtB,cAAS,GAAG,CAAC;IACb,kBAAa,GAAG,CAAC;IAUT,mBAAc,GAAG,KAAK;IAqB5B,IAAI,CAACC,IAAI,GAAG9lC,UAAU,CAAC0lC,MAAM,CAAC;IAC9B,IAAI,CAACK,MAAM,GAAGtF,YAAY,CAACuF,aAAa,CAACp6B,QAAQ,CAAC;IAClD,IAAI,CAACq6B,KAAK,GAAG,UAAC17B,MAA+B;MAC3C,eAAQ,CAAC27B,aAAa,CAAC18B,YAAY,EAAEe,MAAM,CAAC;KAAA;;;;;;;EAQhD47B,oCAAI,GAAJ,UAAKC,SAA4B,EAAEC,YAAmC;IAAtE;IACE,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,aAAa,GAAGF,YAAY;IACjC,IAAI,CAACG,eAAe,GAAG,IAAIxC,cAAc,CAACoC,SAAS,CAAC;IACpD,IAAI,CAACK,SAAS,GAAG,KAAK;IAEtB,IAAI,CAACC,oBAAoB,GAAGnlC,UAAU,CAAC;MACrC6Y,KAAI,CAAC0rB,IAAI,CAAC,8BAA8B,CAAC;;MAEzC1rB,KAAI,CAACusB,SAAS,EAAE;MAChBvsB,KAAI,CAACssB,oBAAoB,GAAG,IAAI;;KAEjC,EAAEllC,IAAI,CAACC,KAAK,CAACgkC,kBAAkB,CAAC,CAAQ;;IAGzC1kC,mBAAmB,CAAC;MAClB,IAAIqZ,KAAI,CAACqsB,SAAS,EAAE;QAClB;;;MAIFrsB,KAAI,CAACwsB,eAAe,GAAG,IAAIC,0BAA0B,CACnD;QAAC;aAAA,UAAO,EAAPpoC,qBAAO,EAAPA,IAAO;UAAPqoC;;QACO,gBAAoCA,IAAI;UAAvCC,OAAO;UAAEC,IAAI;UAAEC,IAAI;UAAEC,IAAI;UAAEC,IAAI,QAAQ;QAC9C/sB,KAAI,CAACgtB,uBAAuB,CAACN,IAAI,CAAC;QAClC,IAAI,CAAC1sB,KAAI,CAACwsB,eAAe,EAAE;UACzB,OAAO;;;QAGT,IAAIxsB,KAAI,CAACssB,oBAAoB,EAAE;UAC7BW,YAAY,CAACjtB,KAAI,CAACssB,oBAAoB,CAAC;UACvCtsB,KAAI,CAACssB,oBAAoB,GAAG,IAAI;;QAElCtsB,KAAI,CAACktB,cAAc,GAAG,IAAI;QAC1B,IAAIP,OAAO,KAAKtC,6BAA6B,EAAE;UAC7CrqB,KAAI,CAACvc,EAAE,GAAGmpC,IAAc;UACxB5sB,KAAI,CAACmtB,QAAQ,GAAGN,IAAc;SAC/B,MAAM,IAAIF,OAAO,KAAKrC,+BAA+B,EAAE;;UAEtD,IAAIsC,IAAI,EAAE;;;YAGR5sB,KAAI,CAACwsB,eAAe,CAACY,YAAY,GAAG,KAAK;;;YAIzCptB,KAAI,CAACosB,eAAe,CAACiB,UAAU,CAACT,IAAc,EAAE;cAC9C5sB,KAAI,CAACusB,SAAS,EAAE;aACjB,CAAC;WACH,MAAM;YACLvsB,KAAI,CAACusB,SAAS,EAAE;;SAEnB,MAAM;UACL,MAAM,IAAIvmC,KAAK,CAAC,iCAAiC,GAAG2mC,OAAO,CAAC;;OAE/D,EACD;QAAC;aAAA,UAAO,EAAPtoC,qBAAO,EAAPA,IAAO;UAAPqoC;;QACO,gBAAaA,IAAI;UAAhBY,EAAE;UAAE/mC,IAAI,QAAQ;QACvByZ,KAAI,CAACgtB,uBAAuB,CAACN,IAAI,CAAC;QAClC1sB,KAAI,CAACosB,eAAe,CAACmB,cAAc,CAACD,EAAY,EAAE/mC,IAAiB,CAAC;OACrE,EACD;QACEyZ,KAAI,CAACusB,SAAS,EAAE;OACjB,EACDvsB,KAAI,CAAC6rB,KAAK,CACX;;;MAID,IAAM2B,SAAS,GAAqC,EAAE;MACtDA,SAAS,CAACnD,6BAA6B,CAAC,GAAG,GAAG;MAC9CmD,SAAS,CAAC7C,8BAA8B,CAAC,GAAGvjC,IAAI,CAACC,KAAK,CACpDD,IAAI,CAAC+O,MAAM,EAAE,GAAG,SAAS,CAC1B;MACD,IAAI6J,KAAI,CAACwsB,eAAe,CAACiB,wBAAwB,EAAE;QACjDD,SAAS,CACP5C,mCAAmC,CACpC,GAAG5qB,KAAI,CAACwsB,eAAe,CAACiB,wBAAwB;;MAEnDD,SAAS,CAAC5+B,aAAa,CAAC,GAAGD,gBAAgB;MAC3C,IAAIqR,KAAI,CAACwrB,kBAAkB,EAAE;QAC3BgC,SAAS,CAAC3+B,uBAAuB,CAAC,GAAGmR,KAAI,CAACwrB,kBAAkB;;MAE9D,IAAIxrB,KAAI,CAACyrB,aAAa,EAAE;QACtB+B,SAAS,CAACv+B,kBAAkB,CAAC,GAAG+Q,KAAI,CAACyrB,aAAa;;MAEpD,IAAIzrB,KAAI,CAACurB,aAAa,EAAE;QACtBiC,SAAS,CAACt+B,oBAAoB,CAAC,GAAG8Q,KAAI,CAACurB,aAAa;;MAEtD,IACE,OAAOplC,QAAQ,KAAK,WAAW,IAC/BA,QAAQ,CAACunC,QAAQ,IACjB1+B,eAAe,CAACzE,IAAI,CAACpE,QAAQ,CAACunC,QAAQ,CAAC,EACvC;QACAF,SAAS,CAAC1+B,aAAa,CAAC,GAAGC,SAAS;;MAEtC,IAAM4+B,UAAU,GAAG3tB,KAAI,CAAC6rB,KAAK,CAAC2B,SAAS,CAAC;MACxCxtB,KAAI,CAAC0rB,IAAI,CAAC,8BAA8B,GAAGiC,UAAU,CAAC;MACtD3tB,KAAI,CAACwsB,eAAe,CAACoB,MAAM,CAACD,UAAU,EAAE;;OAEvC,CAAC;KACH,CAAC;GACH;;;;EAKD5B,qCAAK,GAAL;IACE,IAAI,CAACS,eAAe,CAACqB,aAAa,CAAC,IAAI,CAACpqC,EAAE,EAAE,IAAI,CAAC0pC,QAAQ,CAAC;IAC1D,IAAI,CAACW,sBAAsB,CAAC,IAAI,CAACrqC,EAAE,EAAE,IAAI,CAAC0pC,QAAQ,CAAC;GACpD;;;;EAOMpB,gCAAU,GAAjB;IACEA,qBAAqB,CAACgC,WAAW,GAAG,IAAI;GACzC;;;;EAOMhC,mCAAa,GAApB;IACEA,qBAAqB,CAACiC,cAAc,GAAG,IAAI;GAC5C;;EAGMjC,iCAAW,GAAlB;IACE,IAAIllC,SAAS,EAAE,EAAE;MACf,OAAO,KAAK;KACb,MAAM,IAAIklC,qBAAqB,CAACgC,WAAW,EAAE;MAC5C,OAAO,IAAI;KACZ,MAAM;;;MAGL,OACE,CAAChC,qBAAqB,CAACiC,cAAc,IACrC,OAAOlnC,QAAQ,KAAK,WAAW,IAC/BA,QAAQ,CAACmnC,aAAa,IAAI,IAAI,IAC9B,CAAC3jC,8BAA8B,EAAE,IACjC,CAACG,iBAAiB,EAAE;;GAGzB;;;;EAKDshC,qDAAqB,GAArB,cAA0B;;;;;EAMlBA,yCAAS,GAAjB;IACE,IAAI,CAACM,SAAS,GAAG,IAAI;IAErB,IAAI,IAAI,CAACG,eAAe,EAAE;MACxB,IAAI,CAACA,eAAe,CAAC0B,KAAK,EAAE;MAC5B,IAAI,CAAC1B,eAAe,GAAG,IAAI;;;IAI7B,IAAI,IAAI,CAAC2B,cAAc,EAAE;MACvBrnC,QAAQ,CAACI,IAAI,CAACknC,WAAW,CAAC,IAAI,CAACD,cAAc,CAAC;MAC9C,IAAI,CAACA,cAAc,GAAG,IAAI;;IAG5B,IAAI,IAAI,CAAC7B,oBAAoB,EAAE;MAC7BW,YAAY,CAAC,IAAI,CAACX,oBAAoB,CAAC;MACvC,IAAI,CAACA,oBAAoB,GAAG,IAAI;;GAEnC;;;;;EAMOP,yCAAS,GAAjB;IACE,IAAI,CAAC,IAAI,CAACM,SAAS,EAAE;MACnB,IAAI,CAACX,IAAI,CAAC,4BAA4B,CAAC;MACvC,IAAI,CAAC2C,SAAS,EAAE;MAEhB,IAAI,IAAI,CAAClC,aAAa,EAAE;QACtB,IAAI,CAACA,aAAa,CAAC,IAAI,CAACe,cAAc,CAAC;QACvC,IAAI,CAACf,aAAa,GAAG,IAAI;;;GAG9B;;;;;EAMDJ,qCAAK,GAAL;IACE,IAAI,CAAC,IAAI,CAACM,SAAS,EAAE;MACnB,IAAI,CAACX,IAAI,CAAC,2BAA2B,CAAC;MACtC,IAAI,CAAC2C,SAAS,EAAE;;GAEnB;;;;;;EAODtC,oCAAI,GAAJ,UAAKxlC,IAAQ;IACX,IAAM+nC,OAAO,GAAGjsC,SAAS,CAACkE,IAAI,CAAC;IAC/B,IAAI,CAACgoC,SAAS,IAAID,OAAO,CAAC7pC,MAAM;IAChC,IAAI,CAACknC,MAAM,CAAC6C,gBAAgB,CAAC,YAAY,EAAEF,OAAO,CAAC7pC,MAAM,CAAC;;IAG1D,IAAMgqC,UAAU,GAAGC,YAAY,CAACJ,OAAO,CAAC;;;IAIxC,IAAM3lC,QAAQ,GAAGH,iBAAiB,CAACimC,UAAU,EAAEtD,gBAAgB,CAAC;;;IAIhE,KAAK,IAAI3mC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmE,QAAQ,CAAClE,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAI,CAACgoC,eAAe,CAACmC,cAAc,CACjC,IAAI,CAACzC,aAAa,EAClBvjC,QAAQ,CAAClE,MAAM,EACfkE,QAAQ,CAACnE,CAAC,CAAC,CACZ;MACD,IAAI,CAAC0nC,aAAa,EAAE;;GAEvB;;;;;;;;EASDH,sDAAsB,GAAtB,UAAuBtoC,EAAU,EAAEmrC,EAAU;IAC3C,IAAI/nC,SAAS,EAAE,EAAE;MACf;;IAEF,IAAI,CAACsnC,cAAc,GAAGrnC,QAAQ,CAACmnC,aAAa,CAAC,QAAQ,CAAC;IACtD,IAAMT,SAAS,GAA4B,EAAE;IAC7CA,SAAS,CAACxC,6CAA6C,CAAC,GAAG,GAAG;IAC9DwC,SAAS,CAAC/C,0BAA0B,CAAC,GAAGhnC,EAAE;IAC1C+pC,SAAS,CAAC9C,0BAA0B,CAAC,GAAGkE,EAAE;IAC1C,IAAI,CAACT,cAAc,CAACU,GAAG,GAAG,IAAI,CAAChD,KAAK,CAAC2B,SAAS,CAAC;IAC/C,IAAI,CAACW,cAAc,CAACW,KAAK,CAACC,OAAO,GAAG,MAAM;IAE1CjoC,QAAQ,CAACI,IAAI,CAAC8nC,WAAW,CAAC,IAAI,CAACb,cAAc,CAAC;GAC/C;;;;;;EAOOpC,uDAAuB,GAA/B,UAAgCW,IAAa;;IAE3C,IAAMuC,aAAa,GAAG5sC,SAAS,CAACqqC,IAAI,CAAC,CAACjoC,MAAM;IAC5C,IAAI,CAACwqC,aAAa,IAAIA,aAAa;IACnC,IAAI,CAACtD,MAAM,CAAC6C,gBAAgB,CAAC,gBAAgB,EAAES,aAAa,CAAC;GAC9D;EACH,4BAAC;AAAD,CAAC;AAOD;;;;AAIA;;;;;;;EAiCE,oCACEC,SAAwD,EACxDC,WAAyC,EAClClD,YAAwB,EACxBJ,KAA4B;IAD5B,iBAAY,GAAZI,YAAY;IACZ,UAAK,GAALJ,KAAK;;;IAlCd,wBAAmB,GAAG,IAAIuD,GAAG,EAAU;;IAGvC,gBAAW,GAAmD,EAAE;;;;;;IAOhE,kBAAa,GAAGhoC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC+O,MAAM,EAAE,GAAG,SAAS,CAAC;;;IAIrD,iBAAY,GAAG,IAAI;IAsBjB,IAAI,CAACtP,SAAS,EAAE,EAAE;;;;;MAKhB,IAAI,CAAC4mC,wBAAwB,GAAGjqC,aAAa,EAAE;MAC/CP,MAAM,CACJsnC,iCAAiC,GAAG,IAAI,CAACkD,wBAAwB,CAClE,GAAGyB,SAAS;MACbjsC,MAAM,CACJunC,8BAA8B,GAAG,IAAI,CAACiD,wBAAwB,CAC/D,GAAG0B,WAAW;;MAGf,IAAI,CAACE,QAAQ,GAAG5C,0BAA0B,CAAC6C,aAAa,EAAE;;MAG1D,IAAIC,MAAM,GAAG,EAAE;;;MAGf,IACE,IAAI,CAACF,QAAQ,CAACR,GAAG,IACjB,IAAI,CAACQ,QAAQ,CAACR,GAAG,CAACzkC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC3F,MAAM,CAAC,KAAK,aAAa,EACnE;QACA,IAAM+qC,aAAa,GAAG1oC,QAAQ,CAAC8I,MAAM;QACrC2/B,MAAM,GAAG,2BAA2B,GAAGC,aAAa,GAAG,aAAa;;MAEtE,IAAMC,cAAc,GAAG,cAAc,GAAGF,MAAM,GAAG,gBAAgB;MACjE,IAAI;QACF,IAAI,CAACF,QAAQ,CAACK,GAAG,CAACC,IAAI,EAAE;QACxB,IAAI,CAACN,QAAQ,CAACK,GAAG,CAACtQ,KAAK,CAACqQ,cAAc,CAAC;QACvC,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACxB,KAAK,EAAE;OAC1B,CAAC,OAAO/qC,CAAC,EAAE;QACVoC,GAAG,CAAC,yBAAyB,CAAC;QAC9B,IAAIpC,CAAC,CAACqI,KAAK,EAAE;UACXjG,GAAG,CAACpC,CAAC,CAACqI,KAAK,CAAC;;QAEdjG,GAAG,CAACpC,CAAC,CAAC;;KAET,MAAM;MACL,IAAI,CAAC+rC,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACC,WAAW,GAAGA,WAAW;;;;;;;;;EAUnB1C,wCAAa,GAA5B;IACE,IAAMmD,MAAM,GAAG9oC,QAAQ,CAACmnC,aAAa,CAAC,QAAQ,CAAkB;IAChE2B,MAAM,CAACd,KAAK,CAACC,OAAO,GAAG,MAAM;;IAG7B,IAAIjoC,QAAQ,CAACI,IAAI,EAAE;MACjBJ,QAAQ,CAACI,IAAI,CAAC8nC,WAAW,CAACY,MAAM,CAAC;MACjC,IAAI;;;;QAIF,IAAMjoC,CAAC,GAAGioC,MAAM,CAACC,aAAa,CAAC/oC,QAAQ;QACvC,IAAI,CAACa,CAAC,EAAE;;UAENpC,GAAG,CAAC,+BAA+B,CAAC;;OAEvC,CAAC,OAAOpC,CAAC,EAAE;QACV,IAAMyM,MAAM,GAAG9I,QAAQ,CAAC8I,MAAM;QAC9BggC,MAAM,CAACf,GAAG,GACR,+DAA+D,GAC/Dj/B,MAAM,GACN,0BAA0B;;KAE/B,MAAM;;;MAGL,MAAM,mGAAmG;;;IAI3G,IAAIggC,MAAM,CAACE,eAAe,EAAE;MAC1BF,MAAM,CAACF,GAAG,GAAGE,MAAM,CAACE,eAAe,CAAC;KACrC,MAAM,IAAIF,MAAM,CAACC,aAAa,EAAE;MAC/BD,MAAM,CAACF,GAAG,GAAGE,MAAM,CAACC,aAAa,CAAC/oC,QAAQ,CAAC;;KAE5C,MAAM,IAAK8oC,MAAc,CAAC9oC,QAAQ,EAAE;;MAEnC8oC,MAAM,CAACF,GAAG,GAAIE,MAAc,CAAC9oC,QAAQ,CAAC;;;IAGxC,OAAO8oC,MAAM;GACd;;;;EAKDnD,0CAAK,GAAL;IAAA;;IAEE,IAAI,CAACsD,KAAK,GAAG,KAAK;IAElB,IAAI,IAAI,CAACV,QAAQ,EAAE;;;;MAIjB,IAAI,CAACA,QAAQ,CAACK,GAAG,CAACxoC,IAAI,CAAC8oC,SAAS,GAAG,EAAE;MACrC7oC,UAAU,CAAC;QACT,IAAI6Y,KAAI,CAACqvB,QAAQ,KAAK,IAAI,EAAE;UAC1BvoC,QAAQ,CAACI,IAAI,CAACknC,WAAW,CAACpuB,KAAI,CAACqvB,QAAQ,CAAC;UACxCrvB,KAAI,CAACqvB,QAAQ,GAAG,IAAI;;OAEvB,EAAEjoC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;;IAInB,IAAM4kC,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,IAAIA,YAAY,EAAE;MAChB,IAAI,CAACA,YAAY,GAAG,IAAI;MACxBA,YAAY,EAAE;;GAEjB;;;;;;EAODQ,kDAAa,GAAb,UAAchpC,EAAU,EAAEmrC,EAAU;IAClC,IAAI,CAACqB,IAAI,GAAGxsC,EAAE;IACd,IAAI,CAACysC,IAAI,GAAGtB,EAAE;IACd,IAAI,CAACmB,KAAK,GAAG,IAAI;;IAGjB,OAAO,IAAI,CAACI,WAAW,EAAE,EAAE;GAC5B;;;;;;;;EASO1D,gDAAW,GAAnB;;;;IAIE,IACE,IAAI,CAACsD,KAAK,IACV,IAAI,CAAC3C,YAAY,IACjB,IAAI,CAACgD,mBAAmB,CAACljB,IAAI,IAAI,IAAI,CAACmjB,WAAW,CAAC5rC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EACrE;;MAEA,IAAI,CAAC6rC,aAAa,EAAE;MACpB,IAAM9C,SAAS,GAAqC,EAAE;MACtDA,SAAS,CAAC/C,0BAA0B,CAAC,GAAG,IAAI,CAACwF,IAAI;MACjDzC,SAAS,CAAC9C,0BAA0B,CAAC,GAAG,IAAI,CAACwF,IAAI;MACjD1C,SAAS,CAAC7C,8BAA8B,CAAC,GAAG,IAAI,CAAC2F,aAAa;MAC9D,IAAIC,MAAM,GAAG,IAAI,CAAC1E,KAAK,CAAC2B,SAAS,CAAC;;MAElC,IAAIgD,aAAa,GAAG,EAAE;MACtB,IAAIhsC,CAAC,GAAG,CAAC;MAET,OAAO,IAAI,CAAC6rC,WAAW,CAAC5rC,MAAM,GAAG,CAAC,EAAE;;QAElC,IAAMgsC,OAAO,GAAG,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC;QACnC,IACGI,OAAO,CAACC,CAAe,CAACjsC,MAAM,GAC7BymC,eAAe,GACfsF,aAAa,CAAC/rC,MAAM,IACtBwmC,iBAAiB,EACjB;;UAEA,IAAM0F,MAAM,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,EAAE;UACvCJ,aAAa,GACXA,aAAa,GACb,GAAG,GACH3F,mCAAmC,GACnCrmC,CAAC,GACD,GAAG,GACHmsC,MAAM,CAACE,GAAG,GACV,GAAG,GACH/F,oCAAoC,GACpCtmC,CAAC,GACD,GAAG,GACHmsC,MAAM,CAACG,EAAE,GACT,GAAG,GACH/F,4BAA4B,GAC5BvmC,CAAC,GACD,GAAG,GACHmsC,MAAM,CAACD,CAAC;UACVlsC,CAAC,EAAE;SACJ,MAAM;UACL;;;MAIJ+rC,MAAM,GAAGA,MAAM,GAAGC,aAAa;MAC/B,IAAI,CAACO,eAAe,CAACR,MAAM,EAAE,IAAI,CAACD,aAAa,CAAC;MAEhD,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,KAAK;;GAEf;;;;;;;EAQD7D,mDAAc,GAAd,UAAeuE,MAAc,EAAEC,SAAiB,EAAE1qC,IAAa;;IAE7D,IAAI,CAAC8pC,WAAW,CAAC/nC,IAAI,CAAC;MAAEuoC,GAAG,EAAEG,MAAM;MAAEF,EAAE,EAAEG,SAAS;MAAEP,CAAC,EAAEnqC;IAAI,CAAE,CAAC;;;IAI9D,IAAI,IAAI,CAACwpC,KAAK,EAAE;MACd,IAAI,CAACI,WAAW,EAAE;;GAErB;;;;;;;EAQO1D,oDAAe,GAAvB,UAAwByE,GAAW,EAAEC,MAAc;IAAnD;;IAEE,IAAI,CAACf,mBAAmB,CAAClI,GAAG,CAACiJ,MAAM,CAAC;IAEpC,IAAMC,YAAY,GAAG,SAAfA,YAAY,GAAG;MACnBpxB,KAAI,CAACowB,mBAAmB,CAACxiB,MAAM,CAACujB,MAAM,CAAC;MACvCnxB,KAAI,CAACmwB,WAAW,EAAE;KACnB;;;IAID,IAAMkB,gBAAgB,GAAGlqC,UAAU,CACjCiqC,YAAY,EACZhqC,IAAI,CAACC,KAAK,CAAC+jC,0BAA0B,CAAC,CACvC;IAED,IAAMkG,YAAY,GAAG,SAAfA,YAAY,GAAG;;MAEnBrE,YAAY,CAACoE,gBAAgB,CAAC;;MAG9BD,YAAY,EAAE;KACf;IAED,IAAI,CAACxD,MAAM,CAACsD,GAAG,EAAEI,YAAY,CAAC;GAC/B;;;;;;EAOD7E,2CAAM,GAAN,UAAOyE,GAAW,EAAEK,MAAkB;IAAtC;IACE,IAAI1qC,SAAS,EAAE,EAAE;;MAEd,IAAY,CAAC2qC,cAAc,CAACN,GAAG,EAAEK,MAAM,CAAC;KAC1C,MAAM;MACLpqC,UAAU,CAAC;QACT,IAAI;;UAEF,IAAI,CAAC6Y,KAAI,CAACotB,YAAY,EAAE;YACtB;;UAEF,IAAMqE,WAAS,GAAGzxB,KAAI,CAACqvB,QAAQ,CAACK,GAAG,CAACzB,aAAa,CAAC,QAAQ,CAAC;UAC3DwD,WAAS,CAACvhC,IAAI,GAAG,iBAAiB;UAClCuhC,WAAS,CAACC,KAAK,GAAG,IAAI;UACtBD,WAAS,CAAC5C,GAAG,GAAGqC,GAAG;;UAEnBO,WAAS,CAACE,MAAM,GAAIF,WAAiB,CAACG,kBAAkB,GAAG;;YAEzD,IAAMC,MAAM,GAAIJ,WAAiB,CAAC1qC,UAAU;YAC5C,IAAI,CAAC8qC,MAAM,IAAIA,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,UAAU,EAAE;;cAE3DJ,WAAS,CAACE,MAAM,GAAIF,WAAiB,CAACG,kBAAkB,GAAG,IAAI;cAC/D,IAAIH,WAAS,CAACK,UAAU,EAAE;gBACxBL,WAAS,CAACK,UAAU,CAAC1D,WAAW,CAACqD,WAAS,CAAC;;cAE7CF,MAAM,EAAE;;WAEX;UACDE,WAAS,CAACM,OAAO,GAAG;YAClBxsC,GAAG,CAAC,mCAAmC,GAAG2rC,GAAG,CAAC;YAC9ClxB,KAAI,CAACotB,YAAY,GAAG,KAAK;YACzBptB,KAAI,CAACkuB,KAAK,EAAE;WACb;UACDluB,KAAI,CAACqvB,QAAQ,CAACK,GAAG,CAACxoC,IAAI,CAAC8nC,WAAW,CAACyC,WAAS,CAAC;SAC9C,CAAC,OAAOtuC,CAAC,EAAE;;;OAGb,EAAEiE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;GAEpB;EACH,iCAAC;AAAD,CAAC;;AC/uBD;;;;;;;;;;;;;;;;AAiBA;AACO,IAAI2qC,WAAW,GAAG,EAAE;AAE3B;SACgBC,aAAa,CAACC,OAAe;EAC3CF,WAAW,GAAGE,OAAO;AACvB;;ACvBA;;;;;;;;;;;;;;;;AAuCA,IAAMC,wBAAwB,GAAG,KAAK;AACtC,IAAMC,4BAA4B,GAAG,KAAK;AAE1C,IAAIC,aAAa,GAAG,IAAI;AACxB,IAAI,OAAOC,YAAY,KAAK,WAAW,EAAE;EACvCD,aAAa,GAAGC,YAAY;CAC7B,MAAM,IAAI,OAAOC,SAAS,KAAK,WAAW,EAAE;EAC3CF,aAAa,GAAGE,SAAS;;AAO3B;;;;;AAKA;;;;;;;;;EAwBE,6BACSjH,MAAc,EACrB95B,QAAkB,EACV+5B,aAAsB,EAC9BC,kBAA2B,EAC3BC,aAAsB;IAJf,WAAM,GAANH,MAAM;IAEL,kBAAa,GAAbC,aAAa;IA1BvB,mBAAc,GAAkB,IAAI;IACpC,WAAM,GAAoB,IAAI;IAC9B,gBAAW,GAAG,CAAC;IACf,cAAS,GAAG,CAAC;IACb,kBAAa,GAAG,CAAC;IA0Bf,IAAI,CAACG,IAAI,GAAG9lC,UAAU,CAAC,IAAI,CAAC0lC,MAAM,CAAC;IACnC,IAAI,CAACK,MAAM,GAAGtF,YAAY,CAACuF,aAAa,CAACp6B,QAAQ,CAAC;IAClD,IAAI,CAACpB,OAAO,GAAGoiC,mBAAmB,CAACC,cAAc,CAC/CjhC,QAAQ,EACRg6B,kBAAkB,EAClBC,aAAa,CACd;IACD,IAAI,CAACh8B,SAAS,GAAG+B,QAAQ,CAAC/B,SAAS;;;;;;;;;;EAWtB+iC,kCAAc,GAA7B,UACEhhC,QAAkB,EAClBg6B,kBAA2B,EAC3BC,aAAsB;IAEtB,IAAM+B,SAAS,GAA4B,EAAE;IAC7CA,SAAS,CAAC5+B,aAAa,CAAC,GAAGD,gBAAgB;IAE3C,IACE,CAAC9H,SAAS,EAAE,IACZ,OAAOV,QAAQ,KAAK,WAAW,IAC/BA,QAAQ,CAACunC,QAAQ,IACjB1+B,eAAe,CAACzE,IAAI,CAACpE,QAAQ,CAACunC,QAAQ,CAAC,EACvC;MACAF,SAAS,CAAC1+B,aAAa,CAAC,GAAGC,SAAS;;IAEtC,IAAIy8B,kBAAkB,EAAE;MACtBgC,SAAS,CAAC3+B,uBAAuB,CAAC,GAAG28B,kBAAkB;;IAEzD,IAAIC,aAAa,EAAE;MACjB+B,SAAS,CAACv+B,kBAAkB,CAAC,GAAGw8B,aAAa;;IAE/C,OAAOj6B,QAAQ,CAACs6B,aAAa,CAAC38B,SAAS,EAAEq+B,SAAS,CAAC;GACpD;;;;;;EAODgF,kCAAI,GAAJ,UAAKxG,SAA4B,EAAEC,YAAmC;IAAtE;IACE,IAAI,CAACA,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAE1B,IAAI,CAACN,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAACt7B,OAAO,CAAC;IAEpD,IAAI,CAAC88B,cAAc,GAAG,KAAK;;IAE3B9pC,iBAAiB,CAACqC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC;IAEzD,IAAI;MACF,IAAIoB,SAAS,EAAE,EAAE;QACf,IAAM6rC,MAAM,GAAG,IAAI,CAACjjC,SAAS,GAAG,WAAW,GAAG,MAAM;;QAEpD,IAAMkjC,OAAO,GAA4B;UACvCC,OAAO,EAAE;YACP,YAAY,EAAE,cAAYjkC,gBAAgB,SAAIqjC,WAAW,SAAIa,OAAO,CAACC,QAAQ,SAAIJ,MAAQ;YACzF,kBAAkB,EAAE,IAAI,CAACnH,aAAa,IAAI;;SAE7C;;QAGD,IAAMwH,GAAG,GAAGF,OAAO,CAAC,KAAK,CAAC;QAC1B,IAAMG,KAAK,GACT,IAAI,CAAC5iC,OAAO,CAAC/J,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,GAChC0sC,GAAG,CAAC,aAAa,CAAC,IAAIA,GAAG,CAAC,aAAa,CAAC,GACxCA,GAAG,CAAC,YAAY,CAAC,IAAIA,GAAG,CAAC,YAAY,CAAC;QAE5C,IAAIC,KAAK,EAAE;UACTL,OAAO,CAAC,OAAO,CAAC,GAAG;YAAEM,MAAM,EAAED;UAAK,CAAE;;QAGtC,IAAI,CAACE,MAAM,GAAG,IAAIb,aAAa,CAAC,IAAI,CAACjiC,OAAO,EAAE,EAAE,EAAEuiC,OAAO,CAAC;OAC3D,MAAM;QACL,IAAMA,OAAO,GAA4B;UACvCC,OAAO,EAAE;YACP,kBAAkB,EAAE,IAAI,CAACrH,aAAa,IAAI;;SAE7C;QACD,IAAI,CAAC2H,MAAM,GAAG,IAAIb,aAAa,CAAC,IAAI,CAACjiC,OAAO,EAAE,EAAE,EAAEuiC,OAAO,CAAC;;KAE7D,CAAC,OAAOxvC,CAAC,EAAE;MACV,IAAI,CAACuoC,IAAI,CAAC,gCAAgC,CAAC;MAC3C,IAAM5lC,KAAK,GAAG3C,CAAC,CAACoB,OAAO,IAAIpB,CAAC,CAACoD,IAAI;MACjC,IAAIT,KAAK,EAAE;QACT,IAAI,CAAC4lC,IAAI,CAAC5lC,KAAK,CAAC;;MAElB,IAAI,CAACymC,SAAS,EAAE;MAChB;;IAGF,IAAI,CAAC2G,MAAM,CAACC,MAAM,GAAG;MACnBnzB,KAAI,CAAC0rB,IAAI,CAAC,sBAAsB,CAAC;MACjC1rB,KAAI,CAACktB,cAAc,GAAG,IAAI;KAC3B;IAED,IAAI,CAACgG,MAAM,CAACE,OAAO,GAAG;MACpBpzB,KAAI,CAAC0rB,IAAI,CAAC,wCAAwC,CAAC;MACnD1rB,KAAI,CAACkzB,MAAM,GAAG,IAAI;MAClBlzB,KAAI,CAACusB,SAAS,EAAE;KACjB;IAED,IAAI,CAAC2G,MAAM,CAACG,SAAS,GAAG,WAAC;MACvBrzB,KAAI,CAACszB,mBAAmB,CAACC,CAAO,CAAC;KAClC;IAED,IAAI,CAACL,MAAM,CAACnB,OAAO,GAAG,WAAC;MACrB/xB,KAAI,CAAC0rB,IAAI,CAAC,uCAAuC,CAAC;;MAElD,IAAM5lC,KAAK,GAAI3C,CAAS,CAACoB,OAAO,IAAKpB,CAAS,CAACoD,IAAI;MACnD,IAAIT,KAAK,EAAE;QACTka,KAAI,CAAC0rB,IAAI,CAAC5lC,KAAK,CAAC;;MAElBka,KAAI,CAACusB,SAAS,EAAE;KACjB;GACF;;;;EAKDiG,mCAAK,GAAL,cAAU;EAIHA,iCAAa,GAApB;IACEA,mBAAmB,CAACxE,cAAc,GAAG,IAAI;GAC1C;EAEMwE,+BAAW,GAAlB;IACE,IAAIgB,YAAY,GAAG,KAAK;IACxB,IAAI,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC/nC,SAAS,EAAE;MAC3D,IAAMgoC,eAAe,GAAG,gCAAgC;MACxD,IAAMC,eAAe,GAAGF,SAAS,CAAC/nC,SAAS,CAACkoC,KAAK,CAACF,eAAe,CAAC;MAClE,IAAIC,eAAe,IAAIA,eAAe,CAAClvC,MAAM,GAAG,CAAC,EAAE;QACjD,IAAIovC,UAAU,CAACF,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;UACxCH,YAAY,GAAG,IAAI;;;;IAKzB,OACE,CAACA,YAAY,IACbnB,aAAa,KAAK,IAAI,IACtB,CAACG,mBAAmB,CAACxE,cAAc;GAEtC;;;;;EAkBMwE,oCAAgB,GAAvB;;;IAGE,OACEpvC,iBAAiB,CAAC0wC,iBAAiB,IACnC1wC,iBAAiB,CAACuC,GAAG,CAAC,4BAA4B,CAAC,KAAK,IAAI;GAE/D;EAED6sC,mDAAqB,GAArB;IACEpvC,iBAAiB,CAACsC,MAAM,CAAC,4BAA4B,CAAC;GACvD;EAEO8sC,0CAAY,GAApB,UAAqBjsC,IAAY;IAC/B,IAAI,CAACwtC,MAAM,CAACzrC,IAAI,CAAC/B,IAAI,CAAC;IACtB,IAAI,IAAI,CAACwtC,MAAM,CAACtvC,MAAM,KAAK,IAAI,CAACuvC,WAAW,EAAE;MAC3C,IAAMC,QAAQ,GAAG,IAAI,CAACF,MAAM,CAAC/pC,IAAI,CAAC,EAAE,CAAC;MACrC,IAAI,CAAC+pC,MAAM,GAAG,IAAI;MAClB,IAAMG,QAAQ,GAAG1xC,QAAQ,CAACyxC,QAAQ,CAAW;;MAG7C,IAAI,CAACjI,SAAS,CAACkI,QAAQ,CAAC;;GAE3B;;;;;EAMO1B,kDAAoB,GAA5B,UAA6B2B,UAAkB;IAC7C,IAAI,CAACH,WAAW,GAAGG,UAAU;IAC7B,IAAI,CAACJ,MAAM,GAAG,EAAE;GACjB;;;;;;;EAQOvB,gDAAkB,GAA1B,UAA2BjsC,IAAY;IACrCpB,MAAM,CAAC,IAAI,CAAC4uC,MAAM,KAAK,IAAI,EAAE,gCAAgC,CAAC;;;IAG9D,IAAIxtC,IAAI,CAAC9B,MAAM,IAAI,CAAC,EAAE;MACpB,IAAM0vC,UAAU,GAAG3tC,MAAM,CAACD,IAAI,CAAC;MAC/B,IAAI,CAAC6tC,KAAK,CAACD,UAAU,CAAC,EAAE;QACtB,IAAI,CAACE,oBAAoB,CAACF,UAAU,CAAC;QACrC,OAAO,IAAI;;;IAGf,IAAI,CAACE,oBAAoB,CAAC,CAAC,CAAC;IAC5B,OAAO9tC,IAAI;GACZ;;;;;EAMDisC,iDAAmB,GAAnB,UAAoB8B,IAA8B;IAChD,IAAI,IAAI,CAACpB,MAAM,KAAK,IAAI,EAAE;MACxB,OAAO;;;IAET,IAAM3sC,IAAI,GAAG+tC,IAAI,CAAC,MAAM,CAAW;IACnC,IAAI,CAACrF,aAAa,IAAI1oC,IAAI,CAAC9B,MAAM;IACjC,IAAI,CAACknC,MAAM,CAAC6C,gBAAgB,CAAC,gBAAgB,EAAEjoC,IAAI,CAAC9B,MAAM,CAAC;IAE3D,IAAI,CAAC8vC,cAAc,EAAE;IAErB,IAAI,IAAI,CAACR,MAAM,KAAK,IAAI,EAAE;;MAExB,IAAI,CAACS,YAAY,CAACjuC,IAAI,CAAC;KACxB,MAAM;;MAEL,IAAMkuC,aAAa,GAAG,IAAI,CAACC,kBAAkB,CAACnuC,IAAI,CAAC;MACnD,IAAIkuC,aAAa,KAAK,IAAI,EAAE;QAC1B,IAAI,CAACD,YAAY,CAACC,aAAa,CAAC;;;GAGrC;;;;;EAMDjC,kCAAI,GAAJ,UAAKjsC,IAAQ;IACX,IAAI,CAACguC,cAAc,EAAE;IAErB,IAAMjG,OAAO,GAAGjsC,SAAS,CAACkE,IAAI,CAAC;IAC/B,IAAI,CAACgoC,SAAS,IAAID,OAAO,CAAC7pC,MAAM;IAChC,IAAI,CAACknC,MAAM,CAAC6C,gBAAgB,CAAC,YAAY,EAAEF,OAAO,CAAC7pC,MAAM,CAAC;;;IAK1D,IAAMkE,QAAQ,GAAGH,iBAAiB,CAAC8lC,OAAO,EAAE6D,wBAAwB,CAAC;;IAGrE,IAAIxpC,QAAQ,CAAClE,MAAM,GAAG,CAAC,EAAE;MACvB,IAAI,CAACkwC,WAAW,CAACloC,MAAM,CAAC9D,QAAQ,CAAClE,MAAM,CAAC,CAAC;;;IAI3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmE,QAAQ,CAAClE,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAI,CAACmwC,WAAW,CAAChsC,QAAQ,CAACnE,CAAC,CAAC,CAAC;;GAEhC;EAEOguC,uCAAS,GAAjB;IACE,IAAI,CAACnG,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACuI,cAAc,EAAE;MACvBC,aAAa,CAAC,IAAI,CAACD,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,GAAG,IAAI;;IAG5B,IAAI,IAAI,CAAC1B,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAAChF,KAAK,EAAE;MACnB,IAAI,CAACgF,MAAM,GAAG,IAAI;;GAErB;EAEOV,uCAAS,GAAjB;IACE,IAAI,CAAC,IAAI,CAACnG,SAAS,EAAE;MACnB,IAAI,CAACX,IAAI,CAAC,6BAA6B,CAAC;MACxC,IAAI,CAAC2C,SAAS,EAAE;;MAGhB,IAAI,IAAI,CAACpC,YAAY,EAAE;QACrB,IAAI,CAACA,YAAY,CAAC,IAAI,CAACiB,cAAc,CAAC;QACtC,IAAI,CAACjB,YAAY,GAAG,IAAI;;;GAG7B;;;;;EAMDuG,mCAAK,GAAL;IACE,IAAI,CAAC,IAAI,CAACnG,SAAS,EAAE;MACnB,IAAI,CAACX,IAAI,CAAC,2BAA2B,CAAC;MACtC,IAAI,CAAC2C,SAAS,EAAE;;GAEnB;;;;;EAMDmE,4CAAc,GAAd;IAAA;IACEqC,aAAa,CAAC,IAAI,CAACD,cAAc,CAAC;IAClC,IAAI,CAACA,cAAc,GAAGE,WAAW,CAAC;;MAEhC,IAAI90B,KAAI,CAACkzB,MAAM,EAAE;QACflzB,KAAI,CAAC20B,WAAW,CAAC,GAAG,CAAC;;MAEvB30B,KAAI,CAACu0B,cAAc,EAAE;;KAEtB,EAAEntC,IAAI,CAACC,KAAK,CAAC+qC,4BAA4B,CAAC,CAAQ;GACpD;;;;;;;EAQOI,yCAAW,GAAnB,UAAoB7uC,GAAW;;;;IAI7B,IAAI;MACF,IAAI,CAACuvC,MAAM,CAAC6B,IAAI,CAACpxC,GAAG,CAAC;KACtB,CAAC,OAAOR,CAAC,EAAE;MACV,IAAI,CAACuoC,IAAI,CACP,yCAAyC,EACzCvoC,CAAC,CAACoB,OAAO,IAAIpB,CAAC,CAACoD,IAAI,EACnB,qBAAqB,CACtB;MACDY,UAAU,CAAC,IAAI,CAAColC,SAAS,CAAC/mC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;GAE3C;;;;;EAjMMgtC,gDAA4B,GAAG,CAAC;;;;;EAMhCA,kCAAc,GAAG,KAAK;EA4L/B,0BAAC;CAhYD;;AC1DA;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AAQA;;;;EAcE,0BAAYhhC,QAAkB;IAC5B,IAAI,CAACwjC,eAAe,CAACxjC,QAAQ,CAAC;;EARhCnF,sBAAW4oC,kCAAc;;;;;SAAzB;MACE,OAAO,CAAClJ,qBAAqB,EAAEyG,mBAAmB,CAAC;KACpD;;;;;;;;EAaOyC,0CAAe,GAAvB,UAAwBzjC,QAAkB;;IACxC,IAAM0jC,qBAAqB,GACzB1C,mBAAmB,IAAIA,mBAAmB,CAAC,aAAa,CAAC,EAAE;IAC7D,IAAI2C,oBAAoB,GACtBD,qBAAqB,IAAI,CAAC1C,mBAAmB,CAAC4C,gBAAgB,EAAE;IAElE,IAAI5jC,QAAQ,CAAChC,aAAa,EAAE;MAC1B,IAAI,CAAC0lC,qBAAqB,EAAE;QAC1BjvC,IAAI,CACF,iFAAiF,CAClF;;MAGHkvC,oBAAoB,GAAG,IAAI;;IAG7B,IAAIA,oBAAoB,EAAE;MACxB,IAAI,CAACE,WAAW,GAAG,CAAC7C,mBAAmB,CAAC;KACzC,MAAM;MACL,IAAM8C,UAAU,GAAI,IAAI,CAACD,WAAW,GAAG,EAA6B;;QACpE,KAAwB,kCAAgB,CAACE,cAAc,6CAAE;UAApD,IAAMC,SAAS;UAClB,IAAIA,SAAS,IAAIA,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE;YAC3CF,UAAU,CAAChtC,IAAI,CAACktC,SAAS,CAAC;;;;;;;;;;;;;;;GAIjC;;;;;EAMDP,2CAAgB,GAAhB;IACE,IAAI,IAAI,CAACI,WAAW,CAAC5wC,MAAM,GAAG,CAAC,EAAE;MAC/B,OAAO,IAAI,CAAC4wC,WAAW,CAAC,CAAC,CAAC;KAC3B,MAAM;MACL,MAAM,IAAIrvC,KAAK,CAAC,yBAAyB,CAAC;;GAE7C;;;;;EAMDivC,2CAAgB,GAAhB;IACE,IAAI,IAAI,CAACI,WAAW,CAAC5wC,MAAM,GAAG,CAAC,EAAE;MAC/B,OAAO,IAAI,CAAC4wC,WAAW,CAAC,CAAC,CAAC;KAC3B,MAAM;MACL,OAAO,IAAI;;GAEd;EACH,uBAAC;AAAD,CAAC;;ACxGD;;;;;;;;;;;;;;;;AA+BA;AACA,IAAMI,eAAe,GAAG,KAAK;AAE7B;AACA;AACA,IAAMC,mCAAmC,GAAG,IAAI;AAEhD;AACA;AACA;AACA,IAAMC,2BAA2B,GAAG,EAAE,GAAG,IAAI;AAC7C,IAAMC,+BAA+B,GAAG,GAAG,GAAG,IAAI;AAQlD,IAAMC,YAAY,GAAG,GAAG;AACxB,IAAMC,YAAY,GAAG,GAAG;AACxB,IAAMC,gBAAgB,GAAG,GAAG;AAC5B,IAAMC,aAAa,GAAG,GAAG;AACzB,IAAMC,aAAa,GAAG,GAAG;AACzB,IAAMC,YAAY,GAAG,GAAG;AACxB,IAAMC,UAAU,GAAG,GAAG;AACtB,IAAMC,gBAAgB,GAAG,GAAG;AAC5B,IAAMC,IAAI,GAAG,GAAG;AAEhB,IAAMC,YAAY,GAAG,GAAG;AAExB;;;;;;AAMA;;;;;;;;;;;EA2BE,oBACS7yC,EAAU,EACT8yC,SAAmB,EACnBC,cAAkC,EAClC7M,UAA2B,EAC3B8M,QAAwC,EACxCtK,aAAyB,EACzBuK,OAA4B,EAC7BjL,aAAsB;IAPtB,OAAE,GAAFhoC,EAAE;IACD,cAAS,GAAT8yC,SAAS;IACT,mBAAc,GAAdC,cAAc;IACd,eAAU,GAAV7M,UAAU;IACV,aAAQ,GAAR8M,QAAQ;IACR,kBAAa,GAAbtK,aAAa;IACb,YAAO,GAAPuK,OAAO;IACR,kBAAa,GAAbjL,aAAa;IAlCtB,oBAAe,GAAG,CAAC;IACnB,wBAAmB,GAAc,EAAE;IAW3B,WAAM;IAwBZ,IAAI,CAACC,IAAI,GAAG9lC,UAAU,CAAC,IAAI,GAAG,IAAI,CAACnC,EAAE,GAAG,GAAG,CAAC;IAC5C,IAAI,CAACkzC,iBAAiB,GAAG,IAAI1B,gBAAgB,CAACsB,SAAS,CAAC;IACxD,IAAI,CAAC7K,IAAI,CAAC,oBAAoB,CAAC;IAC/B,IAAI,CAACkL,MAAM,EAAE;;;;;;EAOPC,2BAAM,GAAd;IAAA;IACE,IAAMC,IAAI,GAAG,IAAI,CAACH,iBAAiB,CAACI,gBAAgB,EAAE;IACtD,IAAI,CAACC,KAAK,GAAG,IAAIF,IAAI,CACnB,IAAI,CAACG,gBAAgB,EAAE,EACvB,IAAI,CAACV,SAAS,EACd,IAAI,CAACC,cAAc,EACnB3jC,SAAS,EACT,IAAI,CAAC44B,aAAa,CACnB;;;IAID,IAAI,CAACyL,yBAAyB,GAAGJ,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC;IAE1E,IAAMK,iBAAiB,GAAG,IAAI,CAACC,aAAa,CAAC,IAAI,CAACJ,KAAK,CAAC;IACxD,IAAMK,gBAAgB,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACN,KAAK,CAAC;IAC1D,IAAI,CAACO,GAAG,GAAG,IAAI,CAACP,KAAK;IACrB,IAAI,CAACQ,GAAG,GAAG,IAAI,CAACR,KAAK;IACrB,IAAI,CAACS,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,UAAU,GAAG,KAAK;;;;;;;IAQvBvwC,UAAU,CAAC;;MAET6Y,KAAI,CAACg3B,KAAK,IAAIh3B,KAAI,CAACg3B,KAAK,CAACrH,IAAI,CAACwH,iBAAiB,EAAEE,gBAAgB,CAAC;KACnE,EAAEjwC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjB,IAAMswC,gBAAgB,GAAGb,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;IACpD,IAAIa,gBAAgB,GAAG,CAAC,EAAE;MACxB,IAAI,CAACC,eAAe,GAAGhsC,qBAAqB,CAAC;QAC3CoU,KAAI,CAAC43B,eAAe,GAAG,IAAI;QAC3B,IAAI,CAAC53B,KAAI,CAAC03B,UAAU,EAAE;UACpB,IACE13B,KAAI,CAACg3B,KAAK,IACVh3B,KAAI,CAACg3B,KAAK,CAAC/H,aAAa,GAAG2G,+BAA+B,EAC1D;YACA51B,KAAI,CAAC0rB,IAAI,CACP,uDAAuD,GACrD1rB,KAAI,CAACg3B,KAAK,CAAC/H,aAAa,GACxB,sCAAsC,CACzC;YACDjvB,KAAI,CAAC03B,UAAU,GAAG,IAAI;YACtB13B,KAAI,CAACg3B,KAAK,CAACa,qBAAqB,EAAE;WACnC,MAAM,IACL73B,KAAI,CAACg3B,KAAK,IACVh3B,KAAI,CAACg3B,KAAK,CAACzI,SAAS,GAAGoH,2BAA2B,EAClD;YACA31B,KAAI,CAAC0rB,IAAI,CACP,mDAAmD,GACjD1rB,KAAI,CAACg3B,KAAK,CAACzI,SAAS,GACpB,oCAAoC,CACvC;;;WAGF,MAAM;YACLvuB,KAAI,CAAC0rB,IAAI,CAAC,6CAA6C,CAAC;YACxD1rB,KAAI,CAACkuB,KAAK,EAAE;;;;OAIjB,EAAE9mC,IAAI,CAACC,KAAK,CAACswC,gBAAgB,CAAC,CAAQ;;GAE1C;;;;;EAMOd,qCAAgB,GAAxB;IACE,OAAO,IAAI,GAAG,IAAI,CAACpzC,EAAE,GAAG,GAAG,GAAG,IAAI,CAACq0C,eAAe,EAAE;GACrD;EAEOjB,qCAAgB,GAAxB,UAAyBC,IAAI;IAA7B;IACE,OAAO,uBAAa;MAClB,IAAIA,IAAI,KAAK92B,KAAI,CAACg3B,KAAK,EAAE;QACvBh3B,KAAI,CAAC+3B,iBAAiB,CAACC,aAAa,CAAC;OACtC,MAAM,IAAIlB,IAAI,KAAK92B,KAAI,CAACy3B,cAAc,EAAE;QACvCz3B,KAAI,CAAC0rB,IAAI,CAAC,4BAA4B,CAAC;QACvC1rB,KAAI,CAACi4B,0BAA0B,EAAE;OAClC,MAAM;QACLj4B,KAAI,CAAC0rB,IAAI,CAAC,2BAA2B,CAAC;;KAEzC;GACF;EAEOmL,kCAAa,GAArB,UAAsBC,IAAe;IAArC;IACE,OAAO,UAACvyC,OAAkB;MACxB,IAAIyb,KAAI,CAACk4B,MAAM,2BAAiC;QAC9C,IAAIpB,IAAI,KAAK92B,KAAI,CAACw3B,GAAG,EAAE;UACrBx3B,KAAI,CAACm4B,yBAAyB,CAAC5zC,OAAO,CAAC;SACxC,MAAM,IAAIuyC,IAAI,KAAK92B,KAAI,CAACy3B,cAAc,EAAE;UACvCz3B,KAAI,CAACo4B,2BAA2B,CAAC7zC,OAAO,CAAC;SAC1C,MAAM;UACLyb,KAAI,CAAC0rB,IAAI,CAAC,2BAA2B,CAAC;;;KAG3C;GACF;;;;;EAMDmL,gCAAW,GAAX,UAAYwB,OAAe;;IAEzB,IAAMC,GAAG,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAE7H,CAAC,EAAE2H;IAAO,CAAE;IAClC,IAAI,CAACG,SAAS,CAACF,GAAG,CAAC;GACpB;EAEDzB,yCAAoB,GAApB;IACE,IAAI,IAAI,CAACU,GAAG,KAAK,IAAI,CAACE,cAAc,IAAI,IAAI,CAACD,GAAG,KAAK,IAAI,CAACC,cAAc,EAAE;MACxE,IAAI,CAAC/L,IAAI,CACP,0CAA0C,GAAG,IAAI,CAAC+L,cAAc,CAACnM,MAAM,CACxE;MACD,IAAI,CAAC0L,KAAK,GAAG,IAAI,CAACS,cAAc;MAChC,IAAI,CAACA,cAAc,GAAG,IAAI;;;GAG7B;;EAEOZ,wCAAmB,GAA3B,UAA4B4B,WAAqC;IAC/D,IAAI5C,YAAY,IAAI4C,WAAW,EAAE;MAC/B,IAAMC,GAAG,GAAGD,WAAW,CAAC5C,YAAY,CAAW;MAC/C,IAAI6C,GAAG,KAAKvC,UAAU,EAAE;QACtB,IAAI,CAACwC,0BAA0B,EAAE;OAClC,MAAM,IAAID,GAAG,KAAK1C,aAAa,EAAE;;QAEhC,IAAI,CAACtK,IAAI,CAAC,sCAAsC,CAAC;QACjD,IAAI,CAAC+L,cAAc,CAACvJ,KAAK,EAAE;;QAE3B,IACE,IAAI,CAACqJ,GAAG,KAAK,IAAI,CAACE,cAAc,IAChC,IAAI,CAACD,GAAG,KAAK,IAAI,CAACC,cAAc,EAChC;UACA,IAAI,CAACvJ,KAAK,EAAE;;OAEf,MAAM,IAAIwK,GAAG,KAAKxC,YAAY,EAAE;QAC/B,IAAI,CAACxK,IAAI,CAAC,wBAAwB,CAAC;QACnC,IAAI,CAACkN,2BAA2B,EAAE;QAClC,IAAI,CAACD,0BAA0B,EAAE;;;GAGtC;EAEO9B,gDAA2B,GAAnC,UAAoCgC,UAAqB;IACvD,IAAMC,KAAK,GAAW7wC,UAAU,CAAC,GAAG,EAAE4wC,UAAU,CAAW;IAC3D,IAAMtyC,IAAI,GAAY0B,UAAU,CAAC,GAAG,EAAE4wC,UAAU,CAAC;IACjD,IAAIC,KAAK,KAAK,GAAG,EAAE;MACjB,IAAI,CAACC,mBAAmB,CAACxyC,IAAiB,CAAC;KAC5C,MAAM,IAAIuyC,KAAK,KAAK,GAAG,EAAE;;MAExB,IAAI,CAACE,mBAAmB,CAAC1wC,IAAI,CAAC/B,IAAI,CAAC;KACpC,MAAM;MACL,MAAM,IAAIP,KAAK,CAAC,0BAA0B,GAAG8yC,KAAK,CAAC;;GAEtD;EAEOjC,+CAA0B,GAAlC;IACE,IAAI,IAAI,CAAC+B,2BAA2B,IAAI,CAAC,EAAE;MACzC,IAAI,CAAClN,IAAI,CAAC,kCAAkC,CAAC;MAC7C,IAAI,CAACgM,UAAU,GAAG,IAAI;MACtB,IAAI,CAACD,cAAc,CAACI,qBAAqB,EAAE;MAC3C,IAAI,CAACoB,mBAAmB,EAAE;KAC3B,MAAM;;MAEL,IAAI,CAACvN,IAAI,CAAC,4BAA4B,CAAC;MACvC,IAAI,CAAC+L,cAAc,CAAC1C,IAAI,CAAC;QAAEwD,CAAC,EAAE,GAAG;QAAE7H,CAAC,EAAE;UAAE6H,CAAC,EAAElC,IAAI;UAAE3F,CAAC,EAAE;QAAE;MAAE,CAAE,CAAC;;GAE9D;EAEOmG,wCAAmB,GAA3B;;IAEE,IAAI,CAACY,cAAc,CAACyB,KAAK,EAAE;;IAE3B,IAAI,CAACxN,IAAI,CAAC,iCAAiC,CAAC;IAC5C,IAAI,CAAC+L,cAAc,CAAC1C,IAAI,CAAC;MAAEwD,CAAC,EAAE,GAAG;MAAE7H,CAAC,EAAE;QAAE6H,CAAC,EAAEpC,UAAU;QAAEzF,CAAC,EAAE;MAAE;IAAE,CAAE,CAAC;;;IAIjE,IAAI,CAAChF,IAAI,CAAC,gCAAgC,CAAC;IAC3C,IAAI,CAACsL,KAAK,CAACjC,IAAI,CAAC;MAAEwD,CAAC,EAAE,GAAG;MAAE7H,CAAC,EAAE;QAAE6H,CAAC,EAAEnC,gBAAgB;QAAE1F,CAAC,EAAE;MAAE;IAAE,CAAE,CAAC;IAC9D,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAACE,cAAc;IAE9B,IAAI,CAAC0B,oBAAoB,EAAE;GAC5B;EAEOtC,8CAAyB,GAAjC,UAAkCgC,UAAoC;;IAEpE,IAAMC,KAAK,GAAW7wC,UAAU,CAAC,GAAG,EAAE4wC,UAAU,CAAW;IAC3D,IAAMtyC,IAAI,GAAY0B,UAAU,CAAC,GAAG,EAAE4wC,UAAU,CAAC;IACjD,IAAIC,KAAK,KAAK,GAAG,EAAE;MACjB,IAAI,CAACM,UAAU,CAAC7yC,IAAgC,CAAC;KAClD,MAAM,IAAIuyC,KAAK,KAAK,GAAG,EAAE;MACxB,IAAI,CAACO,cAAc,CAAC9yC,IAAI,CAAC;;GAE5B;EAEOswC,mCAAc,GAAtB,UAAuBtyC,OAAgB;IACrC,IAAI,CAAC+0C,kBAAkB,EAAE;;IAGzB,IAAI,CAAC3P,UAAU,CAACplC,OAAO,CAAC;GACzB;EAEOsyC,uCAAkB,GAA1B;IACE,IAAI,CAAC,IAAI,CAACa,UAAU,EAAE;MACpB,IAAI,CAACR,yBAAyB,EAAE;MAChC,IAAI,IAAI,CAACA,yBAAyB,IAAI,CAAC,EAAE;QACvC,IAAI,CAACxL,IAAI,CAAC,gCAAgC,CAAC;QAC3C,IAAI,CAACgM,UAAU,GAAG,IAAI;QACtB,IAAI,CAACV,KAAK,CAACa,qBAAqB,EAAE;;;GAGvC;EAEOhB,+BAAU,GAAlB,UAAmB4B,WAAqC;IACtD,IAAMC,GAAG,GAAWzwC,UAAU,CAAC4tC,YAAY,EAAE4C,WAAW,CAAW;IACnE,IAAI3C,YAAY,IAAI2C,WAAW,EAAE;MAC/B,IAAMc,OAAO,GAAGd,WAAW,CAAC3C,YAAY,CAAC;MACzC,IAAI4C,GAAG,KAAKpC,YAAY,EAAE;QACxB,IAAI,CAACkD,YAAY,CACfD,OAKC,CACF;OACF,MAAM,IAAIb,GAAG,KAAKtC,gBAAgB,EAAE;QACnC,IAAI,CAAC1K,IAAI,CAAC,mCAAmC,CAAC;QAC9C,IAAI,CAAC8L,GAAG,GAAG,IAAI,CAACC,cAAc;QAC9B,KAAK,IAAIjzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACw0C,mBAAmB,CAACv0C,MAAM,EAAE,EAAED,CAAC,EAAE;UACxD,IAAI,CAAC60C,cAAc,CAAC,IAAI,CAACL,mBAAmB,CAACx0C,CAAC,CAAC,CAAC;;QAElD,IAAI,CAACw0C,mBAAmB,GAAG,EAAE;QAC7B,IAAI,CAACG,oBAAoB,EAAE;OAC5B,MAAM,IAAIT,GAAG,KAAK3C,gBAAgB,EAAE;;;QAGnC,IAAI,CAAC0D,qBAAqB,CAACF,OAAiB,CAAC;OAC9C,MAAM,IAAIb,GAAG,KAAK1C,aAAa,EAAE;;QAEhC,IAAI,CAAC0D,QAAQ,CAACH,OAAiB,CAAC;OACjC,MAAM,IAAIb,GAAG,KAAKzC,aAAa,EAAE;QAChCnwC,KAAK,CAAC,gBAAgB,GAAGyzC,OAAO,CAAC;OAClC,MAAM,IAAIb,GAAG,KAAKxC,YAAY,EAAE;QAC/B,IAAI,CAACxK,IAAI,CAAC,sBAAsB,CAAC;QACjC,IAAI,CAAC4N,kBAAkB,EAAE;QACzB,IAAI,CAACK,6BAA6B,EAAE;OACrC,MAAM;QACL7zC,KAAK,CAAC,kCAAkC,GAAG4yC,GAAG,CAAC;;;GAGpD;;;;;;EAOO7B,iCAAY,GAApB,UAAqB+C,SAKpB;IACC,IAAMC,SAAS,GAAGD,SAAS,CAAC9I,EAAE;IAC9B,IAAMoB,OAAO,GAAG0H,SAAS,CAAC3wC,CAAC;IAC3B,IAAMoG,IAAI,GAAGuqC,SAAS,CAACE,CAAC;IACxB,IAAI,CAACC,SAAS,GAAGH,SAAS,CAACvwC,CAAC;IAC5B,IAAI,CAACktC,SAAS,CAACyD,UAAU,CAAC3qC,IAAI,CAAC;;IAE/B,IAAI,IAAI,CAAC6oC,MAAM,yBAA+B;MAC5C,IAAI,CAAClB,KAAK,CAACkC,KAAK,EAAE;MAClB,IAAI,CAACe,wBAAwB,CAAC,IAAI,CAACjD,KAAK,EAAE6C,SAAS,CAAC;MACpD,IAAIlrC,gBAAgB,KAAKujC,OAAO,EAAE;QAChCjsC,IAAI,CAAC,oCAAoC,CAAC;;;MAG5C,IAAI,CAACi0C,gBAAgB,EAAE;;GAE1B;EAEOrD,qCAAgB,GAAxB;IACE,IAAMC,IAAI,GAAG,IAAI,CAACH,iBAAiB,CAACwD,gBAAgB,EAAE;IACtD,IAAIrD,IAAI,EAAE;MACR,IAAI,CAACsD,aAAa,CAACtD,IAAI,CAAC;;GAE3B;EAEOD,kCAAa,GAArB,UAAsBC,IAA0B;IAAhD;IACE,IAAI,CAACW,cAAc,GAAG,IAAIX,IAAI,CAC5B,IAAI,CAACG,gBAAgB,EAAE,EACvB,IAAI,CAACV,SAAS,EACd,IAAI,CAACC,cAAc,EACnB,IAAI,CAACuD,SAAS,CACf;;;IAGD,IAAI,CAACnB,2BAA2B,GAC9B9B,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC;IAE3C,IAAM9K,SAAS,GAAG,IAAI,CAACoL,aAAa,CAAC,IAAI,CAACK,cAAc,CAAC;IACzD,IAAMxL,YAAY,GAAG,IAAI,CAACqL,gBAAgB,CAAC,IAAI,CAACG,cAAc,CAAC;IAC/D,IAAI,CAACA,cAAc,CAAC9H,IAAI,CAAC3D,SAAS,EAAEC,YAAY,CAAC;;IAGjDrgC,qBAAqB,CAAC;MACpB,IAAIoU,KAAI,CAACy3B,cAAc,EAAE;QACvBz3B,KAAI,CAAC0rB,IAAI,CAAC,8BAA8B,CAAC;QACzC1rB,KAAI,CAACy3B,cAAc,CAACvJ,KAAK,EAAE;;KAE9B,EAAE9mC,IAAI,CAACC,KAAK,CAACouC,eAAe,CAAC,CAAC;GAChC;EAEOoB,6BAAQ,GAAhB,UAAiBxnC,IAAY;IAC3B,IAAI,CAACq8B,IAAI,CAAC,oCAAoC,GAAGr8B,IAAI,CAAC;IACtD,IAAI,CAACknC,SAAS,CAACyD,UAAU,CAAC3qC,IAAI,CAAC;;;IAG/B,IAAI,IAAI,CAAC6oC,MAAM,wBAA8B;MAC3C,IAAI,CAAChK,KAAK,EAAE;KACb,MAAM;;MAEL,IAAI,CAACmM,iBAAiB,EAAE;MACxB,IAAI,CAACzD,MAAM,EAAE;;GAEhB;EAEOC,6CAAwB,GAAhC,UAAiCC,IAAe,EAAE+C,SAAiB;IAAnE;IACE,IAAI,CAACnO,IAAI,CAAC,kCAAkC,CAAC;IAC7C,IAAI,CAACsL,KAAK,GAAGF,IAAI;IACjB,IAAI,CAACoB,MAAM;IAEX,IAAI,IAAI,CAACzB,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACoD,SAAS,EAAE,IAAI,CAACE,SAAS,CAAC;MACxC,IAAI,CAACtD,QAAQ,GAAG,IAAI;;;;IAKtB,IAAI,IAAI,CAACS,yBAAyB,KAAK,CAAC,EAAE;MACxC,IAAI,CAACxL,IAAI,CAAC,gCAAgC,CAAC;MAC3C,IAAI,CAACgM,UAAU,GAAG,IAAI;KACvB,MAAM;MACL9rC,qBAAqB,CAAC;QACpBoU,KAAI,CAAC25B,6BAA6B,EAAE;OACrC,EAAEvyC,IAAI,CAACC,KAAK,CAACquC,mCAAmC,CAAC,CAAC;;GAEtD;EAEOmB,kDAA6B,GAArC;;IAEE,IAAI,CAAC,IAAI,CAACa,UAAU,IAAI,IAAI,CAACQ,MAAM,wBAA8B;MAC/D,IAAI,CAACxM,IAAI,CAAC,0BAA0B,CAAC;MACrC,IAAI,CAAC8M,SAAS,CAAC;QAAED,CAAC,EAAE,GAAG;QAAE7H,CAAC,EAAE;UAAE6H,CAAC,EAAElC,IAAI;UAAE3F,CAAC,EAAE;QAAE;MAAE,CAAE,CAAC;;GAEpD;EAEOmG,+CAA0B,GAAlC;IACE,IAAMC,IAAI,GAAG,IAAI,CAACW,cAAc;IAChC,IAAI,CAACA,cAAc,GAAG,IAAI;IAC1B,IAAI,IAAI,CAACF,GAAG,KAAKT,IAAI,IAAI,IAAI,CAACU,GAAG,KAAKV,IAAI,EAAE;;MAE1C,IAAI,CAAC5I,KAAK,EAAE;;GAEf;;;;;;;EAQO2I,sCAAiB,GAAzB,UAA0BmB,aAAsB;IAC9C,IAAI,CAAChB,KAAK,GAAG,IAAI;;;IAIjB,IAAI,CAACgB,aAAa,IAAI,IAAI,CAACE,MAAM,yBAA+B;MAC9D,IAAI,CAACxM,IAAI,CAAC,6BAA6B,CAAC;;MAExC,IAAI,IAAI,CAAC6K,SAAS,CAACtmC,eAAe,EAAE,EAAE;QACpC7M,iBAAiB,CAACsC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC6wC,SAAS,CAAClnC,IAAI,CAAC;;QAEvD,IAAI,CAACknC,SAAS,CAAC1mC,YAAY,GAAG,IAAI,CAAC0mC,SAAS,CAAClnC,IAAI;;KAEpD,MAAM,IAAI,IAAI,CAAC6oC,MAAM,wBAA8B;MAClD,IAAI,CAACxM,IAAI,CAAC,2BAA2B,CAAC;;IAGxC,IAAI,CAACwC,KAAK,EAAE;GACb;;;;;;EAOO2I,0CAAqB,GAA7B,UAA8B9rC,MAAc;IAC1C,IAAI,CAAC2gC,IAAI,CAAC,wDAAwD,CAAC;IAEnE,IAAI,IAAI,CAACgL,OAAO,EAAE;MAChB,IAAI,CAACA,OAAO,CAAC3rC,MAAM,CAAC;MACpB,IAAI,CAAC2rC,OAAO,GAAG,IAAI;;;;IAKrB,IAAI,CAACvK,aAAa,GAAG,IAAI;IAEzB,IAAI,CAAC+B,KAAK,EAAE;GACb;EAEO2I,8BAAS,GAAjB,UAAkBtwC,IAAY;IAC5B,IAAI,IAAI,CAAC2xC,MAAM,wBAA8B;MAC3C,MAAM,6BAA6B;KACpC,MAAM;MACL,IAAI,CAACX,GAAG,CAACxC,IAAI,CAACxuC,IAAI,CAAC;;GAEtB;;;;EAKDswC,0BAAK,GAAL;IACE,IAAI,IAAI,CAACqB,MAAM,2BAAiC;MAC9C,IAAI,CAACxM,IAAI,CAAC,8BAA8B,CAAC;MACzC,IAAI,CAACwM,MAAM;MAEX,IAAI,CAACmC,iBAAiB,EAAE;MAExB,IAAI,IAAI,CAAClO,aAAa,EAAE;QACtB,IAAI,CAACA,aAAa,EAAE;QACpB,IAAI,CAACA,aAAa,GAAG,IAAI;;;GAG9B;;;;;EAMO0K,sCAAiB,GAAzB;IACE,IAAI,CAACnL,IAAI,CAAC,+BAA+B,CAAC;IAC1C,IAAI,IAAI,CAACsL,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAAC9I,KAAK,EAAE;MAClB,IAAI,CAAC8I,KAAK,GAAG,IAAI;;IAGnB,IAAI,IAAI,CAACS,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACvJ,KAAK,EAAE;MAC3B,IAAI,CAACuJ,cAAc,GAAG,IAAI;;IAG5B,IAAI,IAAI,CAACG,eAAe,EAAE;MACxB3K,YAAY,CAAC,IAAI,CAAC2K,eAAe,CAAC;MAClC,IAAI,CAACA,eAAe,GAAG,IAAI;;GAE9B;EACH,iBAAC;AAAD,CAAC;;ACpkBD;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;EAAA;;;;;;;EAiCE0C,2BAAG,GAAH,UACE/tC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C,EAC3C+M,IAAa,IACX;;;;;;;EAQJg5B,6BAAK,GAAL,UACE/tC,UAAkB,EAClBhG,IAAa,EACbgO,UAAiD,EACjD+M,IAAa,IACX;;;;;EAMJg5B,wCAAgB,GAAhB,UAAiBC,KAAa,IAAI;;;;;;EAOlCD,uCAAe,GAAf,UACE/tC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C,IACzC;;;;;;EAOJ+lC,yCAAiB,GAAjB,UACE/tC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C,IACzC;;;;;EAMJ+lC,0CAAkB,GAAlB,UACE/tC,UAAkB,EAClBgI,UAA2C,IACzC;;;;EAKJ+lC,mCAAW,GAAX,UAAY9S,KAA+B,IAAI;EACjD,oBAAC;AAAD,CAAC;;ACvHD;;;;;;;;;;;;;;;;AA4CA,IAAMgT,mBAAmB,GAAG,IAAI;AAChC,IAAMC,2BAA2B,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;AAClD,IAAMC,mBAAmB,GAAG,CAAC,GAAG,IAAI;AACpC,IAAMC,8BAA8B,GAAG,EAAE,GAAG,IAAI,CAAC;AACjD,IAAMC,0BAA0B,GAAG,GAAG;AACtC,IAAMC,6BAA6B,GAAG,KAAK,CAAC;AAC5C,IAAMC,4BAA4B,GAAG,aAAa;AAElD;AACA,IAAMC,4BAA4B,GAAG,CAAC;AA8BtC;;;;;;AAMA;EAA0CzjC;;;;;;;EAwDxC,8BACUi/B,SAAmB,EACnBC,cAAsB,EACtBwE,aAKC,EACDC,gBAAsC,EACtCC,mBAAyC,EACzCC,kBAAqC,EACrCC,aAA6B;IAZvC,YAcEx4B,iBAAO;IAbC5C,eAAS,GAATu2B,SAAS;IACTv2B,oBAAc,GAAdw2B,cAAc;IACdx2B,mBAAa,GAAbg7B,aAAa;IAMbh7B,sBAAgB,GAAhBi7B,gBAAgB;IAChBj7B,yBAAmB,GAAnBk7B,mBAAmB;IACnBl7B,wBAAkB,GAAlBm7B,kBAAkB;IAClBn7B,mBAAa,GAAbo7B,aAAa;;IAlEvBp7B,QAAE,GAAGq7B,oBAAoB,CAACC,2BAA2B,EAAE;IAC/Ct7B,UAAI,GAAGpa,UAAU,CAAC,IAAI,GAAGoa,KAAI,CAACvc,EAAE,GAAG,GAAG,CAAC;IAEvCuc,uBAAiB,GAAkC,EAAE;;IAE5CA,aAAO,GAGpB,IAAI+M,GAAG,EAAE;IACL/M,sBAAgB,GAAqB,EAAE;IACvCA,sBAAgB,GAAqB,EAAE;IACvCA,0BAAoB,GAAG,CAAC;IACxBA,0BAAoB,GAAG,CAAC;IACxBA,+BAAyB,GAA0B,EAAE;IACrDA,gBAAU,GAAG,KAAK;IAClBA,qBAAe,GAAGw6B,mBAAmB;IACrCx6B,wBAAkB,GAAGy6B,2BAA2B;IAChDz6B,4BAAsB,GAAiC,IAAI;IACnEA,mBAAa,GAAkB,IAAI;IAE3BA,+BAAyB,GAAkB,IAAI;IAE/CA,cAAQ,GAAY,KAAK;;IAGzBA,oBAAc,GAA0C,EAAE;IAC1DA,oBAAc,GAAG,CAAC;IAElBA,eAAS,GAGN,IAAI;IAEPA,gBAAU,GAAkB,IAAI;IAChCA,wBAAkB,GAAG,KAAK;IAC1BA,4BAAsB,GAAG,CAAC;IAE1BA,sBAAgB,GAAG,IAAI;IACvBA,gCAA0B,GAAkB,IAAI;IAChDA,oCAA8B,GAAkB,IAAI;IA+B1D,IAAIo7B,aAAa,IAAI,CAACv0C,SAAS,EAAE,EAAE;MACjC,MAAM,IAAIb,KAAK,CACb,gFAAgF,CACjF;;IAEHga,KAAI,CAACu7B,gBAAgB,CAAC,CAAC,CAAC;IAExBhS,iBAAiB,CAACiS,WAAW,EAAE,CAAC3xB,EAAE,CAAC,SAAS,EAAE7J,KAAI,CAACy7B,UAAU,EAAEz7B,KAAI,CAAC;IAEpE,IAAIu2B,SAAS,CAAClnC,IAAI,CAAChJ,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5CqjC,aAAa,CAAC8R,WAAW,EAAE,CAAC3xB,EAAE,CAAC,QAAQ,EAAE7J,KAAI,CAAC07B,SAAS,EAAE17B,KAAI,CAAC;;;;EAIxDq7B,0CAAW,GAArB,UACEniC,MAAc,EACdhS,IAAa,EACby0C,UAAiC;IAEjC,IAAMC,SAAS,GAAG,EAAE,IAAI,CAACC,cAAc;IAEvC,IAAMvD,GAAG,GAAG;MAAE/W,CAAC,EAAEqa,SAAS;MAAEj0C,CAAC,EAAEuR,MAAM;MAAEtR,CAAC,EAAEV;IAAI,CAAE;IAChD,IAAI,CAACwkC,IAAI,CAACrpC,SAAS,CAACi2C,GAAG,CAAC,CAAC;IACzBnzC,MAAM,CACJ,IAAI,CAAC22C,UAAU,EACf,wDAAwD,CACzD;IACD,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC1D,GAAG,CAAC;IAC/B,IAAIqD,UAAU,EAAE;MACd,IAAI,CAACM,cAAc,CAACL,SAAS,CAAC,GAAGD,UAAU;;GAE9C;EAEDN,kCAAG,GAAH,UAAIvwC,KAAY;IAAhB;IACE,IAAM6J,QAAQ,GAAG,IAAIC,QAAQ,EAAU;IACvC,IAAMsnC,OAAO,GAAG;MACdC,CAAC,EAAErxC,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;MACxBy5C,CAAC,EAAEtxC,KAAK,CAACigB,WAAW;KACrB;IACD,IAAMsxB,cAAc,GAAG;MACrBnjC,MAAM,EAAE,GAAG;MACXgjC,OAAO;MACP3nC,UAAU,EAAE,oBAAChQ,OAAiC;QAC5C,IAAMg1C,OAAO,GAAGh1C,OAAO,CAAC,GAAG,CAAW;QACtC,IAAIA,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;UACzByb,KAAI,CAACg7B,aAAa,CAChBkB,OAAO,CAAC,GAAG,CAAC,EACZ3C,OAAO,aACK,KAAK,SACT,IAAI,CACb;UACD5kC,QAAQ,CAACiV,OAAO,CAAC2vB,OAAO,CAAC;SAC1B,MAAM;UACL5kC,QAAQ,CAACoV,MAAM,CAACwvB,OAAO,CAAC;;;KAG7B;IACD,IAAI,CAAC+C,gBAAgB,CAACh0C,IAAI,CAAC+zC,cAAc,CAAC;IAC1C,IAAI,CAACE,oBAAoB,EAAE;IAC3B,IAAMtjC,KAAK,GAAG,IAAI,CAACqjC,gBAAgB,CAAC73C,MAAM,GAAG,CAAC;IAE9C,IAAI,CAAC,IAAI,CAACq3C,UAAU,EAAE;MACpB30C,UAAU,CAAC;QACT,IAAMxB,GAAG,GAAGqa,KAAI,CAACs8B,gBAAgB,CAACrjC,KAAK,CAAC;QACxC,IAAItT,GAAG,KAAKkN,SAAS,IAAIwpC,cAAc,KAAK12C,GAAG,EAAE;UAC/C;;QAEF,OAAOqa,KAAI,CAACs8B,gBAAgB,CAACrjC,KAAK,CAAC;QACnC+G,KAAI,CAACu8B,oBAAoB,EAAE;QAC3B,IAAIv8B,KAAI,CAACu8B,oBAAoB,KAAK,CAAC,EAAE;UACnCv8B,KAAI,CAACs8B,gBAAgB,GAAG,EAAE;;QAE5Bt8B,KAAI,CAAC0rB,IAAI,CAAC,MAAM,GAAGzyB,KAAK,GAAG,0BAA0B,CAAC;QACtDtE,QAAQ,CAACoV,MAAM,CAAC,IAAI/jB,KAAK,CAAC,oBAAoB,CAAC,CAAC;OACjD,EAAE00C,mBAAmB,CAAC;;IAGzB,IAAI,IAAI,CAACoB,UAAU,EAAE;MACnB,IAAI,CAACU,QAAQ,CAACvjC,KAAK,CAAC;;IAGtB,OAAOtE,QAAQ,CAACI,OAAO;GACxB;;;;EAKDsmC,qCAAM,GAAN,UACEvwC,KAAY,EACZ2xC,aAA2B,EAC3Brb,GAAkB,EAClB7sB,UAA2C;IAE3C,IAAM6Z,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;IACvC,IAAM5e,UAAU,GAAGzB,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;IACxC,IAAI,CAAC+oC,IAAI,CAAC,oBAAoB,GAAGn/B,UAAU,GAAG,GAAG,GAAG6hB,OAAO,CAAC;IAC5D,IAAI,CAAC,IAAI,CAACsuB,OAAO,CAACtvB,GAAG,CAAC7gB,UAAU,CAAC,EAAE;MACjC,IAAI,CAACmwC,OAAO,CAACj3C,GAAG,CAAC8G,UAAU,EAAE,IAAIwgB,GAAG,EAAE,CAAC;;IAEzC5nB,MAAM,CACJ2F,KAAK,CAAC+a,cAAc,EAAE,CAACgf,SAAS,EAAE,IAChC,CAAC/5B,KAAK,CAAC+a,cAAc,EAAE,CAAC6U,YAAY,EAAE,EACxC,oDAAoD,CACrD;IACDv1B,MAAM,CACJ,CAAC,IAAI,CAACu3C,OAAO,CAAC/2C,GAAG,CAAC4G,UAAU,CAAE,CAAC6gB,GAAG,CAACgB,OAAO,CAAC,EAC3C,8CAA8C,CAC/C;IACD,IAAMuuB,UAAU,GAAe;MAC7BpoC,UAAU;MACVmvB,MAAM,EAAE+Y,aAAa;MACrB3xC,KAAK;MACLs2B,GAAG;KACJ;IACD,IAAI,CAACsb,OAAO,CAAC/2C,GAAG,CAAC4G,UAAU,CAAE,CAAC9G,GAAG,CAAC2oB,OAAO,EAAEuuB,UAAU,CAAC;IAEtD,IAAI,IAAI,CAACb,UAAU,EAAE;MACnB,IAAI,CAACc,WAAW,CAACD,UAAU,CAAC;;GAE/B;EAEOtB,uCAAQ,GAAhB,UAAiBpiC,KAAa;IAA9B;IACE,IAAMtT,GAAG,GAAG,IAAI,CAAC22C,gBAAgB,CAACrjC,KAAK,CAAC;IACxC,IAAI,CAAC+iC,WAAW,CAAC,GAAG,EAAEr2C,GAAG,CAACu2C,OAAO,EAAE,UAAC33C,OAAiC;MACnE,OAAOyb,KAAI,CAACs8B,gBAAgB,CAACrjC,KAAK,CAAC;MACnC+G,KAAI,CAACu8B,oBAAoB,EAAE;MAC3B,IAAIv8B,KAAI,CAACu8B,oBAAoB,KAAK,CAAC,EAAE;QACnCv8B,KAAI,CAACs8B,gBAAgB,GAAG,EAAE;;MAE5B,IAAI32C,GAAG,CAAC4O,UAAU,EAAE;QAClB5O,GAAG,CAAC4O,UAAU,CAAChQ,OAAO,CAAC;;KAE1B,CAAC;GACH;EAEO82C,0CAAW,GAAnB,UAAoBsB,UAAsB;IAA1C;IACE,IAAM7xC,KAAK,GAAG6xC,UAAU,CAAC7xC,KAAK;IAC9B,IAAMyB,UAAU,GAAGzB,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;IACxC,IAAMyrB,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;IACvC,IAAI,CAACugB,IAAI,CAAC,YAAY,GAAGn/B,UAAU,GAAG,OAAO,GAAG6hB,OAAO,CAAC;IACxD,IAAMyuB,GAAG,GAA6B;MAAA,QAAWV,CAAC,EAAE5vC;IAAU,CAAE;IAEhE,IAAM2M,MAAM,GAAG,GAAG;;IAGlB,IAAIyjC,UAAU,CAACvb,GAAG,EAAE;MAClByb,GAAG,CAAC,GAAG,CAAC,GAAG/xC,KAAK,CAACigB,WAAW,EAAE;MAC9B8xB,GAAG,CAAC,GAAG,CAAC,GAAGF,UAAU,CAACvb,GAAG;;IAG3Byb,GAAG,SAAU,GAAG,CAAC,GAAGF,UAAU,CAACjZ,MAAM,EAAE;IAEvC,IAAI,CAACsY,WAAW,CAAC9iC,MAAM,EAAE2jC,GAAG,EAAE,UAACt4C,OAAiC;MAC9D,IAAMg1C,OAAO,GAAYh1C,OAAO,SAAU,GAAG,CAAC;MAC9C,IAAM2gC,MAAM,GAAG3gC,OAAO,WAAY,GAAG,CAAW;;MAGhD82C,oBAAoB,CAACyB,qBAAqB,CAACvD,OAAO,EAAEzuC,KAAK,CAAC;MAE1D,IAAMiyC,iBAAiB,GACrB/8B,KAAI,CAAC08B,OAAO,CAAC/2C,GAAG,CAAC4G,UAAU,CAAC,IAC5ByT,KAAI,CAAC08B,OAAO,CAAC/2C,GAAG,CAAC4G,UAAU,CAAE,CAAC5G,GAAG,CAACyoB,OAAO,CAAC;;MAE5C,IAAI2uB,iBAAiB,KAAKJ,UAAU,EAAE;QACpC38B,KAAI,CAAC0rB,IAAI,CAAC,iBAAiB,EAAEnnC,OAAO,CAAC;QAErC,IAAI2gC,MAAM,KAAK,IAAI,EAAE;UACnBllB,KAAI,CAACg9B,aAAa,CAACzwC,UAAU,EAAE6hB,OAAO,CAAC;;QAGzC,IAAIuuB,UAAU,CAACpoC,UAAU,EAAE;UACzBooC,UAAU,CAACpoC,UAAU,CAAC2wB,MAAM,EAAEqU,OAAO,CAAC;;;KAG3C,CAAC;GACH;EAEc8B,0CAAqB,GAApC,UAAqC9B,OAAgB,EAAEzuC,KAAY;IACjE,IAAIyuC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIz2C,QAAQ,CAACy2C,OAAO,EAAE,GAAG,CAAC,EAAE;;MAEpE,IAAM0D,QAAQ,GAAGj+B,OAAO,CAACu6B,OAAc,EAAE,GAAG,CAAC;MAC7C,IAAI50C,KAAK,CAACC,OAAO,CAACq4C,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAAC52C,OAAO,CAAC,UAAU,CAAC,EAAE;QAC5D,IAAM62C,SAAS,GACb,eAAe,GAAGpyC,KAAK,CAAC+a,cAAc,EAAE,CAACC,QAAQ,EAAE,CAACnjB,QAAQ,EAAE,GAAG,GAAG;QACtE,IAAMw6C,SAAS,GAAGryC,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;QACvCsD,IAAI,CACF,+DAA+D,IAC7D,6CAA2Ci3C,SAAS,SAAM,KACvDC,SAAS,oDAAiD,EAChE;;;GAGN;;;;EAKD9B,+CAAgB,GAAhB,UAAiBd,KAAa;IAC5B,IAAI,CAAC6C,UAAU,GAAG7C,KAAK;IACvB,IAAI,CAAC7O,IAAI,CAAC,sBAAsB,CAAC;IACjC,IAAI,IAAI,CAAC0R,UAAU,EAAE;MACnB,IAAI,CAACC,OAAO,EAAE;KACf,MAAM;;;MAGL,IAAI,IAAI,CAACvB,UAAU,EAAE;QACnB,IAAI,CAACE,WAAW,CAAC,QAAQ,EAAE,EAAE,EAAE,cAAQ,CAAC;;;IAI5C,IAAI,CAACsB,sCAAsC,CAAC/C,KAAK,CAAC;GACnD;EAEOc,qEAAsC,GAA9C,UAA+CkC,UAAkB;;;IAG/D,IAAMC,gBAAgB,GAAGD,UAAU,IAAIA,UAAU,CAAC94C,MAAM,KAAK,EAAE;IAC/D,IAAI+4C,gBAAgB,IAAIC,OAAO,CAACF,UAAU,CAAC,EAAE;MAC3C,IAAI,CAAC7R,IAAI,CACP,+DAA+D,CAChE;MACD,IAAI,CAACgS,kBAAkB,GAAG/C,8BAA8B;;GAE3D;;;;;EAMDU,sCAAO,GAAP;IAAA;IACE,IAAI,IAAI,CAACS,UAAU,IAAI,IAAI,CAACsB,UAAU,EAAE;MACtC,IAAMO,OAAK,GAAG,IAAI,CAACP,UAAU;MAC7B,IAAMQ,UAAU,GAAGC,aAAa,CAACF,OAAK,CAAC,GAAG,MAAM,GAAG,OAAO;MAC1D,IAAMG,WAAW,GAA6B;QAAEC,IAAI,EAAEJ;MAAK,CAAE;MAC7D,IAAI,IAAI,CAACvC,aAAa,KAAK,IAAI,EAAE;QAC/B0C,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI;OAC7B,MAAM,IAAI,OAAO,IAAI,CAAC1C,aAAa,KAAK,QAAQ,EAAE;QACjD0C,WAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC1C,aAAa;;MAE7C,IAAI,CAACY,WAAW,CACd4B,UAAU,EACVE,WAAW,EACX,UAACE,GAA6B;QAC5B,IAAM9Y,MAAM,GAAG8Y,GAAG,WAAY,GAAG,CAAW;QAC5C,IAAMz3C,IAAI,GAAIy3C,GAAG,SAAU,GAAG,CAAY,IAAI,OAAO;QAErD,IAAIh+B,KAAI,CAACo9B,UAAU,KAAKO,OAAK,EAAE;UAC7B,IAAIzY,MAAM,KAAK,IAAI,EAAE;YACnBllB,KAAI,CAACi+B,sBAAsB,GAAG,CAAC;WAChC,MAAM;;YAELj+B,KAAI,CAACk+B,cAAc,CAAChZ,MAAM,EAAE3+B,IAAI,CAAC;;;OAGtC,CACF;;GAEJ;;;;EAKD80C,uCAAQ,GAAR,UAASvwC,KAAY,EAAEs2B,GAAkB;IACvC,IAAM70B,UAAU,GAAGzB,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;IACxC,IAAMyrB,OAAO,GAAGtjB,KAAK,CAACqgB,eAAe,EAAE;IAEvC,IAAI,CAACugB,IAAI,CAAC,sBAAsB,GAAGn/B,UAAU,GAAG,GAAG,GAAG6hB,OAAO,CAAC;IAE9DjpB,MAAM,CACJ2F,KAAK,CAAC+a,cAAc,EAAE,CAACgf,SAAS,EAAE,IAChC,CAAC/5B,KAAK,CAAC+a,cAAc,EAAE,CAAC6U,YAAY,EAAE,EACxC,sDAAsD,CACvD;IACD,IAAMyjB,MAAM,GAAG,IAAI,CAACnB,aAAa,CAACzwC,UAAU,EAAE6hB,OAAO,CAAC;IACtD,IAAI+vB,MAAM,IAAI,IAAI,CAACrC,UAAU,EAAE;MAC7B,IAAI,CAACsC,aAAa,CAAC7xC,UAAU,EAAE6hB,OAAO,EAAEtjB,KAAK,CAACigB,WAAW,EAAE,EAAEqW,GAAG,CAAC;;GAEpE;EAEOia,4CAAa,GAArB,UACE9uC,UAAkB,EAClB6hB,OAAe,EACfiwB,QAAgB,EAChBjd,GAAkB;IAElB,IAAI,CAACsK,IAAI,CAAC,cAAc,GAAGn/B,UAAU,GAAG,OAAO,GAAG6hB,OAAO,CAAC;IAE1D,IAAMyuB,GAAG,GAA6B;MAAA,QAAWV,CAAC,EAAE5vC;IAAU,CAAE;IAChE,IAAM2M,MAAM,GAAG,GAAG;;IAElB,IAAIkoB,GAAG,EAAE;MACPyb,GAAG,CAAC,GAAG,CAAC,GAAGwB,QAAQ;MACnBxB,GAAG,CAAC,GAAG,CAAC,GAAGzb,GAAG;;IAGhB,IAAI,CAAC4a,WAAW,CAAC9iC,MAAM,EAAE2jC,GAAG,CAAC;GAC9B;;;;EAKDxB,8CAAe,GAAf,UACE9uC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C;IAE3C,IAAI,IAAI,CAACunC,UAAU,EAAE;MACnB,IAAI,CAACwC,iBAAiB,CAAC,GAAG,EAAE/xC,UAAU,EAAEhG,IAAI,EAAEgO,UAAU,CAAC;KAC1D,MAAM;MACL,IAAI,CAACgqC,yBAAyB,CAACj2C,IAAI,CAAC;QAClCiE,UAAU;QACV2M,MAAM,EAAE,GAAG;QACX3S,IAAI;QACJgO,UAAU;OACX,CAAC;;GAEL;;;;EAKD8mC,gDAAiB,GAAjB,UACE9uC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C;IAE3C,IAAI,IAAI,CAACunC,UAAU,EAAE;MACnB,IAAI,CAACwC,iBAAiB,CAAC,IAAI,EAAE/xC,UAAU,EAAEhG,IAAI,EAAEgO,UAAU,CAAC;KAC3D,MAAM;MACL,IAAI,CAACgqC,yBAAyB,CAACj2C,IAAI,CAAC;QAClCiE,UAAU;QACV2M,MAAM,EAAE,IAAI;QACZ3S,IAAI;QACJgO,UAAU;OACX,CAAC;;GAEL;;;;EAKD8mC,iDAAkB,GAAlB,UACE9uC,UAAkB,EAClBgI,UAA2C;IAE3C,IAAI,IAAI,CAACunC,UAAU,EAAE;MACnB,IAAI,CAACwC,iBAAiB,CAAC,IAAI,EAAE/xC,UAAU,EAAE,IAAI,EAAEgI,UAAU,CAAC;KAC3D,MAAM;MACL,IAAI,CAACgqC,yBAAyB,CAACj2C,IAAI,CAAC;QAClCiE,UAAU;QACV2M,MAAM,EAAE,IAAI;QACZ3S,IAAI,EAAE,IAAI;QACVgO,UAAU;OACX,CAAC;;GAEL;EAEO8mC,gDAAiB,GAAzB,UACEniC,MAAc,EACd3M,UAAkB,EAClBhG,IAAa,EACbgO,UAA0C;IAE1C,IAAM2nC,OAAO,GAAG;MAAA,QAAWC,CAAC,EAAE5vC,UAAU;MAAA,QAAWmkC,CAAC,EAAEnqC;IAAI,CAAE;IAC5D,IAAI,CAACmlC,IAAI,CAAC,eAAe,GAAGxyB,MAAM,EAAEgjC,OAAO,CAAC;IAC5C,IAAI,CAACF,WAAW,CAAC9iC,MAAM,EAAEgjC,OAAO,EAAE,UAACsC,QAAkC;MACnE,IAAIjqC,UAAU,EAAE;QACdpN,UAAU,CAAC;UACToN,UAAU,CACRiqC,QAAQ,WAAY,GAAG,CAAW,EAClCA,QAAQ,WAAY,GAAG,CAAW,CACnC;SACF,EAAEp3C,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;KAEpB,CAAC;GACH;;;;EAKDg0C,kCAAG,GAAH,UACE9uC,UAAkB,EAClBhG,IAAa,EACbgO,UAA2C,EAC3C+M,IAAa;IAEb,IAAI,CAACm9B,WAAW,CAAC,GAAG,EAAElyC,UAAU,EAAEhG,IAAI,EAAEgO,UAAU,EAAE+M,IAAI,CAAC;GAC1D;;;;EAKD+5B,oCAAK,GAAL,UACE9uC,UAAkB,EAClBhG,IAAa,EACbgO,UAAiD,EACjD+M,IAAa;IAEb,IAAI,CAACm9B,WAAW,CAAC,GAAG,EAAElyC,UAAU,EAAEhG,IAAI,EAAEgO,UAAU,EAAE+M,IAAI,CAAC;GAC1D;EAED+5B,0CAAW,GAAX,UACEniC,MAAc,EACd3M,UAAkB,EAClBhG,IAAa,EACbgO,UAAiD,EACjD+M,IAAa;IAEb,IAAM46B,OAAO,GAA6B;cAC/BC,CAAC,EAAE5vC,UAAU;cACbmkC,CAAC,EAAEnqC;KACb;IAED,IAAI+a,IAAI,KAAKzO,SAAS,EAAE;MACtBqpC,OAAO,SAAU,GAAG,CAAC,GAAG56B,IAAI;;;IAI9B,IAAI,CAACo9B,gBAAgB,CAACp2C,IAAI,CAAC;MACzB4Q,MAAM;MACNgjC,OAAO;MACP3nC,UAAU;KACX,CAAC;IAEF,IAAI,CAACoqC,oBAAoB,EAAE;IAC3B,IAAM1lC,KAAK,GAAG,IAAI,CAACylC,gBAAgB,CAACj6C,MAAM,GAAG,CAAC;IAE9C,IAAI,IAAI,CAACq3C,UAAU,EAAE;MACnB,IAAI,CAAC8C,QAAQ,CAAC3lC,KAAK,CAAC;KACrB,MAAM;MACL,IAAI,CAACyyB,IAAI,CAAC,iBAAiB,GAAGn/B,UAAU,CAAC;;GAE5C;EAEO8uC,uCAAQ,GAAhB,UAAiBpiC,KAAa;IAA9B;IACE,IAAMC,MAAM,GAAG,IAAI,CAACwlC,gBAAgB,CAACzlC,KAAK,CAAC,CAACC,MAAM;IAClD,IAAMgjC,OAAO,GAAG,IAAI,CAACwC,gBAAgB,CAACzlC,KAAK,CAAC,CAACijC,OAAO;IACpD,IAAM3nC,UAAU,GAAG,IAAI,CAACmqC,gBAAgB,CAACzlC,KAAK,CAAC,CAAC1E,UAAU;IAC1D,IAAI,CAACmqC,gBAAgB,CAACzlC,KAAK,CAAC,CAAC4lC,MAAM,GAAG,IAAI,CAAC/C,UAAU;IAErD,IAAI,CAACE,WAAW,CAAC9iC,MAAM,EAAEgjC,OAAO,EAAE,UAAC33C,OAAiC;MAClEyb,KAAI,CAAC0rB,IAAI,CAACxyB,MAAM,GAAG,WAAW,EAAE3U,OAAO,CAAC;MAExC,OAAOyb,KAAI,CAAC0+B,gBAAgB,CAACzlC,KAAK,CAAC;MACnC+G,KAAI,CAAC2+B,oBAAoB,EAAE;;MAG3B,IAAI3+B,KAAI,CAAC2+B,oBAAoB,KAAK,CAAC,EAAE;QACnC3+B,KAAI,CAAC0+B,gBAAgB,GAAG,EAAE;;MAG5B,IAAInqC,UAAU,EAAE;QACdA,UAAU,CACRhQ,OAAO,WAAY,GAAG,CAAW,EACjCA,OAAO,WAAY,GAAG,CAAW,CAClC;;KAEJ,CAAC;GACH;;;;EAKD82C,0CAAW,GAAX,UAAY7T,KAA+B;IAA3C;;IAEE,IAAI,IAAI,CAACsU,UAAU,EAAE;MACnB,IAAMI,OAAO,GAAG;QAAA,YAAetzC,CAAC,EAAE4+B;MAAK,CAAE;MACzC,IAAI,CAACkE,IAAI,CAAC,aAAa,EAAEwQ,OAAO,CAAC;MAEjC,IAAI,CAACF,WAAW,WAAW,GAAG,EAAEE,OAAO,EAAE,gBAAM;QAC7C,IAAMhX,MAAM,GAAGrqB,MAAM,WAAY,GAAG,CAAC;QACrC,IAAIqqB,MAAM,KAAK,IAAI,EAAE;UACnB,IAAM4Z,WAAW,GAAGjkC,MAAM,WAAY,GAAG,CAAC;UAC1CmF,KAAI,CAAC0rB,IAAI,CAAC,aAAa,EAAE,uBAAuB,GAAGoT,WAAW,CAAC;;OAElE,CAAC;;GAEL;EAEOzD,6CAAc,GAAtB,UAAuB92C,OAAiC;IACtD,IAAI,GAAG,IAAIA,OAAO,EAAE;;MAElB,IAAI,CAACmnC,IAAI,CAAC,eAAe,GAAGrpC,SAAS,CAACkC,OAAO,CAAC,CAAC;MAC/C,IAAMw6C,MAAM,GAAGx6C,OAAO,CAAC,GAAG,CAAW;MACrC,IAAMo3C,UAAU,GAAG,IAAI,CAACM,cAAc,CAAC8C,MAAM,CAAC;MAC9C,IAAIpD,UAAU,EAAE;QACd,OAAO,IAAI,CAACM,cAAc,CAAC8C,MAAM,CAAC;QAClCpD,UAAU,CAACp3C,OAAO,SAAU,GAAG,CAAC,CAAC;;KAEpC,MAAM,IAAI,OAAO,IAAIA,OAAO,EAAE;MAC7B,MAAM,oCAAoC,GAAGA,OAAO,CAAC,OAAO,CAAC;KAC9D,MAAM,IAAI,GAAG,IAAIA,OAAO,EAAE;;MAEzB,IAAI,CAACy6C,WAAW,CAACz6C,OAAO,CAAC,GAAG,CAAW,EAAEA,OAAO,CAAC,GAAG,CAAO,CAAC;;GAE/D;EAEO82C,0CAAW,GAAnB,UAAoBniC,MAAc,EAAEhS,IAA8B;IAChE,IAAI,CAACwkC,IAAI,CAAC,qBAAqB,EAAExyB,MAAM,EAAEhS,IAAI,CAAC;IAC9C,IAAIgS,MAAM,KAAK,GAAG,EAAE;MAClB,IAAI,CAAC8hC,aAAa,CAChB9zC,IAAI,SAAU,GAAG,CAAW,EAC5BA,IAAI,SAAU,GAAG,CAAC,aACN,KAAK,EACjBA,IAAI,CAAC,GAAG,CAAW,CACpB;KACF,MAAM,IAAIgS,MAAM,KAAK,GAAG,EAAE;MACzB,IAAI,CAAC8hC,aAAa,CAChB9zC,IAAI,SAAU,GAAG,CAAW,EAC5BA,IAAI,SAAU,GAAG,CAAC,cACL,IAAI,EACjBA,IAAI,CAAC,GAAG,CAAW,CACpB;KACF,MAAM,IAAIgS,MAAM,KAAK,GAAG,EAAE;MACzB,IAAI,CAAC+lC,gBAAgB,CACnB/3C,IAAI,SAAU,GAAG,CAAW,EAC5BA,IAAI,UAAW,GAAG,CAAc,CACjC;KACF,MAAM,IAAIgS,MAAM,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACglC,cAAc,CACjBh3C,IAAI,gBAAiB,GAAG,CAAW,EACnCA,IAAI,kBAAmB,GAAG,CAAW,CACtC;KACF,MAAM,IAAIgS,MAAM,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACgmC,sBAAsB,CAACh4C,IAAI,CAAC;KAClC,MAAM;MACLpB,KAAK,CACH,4CAA4C,GAC1CzD,SAAS,CAAC6W,MAAM,CAAC,GACjB,oCAAoC,CACvC;;GAEJ;EAEOmiC,uCAAQ,GAAhB,UAAiBxB,SAAiB,EAAEE,SAAiB;IACnD,IAAI,CAACrO,IAAI,CAAC,kBAAkB,CAAC;IAC7B,IAAI,CAACoQ,UAAU,GAAG,IAAI;IACtB,IAAI,CAACqD,8BAA8B,GAAG,IAAIvzB,IAAI,EAAE,CAACC,OAAO,EAAE;IAC1D,IAAI,CAACuzB,gBAAgB,CAACvF,SAAS,CAAC;IAChC,IAAI,CAACpO,aAAa,GAAGsO,SAAS;IAC9B,IAAI,IAAI,CAACsF,gBAAgB,EAAE;MACzB,IAAI,CAACC,iBAAiB,EAAE;;IAE1B,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACF,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACpE,gBAAgB,CAAC,IAAI,CAAC;GAC5B;EAEOI,+CAAgB,GAAxB,UAAyBvvC,OAAe;IAAxC;IACE3G,MAAM,CACJ,CAAC,IAAI,CAAC42C,SAAS,EACf,wDAAwD,CACzD;IAED,IAAI,IAAI,CAACyD,yBAAyB,EAAE;MAClCvS,YAAY,CAAC,IAAI,CAACuS,yBAAyB,CAAC;;;;IAM9C,IAAI,CAACA,yBAAyB,GAAGr4C,UAAU,CAAC;MAC1C6Y,KAAI,CAACw/B,yBAAyB,GAAG,IAAI;MACrCx/B,KAAI,CAACy/B,oBAAoB,EAAE;;KAE5B,EAAEr4C,IAAI,CAACC,KAAK,CAACyE,OAAO,CAAC,CAAQ;GAC/B;EAEOuvC,yCAAU,GAAlB,UAAmBvd,OAAgB;;IAEjC,IACEA,OAAO,IACP,CAAC,IAAI,CAACuL,QAAQ,IACd,IAAI,CAACqW,eAAe,KAAK,IAAI,CAAChC,kBAAkB,EAChD;MACA,IAAI,CAAChS,IAAI,CAAC,yCAAyC,CAAC;MACpD,IAAI,CAACgU,eAAe,GAAGlF,mBAAmB;MAE1C,IAAI,CAAC,IAAI,CAACuB,SAAS,EAAE;QACnB,IAAI,CAACR,gBAAgB,CAAC,CAAC,CAAC;;;IAG5B,IAAI,CAAClS,QAAQ,GAAGvL,OAAO;GACxB;EAEOud,wCAAS,GAAjB,UAAkBsE,MAAe;IAC/B,IAAIA,MAAM,EAAE;MACV,IAAI,CAACjU,IAAI,CAAC,sBAAsB,CAAC;MACjC,IAAI,CAACgU,eAAe,GAAGlF,mBAAmB;MAC1C,IAAI,CAAC,IAAI,CAACuB,SAAS,EAAE;QACnB,IAAI,CAACR,gBAAgB,CAAC,CAAC,CAAC;;KAE3B,MAAM;MACL,IAAI,CAAC7P,IAAI,CAAC,4CAA4C,CAAC;MACvD,IAAI,IAAI,CAACqQ,SAAS,EAAE;QAClB,IAAI,CAACA,SAAS,CAAC7N,KAAK,EAAE;;;GAG3B;EAEOmN,oDAAqB,GAA7B;IACE,IAAI,CAAC3P,IAAI,CAAC,0BAA0B,CAAC;IACrC,IAAI,CAACoQ,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,SAAS,GAAG,IAAI;;IAGrB,IAAI,CAAC6D,uBAAuB,EAAE;;IAG9B,IAAI,CAAC3D,cAAc,GAAG,EAAE;IAExB,IAAI,IAAI,CAAC4D,gBAAgB,EAAE,EAAE;MAC3B,IAAI,CAAC,IAAI,CAACxW,QAAQ,EAAE;QAClB,IAAI,CAACqC,IAAI,CAAC,4CAA4C,CAAC;QACvD,IAAI,CAACgU,eAAe,GAAG,IAAI,CAAChC,kBAAkB;QAC9C,IAAI,CAACoC,0BAA0B,GAAG,IAAIl0B,IAAI,EAAE,CAACC,OAAO,EAAE;OACvD,MAAM,IAAI,IAAI,CAACszB,8BAA8B,EAAE;;QAE9C,IAAMY,6BAA6B,GACjC,IAAIn0B,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAACszB,8BAA8B;QAC5D,IAAIY,6BAA6B,GAAGlF,6BAA6B,EAAE;UACjE,IAAI,CAAC6E,eAAe,GAAGlF,mBAAmB;;QAE5C,IAAI,CAAC2E,8BAA8B,GAAG,IAAI;;MAG5C,IAAMa,2BAA2B,GAC/B,IAAIp0B,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAACi0B,0BAA0B;MACxD,IAAIG,cAAc,GAAG74C,IAAI,CAAC6G,GAAG,CAC3B,CAAC,EACD,IAAI,CAACyxC,eAAe,GAAGM,2BAA2B,CACnD;MACDC,cAAc,GAAG74C,IAAI,CAAC+O,MAAM,EAAE,GAAG8pC,cAAc;MAE/C,IAAI,CAACvU,IAAI,CAAC,yBAAyB,GAAGuU,cAAc,GAAG,IAAI,CAAC;MAC5D,IAAI,CAAC1E,gBAAgB,CAAC0E,cAAc,CAAC;;MAGrC,IAAI,CAACP,eAAe,GAAGt4C,IAAI,CAACuC,GAAG,CAC7B,IAAI,CAAC+zC,kBAAkB,EACvB,IAAI,CAACgC,eAAe,GAAG9E,0BAA0B,CAClD;;IAEH,IAAI,CAACK,gBAAgB,CAAC,KAAK,CAAC;GAC7B;EAEOI,mDAAoB,GAA5B;IAAA;IACE,IAAI,IAAI,CAACwE,gBAAgB,EAAE,EAAE;MAC3B,IAAI,CAACnU,IAAI,CAAC,6BAA6B,CAAC;MACxC,IAAI,CAACoU,0BAA0B,GAAG,IAAIl0B,IAAI,EAAE,CAACC,OAAO,EAAE;MACtD,IAAI,CAACszB,8BAA8B,GAAG,IAAI;MAC1C,IAAMe,eAAa,GAAG,IAAI,CAAC7G,cAAc,CAAC7zC,IAAI,CAAC,IAAI,CAAC;MACpD,IAAM26C,SAAO,GAAG,IAAI,CAAC1J,QAAQ,CAACjxC,IAAI,CAAC,IAAI,CAAC;MACxC,IAAM46C,cAAY,GAAG,IAAI,CAACC,qBAAqB,CAAC76C,IAAI,CAAC,IAAI,CAAC;MAC1D,IAAM86C,QAAM,GAAG,IAAI,CAAC78C,EAAE,GAAG,GAAG,GAAG43C,oBAAoB,CAACkF,iBAAiB,EAAE;MACvE,IAAM/yB,MAAI,GAAG,IAAI;MACjB,IAAMgzB,eAAa,GAAG,IAAI,CAAC/U,aAAa;MACxC,IAAIgV,UAAQ,GAAG,KAAK;MACpB,IAAIC,YAAU,GAAsB,IAAI;MACxC,IAAMC,SAAO,GAAG,SAAVA,SAAO,GAAG;QACd,IAAID,YAAU,EAAE;UACdA,YAAU,CAACxS,KAAK,EAAE;SACnB,MAAM;UACLuS,UAAQ,GAAG,IAAI;UACfL,cAAY,EAAE;;OAEjB;MACD,IAAMQ,aAAa,GAAG,SAAhBA,aAAa,CAAatI,GAAW;QACzCnzC,MAAM,CACJu7C,YAAU,EACV,wDAAwD,CACzD;QACDA,YAAU,CAAC1E,WAAW,CAAC1D,GAAG,CAAC;OAC5B;MAED,IAAI,CAACyD,SAAS,GAAG;QACf7N,KAAK,EAAEyS,SAAO;QACd3E,WAAW,EAAE4E;OACd;MAED,IAAMC,YAAY,GAAG,IAAI,CAACC,kBAAkB;MAC5C,IAAI,CAACA,kBAAkB,GAAG,KAAK;;MAG/B,IAAI,CAAC3F,kBAAkB,CACpB4F,QAAQ,CAACF,YAAY,CAAC,CACtBG,IAAI,CAAC,gBAAM;QACV,IAAI,CAACP,UAAQ,EAAE;UACbl7C,GAAG,CAAC,4CAA4C,CAAC;UACjDioB,MAAI,CAAC4vB,UAAU,GAAGviC,MAAM,IAAIA,MAAM,CAAComC,WAAW;UAC9CP,YAAU,GAAG,IAAI7J,UAAU,CACzByJ,QAAM,EACN9yB,MAAI,CAAC+oB,SAAS,EACd/oB,MAAI,CAACgpB,cAAc,EACnB0J,eAAa,EACbC,SAAO,EACPC,cAAY,eACE,gBAAM;YAClBn6C,IAAI,CAAC8E,MAAM,GAAG,IAAI,GAAGyiB,MAAI,CAAC+oB,SAAS,CAAC5zC,QAAQ,EAAE,GAAG,GAAG,CAAC;YACrD6qB,MAAI,CAAC0zB,SAAS,CAACpG,4BAA4B,CAAC;WAC7C,EACD0F,eAAa,CACd;SACF,MAAM;UACLj7C,GAAG,CAAC,uCAAuC,CAAC;;OAE/C,CAAC,CACDy7C,IAAI,CAAC,IAAI,EAAE,eAAK;QACfxzB,MAAI,CAACke,IAAI,CAAC,uBAAuB,GAAG5lC,KAAK,CAAC;QAC1C,IAAI,CAAC26C,UAAQ,EAAE;UACb,IAAIzgC,KAAI,CAACu2B,SAAS,CAAC9mC,SAAS,EAAE;;;;YAI5BxJ,IAAI,CAACH,KAAK,CAAC;;UAEb66C,SAAO,EAAE;;OAEZ,CAAC;;GAEP;EAEDtF,wCAAS,GAAT,UAAUtwC,MAAc;IACtBxF,GAAG,CAAC,sCAAsC,GAAGwF,MAAM,CAAC;IACpD,IAAI,CAACo2C,iBAAiB,CAACp2C,MAAM,CAAC,GAAG,IAAI;IACrC,IAAI,IAAI,CAACgxC,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAAC7N,KAAK,EAAE;KACvB,MAAM;MACL,IAAI,IAAI,CAACsR,yBAAyB,EAAE;QAClCvS,YAAY,CAAC,IAAI,CAACuS,yBAAyB,CAAC;QAC5C,IAAI,CAACA,yBAAyB,GAAG,IAAI;;MAEvC,IAAI,IAAI,CAAC1D,UAAU,EAAE;QACnB,IAAI,CAACuE,qBAAqB,EAAE;;;GAGjC;EAEDhF,qCAAM,GAAN,UAAOtwC,MAAc;IACnBxF,GAAG,CAAC,kCAAkC,GAAGwF,MAAM,CAAC;IAChD,OAAO,IAAI,CAACo2C,iBAAiB,CAACp2C,MAAM,CAAC;IACrC,IAAImN,OAAO,CAAC,IAAI,CAACipC,iBAAiB,CAAC,EAAE;MACnC,IAAI,CAACzB,eAAe,GAAGlF,mBAAmB;MAC1C,IAAI,CAAC,IAAI,CAACuB,SAAS,EAAE;QACnB,IAAI,CAACR,gBAAgB,CAAC,CAAC,CAAC;;;GAG7B;EAEOF,+CAAgB,GAAxB,UAAyBxB,SAAiB;IACxC,IAAMttB,KAAK,GAAGstB,SAAS,GAAG,IAAIjuB,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9C,IAAI,CAACqvB,mBAAmB,CAAC;MAAEkG,gBAAgB,EAAE70B;IAAK,CAAE,CAAC;GACtD;EAEO8uB,sDAAuB,GAA/B;IACE,KAAK,IAAI72C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACk6C,gBAAgB,CAACj6C,MAAM,EAAED,CAAC,EAAE,EAAE;MACrD,IAAM68C,GAAG,GAAG,IAAI,CAAC3C,gBAAgB,CAACl6C,CAAC,CAAC;MACpC,IAAI68C,GAAG,YAAa,GAAG,IAAIA,GAAG,CAACnF,OAAO,IAAImF,GAAG,CAACxC,MAAM,EAAE;QACpD,IAAIwC,GAAG,CAAC9sC,UAAU,EAAE;UAClB8sC,GAAG,CAAC9sC,UAAU,CAAC,YAAY,CAAC;;QAG9B,OAAO,IAAI,CAACmqC,gBAAgB,CAACl6C,CAAC,CAAC;QAC/B,IAAI,CAACm6C,oBAAoB,EAAE;;;;IAK/B,IAAI,IAAI,CAACA,oBAAoB,KAAK,CAAC,EAAE;MACnC,IAAI,CAACD,gBAAgB,GAAG,EAAE;;GAE7B;EAEOrD,+CAAgB,GAAxB,UAAyB9uC,UAAkB,EAAEzB,KAAiB;;IAE5D,IAAIsjB,OAAO;IACX,IAAI,CAACtjB,KAAK,EAAE;MACVsjB,OAAO,GAAG,SAAS;KACpB,MAAM;MACLA,OAAO,GAAGtjB,KAAK,CAACgV,GAAG,CAAC,WAAC;QAAI,wBAAiB,CAACs8B,CAAC,CAAC;MAAA,EAAC,CAACpyC,IAAI,CAAC,GAAG,CAAC;;IAE1D,IAAMm0C,MAAM,GAAG,IAAI,CAACnB,aAAa,CAACzwC,UAAU,EAAE6hB,OAAO,CAAC;IACtD,IAAI+vB,MAAM,IAAIA,MAAM,CAAC5pC,UAAU,EAAE;MAC/B4pC,MAAM,CAAC5pC,UAAU,CAAC,mBAAmB,CAAC;;GAEzC;EAEO8mC,4CAAa,GAArB,UAAsB9uC,UAAkB,EAAE6hB,OAAe;IACvD,IAAMkzB,oBAAoB,GAAG,IAAIh1C,IAAI,CAACC,UAAU,CAAC,CAAC5J,QAAQ,EAAE,CAAC;IAC7D,IAAIw7C,MAAM;IACV,IAAI,IAAI,CAACzB,OAAO,CAACtvB,GAAG,CAACk0B,oBAAoB,CAAC,EAAE;MAC1C,IAAMxhC,GAAG,GAAG,IAAI,CAAC48B,OAAO,CAAC/2C,GAAG,CAAC27C,oBAAoB,CAAE;MACnDnD,MAAM,GAAGr+B,GAAG,CAACna,GAAG,CAACyoB,OAAO,CAAC;MACzBtO,GAAG,CAAC8N,MAAM,CAACQ,OAAO,CAAC;MACnB,IAAItO,GAAG,CAACoN,IAAI,KAAK,CAAC,EAAE;QAClB,IAAI,CAACwvB,OAAO,CAAC9uB,MAAM,CAAC0zB,oBAAoB,CAAC;;KAE5C,MAAM;;MAELnD,MAAM,GAAGtrC,SAAS;;IAEpB,OAAOsrC,MAAM;GACd;EAEO9C,6CAAc,GAAtB,UAAuBkG,UAAkB,EAAEC,WAAmB;IAC5Dj8C,GAAG,CAAC,sBAAsB,GAAGg8C,UAAU,GAAG,GAAG,GAAGC,WAAW,CAAC;IAC5D,IAAI,CAACpE,UAAU,GAAG,IAAI;IACtB,IAAI,CAAC0D,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAAC/E,SAAS,CAAC7N,KAAK,EAAE;IACtB,IAAIqT,UAAU,KAAK,eAAe,IAAIA,UAAU,KAAK,mBAAmB,EAAE;;;;MAIxE,IAAI,CAACtD,sBAAsB,EAAE;MAC7B,IAAI,IAAI,CAACA,sBAAsB,IAAIlD,4BAA4B,EAAE;;QAE/D,IAAI,CAAC2E,eAAe,GAAG/E,8BAA8B;;;QAIrD,IAAI,CAACQ,kBAAkB,CAACsG,qBAAqB,EAAE;;;GAGpD;EAEOpG,qDAAsB,GAA9B,UAA+Bn0C,IAA8B;IAC3D,IAAI,IAAI,CAACw6C,sBAAsB,EAAE;MAC/B,IAAI,CAACA,sBAAsB,CAACx6C,IAAI,CAAC;KAClC,MAAM;MACL,IAAI,KAAK,IAAIA,IAAI,EAAE;QACjBy6C,OAAO,CAACp8C,GAAG,CACT,YAAY,GAAI2B,IAAI,CAAC,KAAK,CAAY,CAAC0J,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC,CACrE;;;GAGN;EAEOyqC,4CAAa,GAArB;;;IAEE,IAAI,CAACgC,OAAO,EAAE;;;;MAId,KAAsB,sBAAI,CAACX,OAAO,CAAC/wB,MAAM,EAAE,6CAAE;QAAxC,IAAM8Y,OAAO;;UAChB,KAAyB,wCAAO,CAAC9Y,MAAM,EAAE,8CAAE;YAAtC,IAAMgxB,UAAU;YACnB,IAAI,CAACC,WAAW,CAACD,UAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAIhC,KAAK,IAAIn4C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACk6C,gBAAgB,CAACj6C,MAAM,EAAED,CAAC,EAAE,EAAE;MACrD,IAAI,IAAI,CAACk6C,gBAAgB,CAACl6C,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACo6C,QAAQ,CAACp6C,CAAC,CAAC;;;IAIpB,OAAO,IAAI,CAAC+5C,yBAAyB,CAAC95C,MAAM,EAAE;MAC5C,IAAMy3C,OAAO,GAAG,IAAI,CAACqC,yBAAyB,CAAC3N,KAAK,EAAE;MACtD,IAAI,CAAC0N,iBAAiB,CACpBpC,OAAO,CAAChjC,MAAM,EACdgjC,OAAO,CAAC3vC,UAAU,EAClB2vC,OAAO,CAAC31C,IAAI,EACZ21C,OAAO,CAAC3nC,UAAU,CACnB;;IAGH,KAAK,IAAI/P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC83C,gBAAgB,CAAC73C,MAAM,EAAED,CAAC,EAAE,EAAE;MACrD,IAAI,IAAI,CAAC83C,gBAAgB,CAAC93C,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACg4C,QAAQ,CAACh4C,CAAC,CAAC;;;GAGrB;;;;EAKO62C,gDAAiB,GAAzB;IACE,IAAM7T,KAAK,GAA4B,EAAE;IAEzC,IAAIoa,UAAU,GAAG,IAAI;IACrB,IAAI/6C,SAAS,EAAE,EAAE;MACf,IAAI,IAAI,CAAC0vC,SAAS,CAAC9mC,SAAS,EAAE;QAC5BmyC,UAAU,GAAG,YAAY;OAC1B,MAAM;QACLA,UAAU,GAAG,MAAM;;;IAIvBpa,KAAK,CAAC,MAAM,GAAGoa,UAAU,GAAG,GAAG,GAAG5P,WAAW,CAACphC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;IAEtE,IAAI44B,eAAe,EAAE,EAAE;MACrBhC,KAAK,CAAC,mBAAmB,CAAC,GAAG,CAAC;KAC/B,MAAM,IAAIqa,aAAa,EAAE,EAAE;MAC1Bra,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC;;IAEpC,IAAI,CAACG,WAAW,CAACH,KAAK,CAAC;GACxB;EAEO6T,+CAAgB,GAAxB;IACE,IAAMsE,MAAM,GAAGjW,aAAa,CAAC8R,WAAW,EAAE,CAACsG,eAAe,EAAE;IAC5D,OAAO5pC,OAAO,CAAC,IAAI,CAACipC,iBAAiB,CAAC,IAAIxB,MAAM;GACjD;EAj6BctE,gDAA2B,GAAG,CAAC;;;;EAK/BA,sCAAiB,GAAG,CAAC;EA65BtC,2BAAC;CAAA,CA78ByCf,aAAa;;ACzFvD;;;;;;;;;;;;;;;;AA+BA;;;;;AAKA;EAAwChjC;;;;;;;EAwCtC,4BACUi/B,SAAmB,EACnByE,aAKC,EACDG,kBAAqC;IAR/C,YAUEv4B,iBAAO;IATC5C,eAAS,GAATu2B,SAAS;IACTv2B,mBAAa,GAAbg7B,aAAa;IAMbh7B,wBAAkB,GAAlBm7B,kBAAkB;;IA1CpBn7B,UAAI,GAAiCpa,UAAU,CAAC,SAAS,CAAC;;;;;;;IAQ1Doa,cAAQ,GAA4B,EAAE;;;EAb9C+hC,wCAAW,GAAX,UAAYva,KAA+B;IACzC,MAAM,IAAIxhC,KAAK,CAAC,yBAAyB,CAAC;GAC3C;;;;;;;EAmBM+7C,+BAAY,GAAnB,UAAoBj3C,KAAY,EAAEs2B,GAAmB;IACnD,IAAIA,GAAG,KAAKvuB,SAAS,EAAE;MACrB,OAAO,MAAM,GAAGuuB,GAAG;KACpB,MAAM;MACLj8B,MAAM,CACJ2F,KAAK,CAAC+a,cAAc,EAAE,CAACgf,SAAS,EAAE,EAClC,gDAAgD,CACjD;MACD,OAAO/5B,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;;GAE/B;;EAsBDo/C,mCAAM,GAAN,UACEj3C,KAAY,EACZ2xC,aAA2B,EAC3Brb,GAAkB,EAClB7sB,UAA2C;IAJ7C;IAME,IAAMhI,UAAU,GAAGzB,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;IACxC,IAAI,CAAC+oC,IAAI,CACP,oBAAoB,GAAGn/B,UAAU,GAAG,GAAG,GAAGzB,KAAK,CAACqgB,eAAe,EAAE,CAClE;;IAGD,IAAM62B,QAAQ,GAAGD,kBAAkB,CAACE,YAAY,CAACn3C,KAAK,EAAEs2B,GAAG,CAAC;IAC5D,IAAM8gB,UAAU,GAAG,EAAE;IACrB,IAAI,CAACC,QAAQ,CAACH,QAAQ,CAAC,GAAGE,UAAU;IAEpC,IAAME,qBAAqB,GAAGt3C,KAAK,CAChC+a,cAAc,EAAE,CAChBw8B,2BAA2B,EAAE;IAEhC,IAAI,CAACC,YAAY,CACf/1C,UAAU,GAAG,OAAO,EACpB61C,qBAAqB,EACrB,UAACt8C,KAAK,EAAE+U,MAAM;MACZ,IAAItU,IAAI,GAAGsU,MAAM;MAEjB,IAAI/U,KAAK,KAAK,GAAG,EAAE;QACjBS,IAAI,GAAG,IAAI;QACXT,KAAK,GAAG,IAAI;;MAGd,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClBka,KAAI,CAACg7B,aAAa,CAACzuC,UAAU,EAAEhG,IAAI,cAAe,KAAK,EAAE66B,GAAG,CAAC;;MAG/D,IAAIpiB,OAAO,CAACgB,KAAI,CAACmiC,QAAQ,EAAEH,QAAQ,CAAC,KAAKE,UAAU,EAAE;QACnD,IAAIK,QAAM;QACV,IAAI,CAACz8C,KAAK,EAAE;UACVy8C,QAAM,GAAG,IAAI;SACd,MAAM,IAAIz8C,KAAK,KAAK,GAAG,EAAE;UACxBy8C,QAAM,GAAG,mBAAmB;SAC7B,MAAM;UACLA,QAAM,GAAG,aAAa,GAAGz8C,KAAK;;QAGhCyO,UAAU,CAACguC,QAAM,EAAE,IAAI,CAAC;;KAE3B,CACF;GACF;;EAGDR,qCAAQ,GAAR,UAASj3C,KAAY,EAAEs2B,GAAkB;IACvC,IAAM4gB,QAAQ,GAAGD,kBAAkB,CAACE,YAAY,CAACn3C,KAAK,EAAEs2B,GAAG,CAAC;IAC5D,OAAO,IAAI,CAAC+gB,QAAQ,CAACH,QAAQ,CAAC;GAC/B;EAEDD,gCAAG,GAAH,UAAIj3C,KAAY;IAAhB;IACE,IAAMs3C,qBAAqB,GAAGt3C,KAAK,CAChC+a,cAAc,EAAE,CAChBw8B,2BAA2B,EAAE;IAEhC,IAAM91C,UAAU,GAAGzB,KAAK,CAACE,IAAI,CAACrI,QAAQ,EAAE;IAExC,IAAMgS,QAAQ,GAAG,IAAIC,QAAQ,EAAU;IAEvC,IAAI,CAAC0tC,YAAY,CACf/1C,UAAU,GAAG,OAAO,EACpB61C,qBAAqB,EACrB,UAACt8C,KAAK,EAAE+U,MAAM;MACZ,IAAItU,IAAI,GAAGsU,MAAM;MAEjB,IAAI/U,KAAK,KAAK,GAAG,EAAE;QACjBS,IAAI,GAAG,IAAI;QACXT,KAAK,GAAG,IAAI;;MAGd,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClBka,KAAI,CAACg7B,aAAa,CAChBzuC,UAAU,EACVhG,IAAI,cACS,KAAK,UACT,IAAI,CACd;QACDoO,QAAQ,CAACiV,OAAO,CAACrjB,IAAc,CAAC;OACjC,MAAM;QACLoO,QAAQ,CAACoV,MAAM,CAAC,IAAI/jB,KAAK,CAACO,IAAc,CAAC,CAAC;;KAE7C,CACF;IACD,OAAOoO,QAAQ,CAACI,OAAO;GACxB;;EAGDgtC,6CAAgB,GAAhB,UAAiBxH,KAAa;;GAE7B;;;;;;;;;;EAWOwH,yCAAY,GAApB,UACEx1C,UAAkB,EAClB61C,qBAA4D,EAC5D75B,QAA0D;IAH5D;IAEE;MAAA65B,0BAA4D;IAAA;IAG5DA,qBAAqB,CAAC,QAAQ,CAAC,GAAG,QAAQ;IAE1C,IAAI,CAACjH,kBAAkB,CACpB4F,QAAQ,mBAAmB,KAAK,CAAC,CACjCC,IAAI,CAAC,uBAAa;MACjB,IAAMwB,SAAS,GAAGC,aAAa,IAAIA,aAAa,CAACxB,WAAW;MAC5D,IAAIuB,SAAS,EAAE;QACbJ,qBAAqB,CAAC,MAAM,CAAC,GAAGI,SAAS;;MAG3C,IAAMtR,GAAG,GACP,CAAClxB,KAAI,CAACu2B,SAAS,CAACjnC,MAAM,GAAG,UAAU,GAAG,SAAS,IAC/C0Q,KAAI,CAACu2B,SAAS,CAAClnC,IAAI,GACnB9C,UAAU,GACV,GAAG,GACH,KAAK,GACLyT,KAAI,CAACu2B,SAAS,CAAChnC,SAAS,GACxBmzC,WAAW,CAACN,qBAAqB,CAAC;MAEpCpiC,KAAI,CAAC0rB,IAAI,CAAC,2BAA2B,GAAGwF,GAAG,CAAC;MAC5C,IAAMyR,GAAG,GAAG,IAAIC,cAAc,EAAE;MAChCD,GAAG,CAAC/Q,kBAAkB,GAAG;QACvB,IAAIrpB,QAAQ,IAAIo6B,GAAG,CAAC57C,UAAU,KAAK,CAAC,EAAE;UACpCiZ,KAAI,CAAC0rB,IAAI,CACP,oBAAoB,GAAGwF,GAAG,GAAG,oBAAoB,EACjDyR,GAAG,CAACzd,MAAM,EACV,WAAW,EACXyd,GAAG,CAACE,YAAY,CACjB;UACD,IAAI7E,GAAG,GAAG,IAAI;UACd,IAAI2E,GAAG,CAACzd,MAAM,IAAI,GAAG,IAAIyd,GAAG,CAACzd,MAAM,GAAG,GAAG,EAAE;YACzC,IAAI;cACF8Y,GAAG,GAAGx7C,QAAQ,CAACmgD,GAAG,CAACE,YAAY,CAAC;aACjC,CAAC,OAAO1/C,CAAC,EAAE;cACV8C,IAAI,CACF,oCAAoC,GAClCirC,GAAG,GACH,IAAI,GACJyR,GAAG,CAACE,YAAY,CACnB;;YAEHt6B,QAAQ,CAAC,IAAI,EAAEy1B,GAAG,CAAC;WACpB,MAAM;;YAEL,IAAI2E,GAAG,CAACzd,MAAM,KAAK,GAAG,IAAIyd,GAAG,CAACzd,MAAM,KAAK,GAAG,EAAE;cAC5Cj/B,IAAI,CACF,qCAAqC,GACnCirC,GAAG,GACH,WAAW,GACXyR,GAAG,CAACzd,MAAM,CACb;;YAEH3c,QAAQ,CAACo6B,GAAG,CAACzd,MAAM,CAAC;;UAEtB3c,QAAQ,GAAG,IAAI;;OAElB;MAEDo6B,GAAG,CAAChT,IAAI,CAAC,KAAK,EAAEuB,GAAG,mBAAoB,IAAI,CAAC;MAC5CyR,GAAG,CAAC5N,IAAI,EAAE;KACX,CAAC;GACL;EACH,yBAAC;AAAD,CApOA,CAAwCuF,aAAa;;ACpCrD;;;;;;;;;;;;;;;;AAiDA,IAAMwI,gBAAgB,GAAG,gBAAgB;AAEzC;;;AAGA;EA6BE,cACSvM,SAAmB,EAClBwM,gBAAyB,EAC1BC,GAAoB,EACpB7H,kBAAqC;IAHrC,cAAS,GAAT5E,SAAS;IACR,qBAAgB,GAAhBwM,gBAAgB;IACjB,QAAG,GAAHC,GAAG;IACH,uBAAkB,GAAlB7H,kBAAkB;IA7B3B,oBAAe,GAAG,CAAC;IAKX,mBAAc,GAAyB,IAAI;IAC3C,gBAAW,GAAG,IAAIvT,UAAU,EAAE;IAC9B,iBAAY,GAAG,CAAC;IAOhB,iCAA4B,GAEzB,IAAI;;IAIP,kBAAa,GAAG,IAAI5a,kBAAkB,EAAE;;IAGhD,0BAAqB,GAAgC,IAAI;;IASvD,IAAI,CAAChrB,GAAG,GAAG,IAAI,CAACu0C,SAAS,CAAChmC,WAAW,EAAE;;EAGzC0yC,oBAAK,GAAL;IAAA;IACE,IAAI,CAACtX,MAAM,GAAGtF,YAAY,CAACuF,aAAa,CAAC,IAAI,CAAC2K,SAAS,CAAC;IAExD,IAAI,IAAI,CAACwM,gBAAgB,IAAIt3C,YAAY,EAAE,EAAE;MAC3C,IAAI,CAAC07B,OAAO,GAAG,IAAI4a,kBAAkB,CACnC,IAAI,CAACxL,SAAS,EACd,IAAI,CAACyE,aAAa,CAACx1C,IAAI,CAAC,IAAI,CAAC,EAC7B,IAAI,CAAC21C,kBAAkB,CACxB;;MAGDh0C,UAAU,CAAC,IAAI,CAAC8zC,gBAAgB,CAACz1C,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;KACtD,MAAM;MACL,IAAM09C,YAAY,GAAG,IAAI,CAACF,GAAG,CAACrQ,OAAO,CAAC,8BAA8B,CAAC;;MAErE,IAAI,OAAOuQ,YAAY,KAAK,WAAW,IAAIA,YAAY,KAAK,IAAI,EAAE;QAChE,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;UACpC,MAAM,IAAIl9C,KAAK,CACb,oEAAoE,CACrE;;QAEH,IAAI;UACF3D,SAAS,CAAC6gD,YAAY,CAAC;SACxB,CAAC,OAAO//C,CAAC,EAAE;UACV,MAAM,IAAI6C,KAAK,CAAC,iCAAiC,GAAG7C,CAAC,CAAC;;;MAI1D,IAAI,CAACggD,qBAAqB,GAAG,IAAI9H,oBAAoB,CACnD,IAAI,CAAC9E,SAAS,EACd,IAAI,CAACyM,GAAG,CAACrQ,OAAO,CAACyQ,KAAK,EACtB,IAAI,CAACpI,aAAa,CAACx1C,IAAI,CAAC,IAAI,CAAC,EAC7B,IAAI,CAACy1C,gBAAgB,CAACz1C,IAAI,CAAC,IAAI,CAAC,EAChC,IAAI,CAAC01C,mBAAmB,CAAC11C,IAAI,CAAC,IAAI,CAAC,EACnC,IAAI,CAAC21C,kBAAkB,EACvB+H,YAAY,CACb;MAED,IAAI,CAAC/b,OAAO,GAAG,IAAI,CAACgc,qBAAqB;;IAG3C,IAAI,CAAChI,kBAAkB,CAACkI,sBAAsB,CAAC,eAAK;MAClDrjC,KAAI,CAACmnB,OAAO,CAACmc,gBAAgB,CAAC/I,KAAK,CAAC;KACrC,CAAC;;;IAIF,IAAI,CAACgJ,cAAc,GAAGld,YAAY,CAACmd,mBAAmB,CACpD,IAAI,CAACjN,SAAS,EACd;MAAM,WAAIjP,aAAa,CAACtnB,KAAI,CAAC2rB,MAAM,EAAE3rB,KAAI,CAACmnB,OAAO,CAAC;IAAA,EACnD;IAED,IAAI,CAACsc,iBAAiB,EAAE;;IAGxB,IAAI,CAACC,SAAS,GAAG,IAAI5d,cAAc,EAAE;IACrC,IAAI,CAAC6d,aAAa,GAAG,IAAInjB,QAAQ,CAAC;MAChC+C,cAAc,EAAE,wBAACz4B,KAAK,EAAEs2B,GAAG,EAAEqb,aAAa,EAAEloC,UAAU;QACpD,IAAIqvC,UAAU,GAAY,EAAE;QAC5B,IAAMhtC,IAAI,GAAGoJ,KAAI,CAAC0jC,SAAS,CAACpyB,OAAO,CAACxmB,KAAK,CAACE,IAAI,CAAC;;;QAG/C,IAAI,CAAC4L,IAAI,CAACsB,OAAO,EAAE,EAAE;UACnB0rC,UAAU,GAAG5jC,KAAI,CAAC2jC,aAAa,CAACE,oBAAoB,CAClD/4C,KAAK,CAACE,IAAI,EACV4L,IAAI,CACL;UACDzP,UAAU,CAAC;YACToN,UAAU,CAAC,IAAI,CAAC;WACjB,EAAE,CAAC,CAAC;;QAEP,OAAOqvC,UAAU;OAClB;MACDhgB,aAAa,EAAE;KAChB,CAAC;IACF,IAAI,CAACkgB,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC;IAEpC,IAAI,CAACC,eAAe,GAAG,IAAIvjB,QAAQ,CAAC;MAClC+C,cAAc,EAAE,wBAACz4B,KAAK,EAAEs2B,GAAG,EAAEqb,aAAa,EAAEloC,UAAU;QACpDyL,KAAI,CAACmnB,OAAO,CAACgX,MAAM,CAACrzC,KAAK,EAAE2xC,aAAa,EAAErb,GAAG,EAAE,UAAC8D,MAAM,EAAE3+B,IAAI;UAC1D,IAAMyyB,MAAM,GAAGzkB,UAAU,CAAC2wB,MAAM,EAAE3+B,IAAI,CAAC;UACvCyZ,KAAI,CAACgkC,WAAW,CAACC,yBAAyB,CAACn5C,KAAK,CAACE,IAAI,EAAEguB,MAAM,CAAC;SAC/D,CAAC;;QAEF,OAAO,EAAE;OACV;MACD4K,aAAa,EAAE,uBAAC94B,KAAK,EAAEs2B,GAAG;QACxBphB,KAAI,CAACmnB,OAAO,CAAC+c,QAAQ,CAACp5C,KAAK,EAAEs2B,GAAG,CAAC;;KAEpC,CAAC;GACH;;;;EAKD6hB,uBAAQ,GAAR;IACE,OACE,CAAC,IAAI,CAAC1M,SAAS,CAACjnC,MAAM,GAAG,UAAU,GAAG,SAAS,IAAI,IAAI,CAACinC,SAAS,CAAClnC,IAAI;GAEzE;;;;EAKD4zC,mBAAI,GAAJ;IACE,OAAO,IAAI,CAAC1M,SAAS,CAAChnC,SAAS;GAChC;;;;EAKD0zC,yBAAU,GAAV;IACE,IAAMkB,UAAU,GAAG,IAAI,CAACT,SAAS,CAACpyB,OAAO,CACvC,IAAIhlB,IAAI,CAAC,wBAAwB,CAAC,CACnC;IACD,IAAM83C,MAAM,GAAID,UAAU,CAAC3sC,GAAG,EAAa,IAAI,CAAC;IAChD,OAAO,IAAIoU,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGu4B,MAAM;GACrC;;;;EAKDnB,mCAAoB,GAApB;IACE,OAAOv3B,kBAAkB,CAAC;MACxBmuB,SAAS,EAAE,IAAI,CAACwK,UAAU;KAC3B,CAAC;GACH;;;;EAKOpB,4BAAa,GAArB,UACE12C,UAAkB,EAClBhG,IAAa,EACb+9C,OAAgB,EAChBljB,GAAkB;;IAGlB,IAAI,CAACmjB,eAAe,EAAE;IACtB,IAAMv5C,IAAI,GAAG,IAAIsB,IAAI,CAACC,UAAU,CAAC;IACjChG,IAAI,GAAG,IAAI,CAACi+C,4BAA4B,GACpC,IAAI,CAACA,4BAA4B,CAACj4C,UAAU,EAAEhG,IAAI,CAAC,GACnDA,IAAI;IACR,IAAIyyB,MAAM,GAAG,EAAE;IACf,IAAIoI,GAAG,EAAE;MACP,IAAIkjB,OAAO,EAAE;QACX,IAAMG,cAAc,GAAG3kC,GAAG,CACxBvZ,IAAgC,EAChC,UAACm+C,GAAY;UAAK,qBAAY,CAACA,GAAG,CAAC;QAAA,EACpC;QACD1rB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACY,qBAAqB,CACjD35C,IAAI,EACJy5C,cAAc,EACdrjB,GAAG,CACJ;OACF,MAAM;QACL,IAAMwjB,UAAU,GAAG7qC,cAAY,CAACxT,IAAI,CAAC;QACrCyyB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACc,yBAAyB,CACrD75C,IAAI,EACJ45C,UAAU,EACVxjB,GAAG,CACJ;;KAEJ,MAAM,IAAIkjB,OAAO,EAAE;MAClB,IAAM7sB,eAAe,GAAG3X,GAAG,CACzBvZ,IAAgC,EAChC,UAACm+C,GAAY;QAAK,qBAAY,CAACA,GAAG,CAAC;MAAA,EACpC;MACD1rB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACe,gBAAgB,CAAC95C,IAAI,EAAEysB,eAAe,CAAC;KACtE,MAAM;MACL,IAAMzT,IAAI,GAAGjK,cAAY,CAACxT,IAAI,CAAC;MAC/ByyB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACF,oBAAoB,CAAC74C,IAAI,EAAEgZ,IAAI,CAAC;;IAEhE,IAAIiO,YAAY,GAAGjnB,IAAI;IACvB,IAAIguB,MAAM,CAACv0B,MAAM,GAAG,CAAC,EAAE;;;MAGrBwtB,YAAY,GAAG,IAAI,CAAC8yB,kBAAkB,CAAC/5C,IAAI,CAAC;;IAE9C,IAAI,CAACg5C,WAAW,CAACC,yBAAyB,CAAChyB,YAAY,EAAE+G,MAAM,CAAC;GACjE;;EAGDiqB,mCAAoB,GAApB,UAAqB16B,QAAqD;IACxE,IAAI,CAACi8B,4BAA4B,GAAGj8B,QAAQ;GAC7C;EAEO06B,+BAAgB,GAAxB,UAAyB+B,aAAsB;IAC7C,IAAI,CAAClB,WAAW,CAAC,WAAW,EAAEkB,aAAa,CAAC;IAC5C,IAAIA,aAAa,KAAK,KAAK,EAAE;MAC3B,IAAI,CAACC,sBAAsB,EAAE;;GAEhC;EAEOhC,kCAAmB,GAA3B,UAA4B9lB,OAAe;IAA3C;IACEr0B,IAAI,CAACq0B,OAAO,EAAE,UAACn7B,GAAW,EAAEC,KAAc;MACxC+d,KAAI,CAAC8jC,WAAW,CAAC9hD,GAAG,EAAEC,KAAK,CAAC;KAC7B,CAAC;GACH;EAEOghD,0BAAW,GAAnB,UAAoB12C,UAAkB,EAAEtK,KAAc;IACpD,IAAM+I,IAAI,GAAG,IAAIsB,IAAI,CAAC,SAAS,GAAGC,UAAU,CAAC;IAC7C,IAAM0K,OAAO,GAAG8C,cAAY,CAAC9X,KAAK,CAAC;IACnC,IAAI,CAACyhD,SAAS,CAACwB,cAAc,CAACl6C,IAAI,EAAEiM,OAAO,CAAC;IAC5C,IAAM+hB,MAAM,GAAG,IAAI,CAAC2qB,aAAa,CAACE,oBAAoB,CAAC74C,IAAI,EAAEiM,OAAO,CAAC;IACrE,IAAI,CAAC+sC,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAEguB,MAAM,CAAC;GACzD;EAEOiqB,8BAAe,GAAvB;IACE,OAAO,IAAI,CAACkC,YAAY,EAAE;GAC3B;;;;;;;;;;;;;;;;EAiBDlC,uBAAQ,GAAR,UAASn4C,KAAY;IAArB;;IAEE,IAAMs6C,MAAM,GAAG,IAAI,CAACrB,eAAe,CAACt4B,sBAAsB,CAAC3gB,KAAK,CAACE,IAAI,CAAC;IACtE,IAAI,CAACo6C,MAAM,CAACltC,OAAO,EAAE,EAAE;MACrB,OAAOmtC,OAAO,CAACz7B,OAAO,CACpB,IAAIrF,YAAY,CACd6gC,MAAM,EACNt6C,KAAK,CAACia,MAAM,EAAE,EACdja,KAAK,CAAC+a,cAAc,EAAE,CAACC,QAAQ,EAAE,CAClC,CACF;;IAEH,OAAO,IAAI,CAACqhB,OAAO,CAACxhC,GAAG,CAACmF,KAAK,CAAC,CAACk2C,IAAI,CACjC,iBAAO;MACL,IAAMpqC,IAAI,GAAGmD,cAAY,CAACw/B,OAAiB,CAAC;MAC5C,IAAMvgB,MAAM,GAAGhZ,KAAI,CAAC+jC,eAAe,CAACF,oBAAoB,CACtD/4C,KAAK,CAACE,IAAI,EACV4L,IAAI,CACL;MACDoJ,KAAI,CAACgkC,WAAW,CAACsB,iBAAiB,CAACx6C,KAAK,CAACE,IAAI,EAAEguB,MAAM,CAAC;MACtD,OAAOqsB,OAAO,CAACz7B,OAAO,CACpB,IAAIrF,YAAY,CACd3N,IAAI,EACJ9L,KAAK,CAACia,MAAM,EAAE,EACdja,KAAK,CAAC+a,cAAc,EAAE,CAACC,QAAQ,EAAE,CAClC,CACF;KACF,EACD,aAAG;MACD9F,KAAI,CAAC0rB,IAAI,CAAC,gBAAgB,GAAGrpC,SAAS,CAACyI,KAAK,CAAC,GAAG,WAAW,GAAGgf,GAAG,CAAC;MAClE,OAAOu7B,OAAO,CAACt7B,MAAM,CAAC,IAAI/jB,KAAK,CAAC8jB,GAAa,CAAC,CAAC;KAChD,CACF;GACF;EAEDm5B,8BAAe,GAAf,UACEj4C,IAAU,EACVu6C,MAAe,EACfzkC,WAAmC,EACnCvM,UAAyE;IAJ3E;IAME,IAAI,CAACm3B,IAAI,CAAC,KAAK,EAAE;MACf1gC,IAAI,EAAEA,IAAI,CAACrI,QAAQ,EAAE;MACrBV,KAAK,EAAEsjD,MAAM;MACb/yC,QAAQ,EAAEsO;KACX,CAAC;;;IAIF,IAAMkL,YAAY,GAAG,IAAI,CAACw5B,oBAAoB,EAAE;IAChD,IAAMC,iBAAiB,GAAG1rC,cAAY,CAACwrC,MAAM,EAAEzkC,WAAW,CAAC;IAC3D,IAAMuL,QAAQ,GAAG,IAAI,CAAC03B,eAAe,CAACt4B,sBAAsB,CAACzgB,IAAI,CAAC;IAClE,IAAMiM,OAAO,GAAG2V,4BAA4B,CAC1C64B,iBAAiB,EACjBp5B,QAAQ,EACRL,YAAY,CACb;IAED,IAAM6R,OAAO,GAAG,IAAI,CAAC6nB,eAAe,EAAE;IACtC,IAAM1sB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAAC4B,kBAAkB,CACpD36C,IAAI,EACJiM,OAAO,EACP4mB,OAAO,EACP,IAAI,CACL;IACD,IAAI,CAACmmB,WAAW,CAAC7b,WAAW,CAACnP,MAAM,CAAC;IACpC,IAAI,CAACmO,OAAO,CAACka,GAAG,CACdr2C,IAAI,CAACrI,QAAQ,EAAE,EACf8iD,iBAAiB,CAACjuC,GAAG,aAAa,IAAI,CAAC,EACvC,UAAC0tB,MAAM,EAAE4Z,WAAW;MAClB,IAAM8G,OAAO,GAAG1gB,MAAM,KAAK,IAAI;MAC/B,IAAI,CAAC0gB,OAAO,EAAE;QACZ3/C,IAAI,CAAC,SAAS,GAAG+E,IAAI,GAAG,WAAW,GAAGk6B,MAAM,CAAC;;MAG/C,IAAM2gB,WAAW,GAAG7lC,KAAI,CAAC+jC,eAAe,CAAC/uB,YAAY,CACnD6I,OAAO,EACP,CAAC+nB,OAAO,CACT;MACD5lC,KAAI,CAACgkC,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAE66C,WAAW,CAAC;MAC7D7lC,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;KAC7D,CACF;IACD,IAAM7sB,YAAY,GAAG,IAAI,CAAC8zB,kBAAkB,CAAC/6C,IAAI,CAAC;IAClD,IAAI,CAAC+5C,kBAAkB,CAAC9yB,YAAY,CAAC;;IAErC,IAAI,CAAC+xB,WAAW,CAACC,yBAAyB,CAAChyB,YAAY,EAAE,EAAE,CAAC;GAC7D;EAEDgxB,qBAAM,GAAN,UACEj4C,IAAU,EACVg7C,eAAyC,EACzCzxC,UAAyE;IAH3E;IAKE,IAAI,CAACm3B,IAAI,CAAC,QAAQ,EAAE;MAAE1gC,IAAI,EAAEA,IAAI,CAACrI,QAAQ,EAAE;MAAEV,KAAK,EAAE+jD;IAAe,CAAE,CAAC;;IAGtE,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAMj6B,YAAY,GAAG,IAAI,CAACw5B,oBAAoB,EAAE;IAChD,IAAM/tB,eAAe,GAA0B,EAAE;IACjD3uB,IAAI,CAACk9C,eAAe,EAAE,UAACE,UAAkB,EAAEC,YAAqB;MAC9DF,KAAK,GAAG,KAAK;MACbxuB,eAAe,CAACyuB,UAAU,CAAC,GAAGx5B,wBAAwB,CACpD1hB,IAAI,CAACqD,KAAK,CAAC63C,UAAU,CAAC,EACtBnsC,cAAY,CAACosC,YAAY,CAAC,EAC1BnmC,KAAI,CAAC+jC,eAAe,EACpB/3B,YAAY,CACb;KACF,CAAC;IAEF,IAAI,CAACi6B,KAAK,EAAE;MACV,IAAMG,SAAO,GAAG,IAAI,CAACV,eAAe,EAAE;MACtC,IAAM1sB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACsC,cAAc,CAChDr7C,IAAI,EACJysB,eAAe,EACf2uB,SAAO,CACR;MACD,IAAI,CAACpC,WAAW,CAAC7b,WAAW,CAACnP,MAAM,CAAC;MACpC,IAAI,CAACmO,OAAO,CAACtS,KAAK,CAChB7pB,IAAI,CAACrI,QAAQ,EAAE,EACfqjD,eAAe,EACf,UAAC9gB,MAAM,EAAE4Z,WAAW;QAClB,IAAM8G,OAAO,GAAG1gB,MAAM,KAAK,IAAI;QAC/B,IAAI,CAAC0gB,OAAO,EAAE;UACZ3/C,IAAI,CAAC,YAAY,GAAG+E,IAAI,GAAG,WAAW,GAAGk6B,MAAM,CAAC;;QAGlD,IAAM2gB,WAAW,GAAG7lC,KAAI,CAAC+jC,eAAe,CAAC/uB,YAAY,CACnDoxB,SAAO,EACP,CAACR,OAAO,CACT;QACD,IAAM3zB,YAAY,GAChB4zB,WAAW,CAACphD,MAAM,GAAG,CAAC,GAAGub,KAAI,CAAC+kC,kBAAkB,CAAC/5C,IAAI,CAAC,GAAGA,IAAI;QAC/DgV,KAAI,CAACgkC,WAAW,CAACC,yBAAyB,CAAChyB,YAAY,EAAE4zB,WAAW,CAAC;QACrE7lC,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;OAC7D,CACF;MAEDh2C,IAAI,CAACk9C,eAAe,EAAE,UAAC3d,WAAmB;QACxC,IAAMpW,YAAY,GAAGjS,KAAI,CAAC+lC,kBAAkB,CAAC/6C,IAAI,CAACqD,KAAK,CAACg6B,WAAW,CAAC,CAAC;QACrEroB,KAAI,CAAC+kC,kBAAkB,CAAC9yB,YAAY,CAAC;OACtC,CAAC;;MAGF,IAAI,CAAC+xB,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAE,EAAE,CAAC;KACrD,MAAM;MACLzF,GAAG,CAAC,sDAAsD,CAAC;MAC3D,IAAI,CAACugD,sBAAsB,CAACvxC,UAAU,EAAE,IAAI,CAAC;;GAEhD;;;;EAKO0uC,qCAAsB,GAA9B;IAAA;IACE,IAAI,CAACvX,IAAI,CAAC,oBAAoB,CAAC;IAE/B,IAAM1f,YAAY,GAAG,IAAI,CAACw5B,oBAAoB,EAAE;IAChD,IAAMc,wBAAwB,GAAG,IAAIt5B,kBAAkB,EAAE;IACzD,IAAI,CAACmf,aAAa,CAACpe,WAAW,CAACzhB,IAAI,CAACuiB,KAAK,EAAE,UAAC7jB,IAAI,EAAE4L,IAAI;MACpD,IAAM2vC,QAAQ,GAAG75B,wBAAwB,CACvC1hB,IAAI,EACJ4L,IAAI,EACJoJ,KAAI,CAAC+jC,eAAe,EACpB/3B,YAAY,CACb;MACDs6B,wBAAwB,CAAC/4B,QAAQ,CAACviB,IAAI,EAAEu7C,QAAQ,CAAC;KAClD,CAAC;IACF,IAAIvtB,MAAM,GAAY,EAAE;IAExBstB,wBAAwB,CAACv4B,WAAW,CAACzhB,IAAI,CAACuiB,KAAK,EAAE,UAAC7jB,IAAI,EAAEgZ,IAAI;MAC1DgV,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpBpb,KAAI,CAAC+jC,eAAe,CAACF,oBAAoB,CAAC74C,IAAI,EAAEgZ,IAAI,CAAC,CACtD;MACD,IAAMiO,YAAY,GAAGjS,KAAI,CAAC+lC,kBAAkB,CAAC/6C,IAAI,CAAC;MAClDgV,KAAI,CAAC+kC,kBAAkB,CAAC9yB,YAAY,CAAC;KACtC,CAAC;IAEF,IAAI,CAACka,aAAa,GAAG,IAAInf,kBAAkB,EAAE;IAC7C,IAAI,CAACg3B,WAAW,CAACC,yBAAyB,CAAC33C,IAAI,CAACuiB,KAAK,EAAEmK,MAAM,CAAC;GAC/D;EAEDiqB,iCAAkB,GAAlB,UACEj4C,IAAU,EACVuJ,UAAyE;IAF3E;IAIE,IAAI,CAAC4yB,OAAO,CAACtyB,kBAAkB,CAAC7J,IAAI,CAACrI,QAAQ,EAAE,EAAE,UAACuiC,MAAM,EAAE4Z,WAAW;MACnE,IAAI5Z,MAAM,KAAK,IAAI,EAAE;QACnBllB,KAAI,CAACmsB,aAAa,CAACze,MAAM,CAAC1iB,IAAI,CAAC;;MAEjCgV,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;KAC7D,CAAC;GACH;EAEDmE,8BAAe,GAAf,UACEj4C,IAAU,EACV/I,KAAc,EACdsS,UAAyE;IAH3E;IAKE,IAAM0C,OAAO,GAAG8C,cAAY,CAAC9X,KAAK,CAAC;IACnC,IAAI,CAACklC,OAAO,CAACqf,eAAe,CAC1Bx7C,IAAI,CAACrI,QAAQ,EAAE,EACfsU,OAAO,CAACO,GAAG,aAAa,IAAI,CAAC,EAC7B,UAAC0tB,MAAM,EAAE4Z,WAAW;MAClB,IAAI5Z,MAAM,KAAK,IAAI,EAAE;QACnBllB,KAAI,CAACmsB,aAAa,CAAC5e,QAAQ,CAACviB,IAAI,EAAEiM,OAAO,CAAC;;MAE5C+I,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;KAC7D,CACF;GACF;EAEDmE,0CAA2B,GAA3B,UACEj4C,IAAU,EACV/I,KAAc,EACduQ,QAAiB,EACjB+B,UAAyE;IAJ3E;IAME,IAAM0C,OAAO,GAAG8C,cAAY,CAAC9X,KAAK,EAAEuQ,QAAQ,CAAC;IAC7C,IAAI,CAAC20B,OAAO,CAACqf,eAAe,CAC1Bx7C,IAAI,CAACrI,QAAQ,EAAE,EACfsU,OAAO,CAACO,GAAG,aAAa,IAAI,CAAC,EAC7B,UAAC0tB,MAAM,EAAE4Z,WAAW;MAClB,IAAI5Z,MAAM,KAAK,IAAI,EAAE;QACnBllB,KAAI,CAACmsB,aAAa,CAAC5e,QAAQ,CAACviB,IAAI,EAAEiM,OAAO,CAAC;;MAE5C+I,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;KAC7D,CACF;GACF;EAEDmE,iCAAkB,GAAlB,UACEj4C,IAAU,EACVg7C,eAAyC,EACzCzxC,UAAyE;IAH3E;IAKE,IAAI2D,OAAO,CAAC8tC,eAAe,CAAC,EAAE;MAC5BzgD,GAAG,CACD,qEAAqE,CACtE;MACD,IAAI,CAACugD,sBAAsB,CAACvxC,UAAU,EAAE,IAAI,CAAC;MAC7C;;IAGF,IAAI,CAAC4yB,OAAO,CAACsf,iBAAiB,CAC5Bz7C,IAAI,CAACrI,QAAQ,EAAE,EACfqjD,eAAe,EACf,UAAC9gB,MAAM,EAAE4Z,WAAW;MAClB,IAAI5Z,MAAM,KAAK,IAAI,EAAE;QACnBp8B,IAAI,CAACk9C,eAAe,EAAE,UAACttC,SAAiB,EAAEC,SAAkB;UAC1D,IAAMC,YAAY,GAAGmB,cAAY,CAACpB,SAAS,CAAC;UAC5CqH,KAAI,CAACmsB,aAAa,CAAC5e,QAAQ,CAACviB,IAAI,CAACqD,KAAK,CAACqK,SAAS,CAAC,EAAEE,YAAY,CAAC;SACjE,CAAC;;MAEJoH,KAAI,CAAC8lC,sBAAsB,CAACvxC,UAAU,EAAE2wB,MAAM,EAAE4Z,WAAW,CAAC;KAC7D,CACF;GACF;EAEDmE,uCAAwB,GAAxB,UAAyBn4C,KAAY,EAAEka,iBAAoC;IACzE,IAAIgU,MAAM;IACV,IAAIluB,KAAK,CAACE,IAAI,CAACkC,QAAQ,EAAE,KAAK,OAAO,EAAE;MACrC8rB,MAAM,GAAG,IAAI,CAAC2qB,aAAa,CAAC1nB,oBAAoB,CAC9CnxB,KAAK,EACLka,iBAAiB,CAClB;KACF,MAAM;MACLgU,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAAC9nB,oBAAoB,CAChDnxB,KAAK,EACLka,iBAAiB,CAClB;;IAEH,IAAI,CAACg/B,WAAW,CAACsB,iBAAiB,CAACx6C,KAAK,CAACE,IAAI,EAAEguB,MAAM,CAAC;GACvD;EAEDiqB,0CAA2B,GAA3B,UACEn4C,KAAY,EACZka,iBAAoC;;;IAIpC,IAAIgU,MAAM;IACV,IAAIluB,KAAK,CAACE,IAAI,CAACkC,QAAQ,EAAE,KAAK,OAAO,EAAE;MACrC8rB,MAAM,GAAG,IAAI,CAAC2qB,aAAa,CAACnnB,uBAAuB,CACjD1xB,KAAK,EACLka,iBAAiB,CAClB;KACF,MAAM;MACLgU,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAACvnB,uBAAuB,CACnD1xB,KAAK,EACLka,iBAAiB,CAClB;;IAEH,IAAI,CAACg/B,WAAW,CAACsB,iBAAiB,CAACx6C,KAAK,CAACE,IAAI,EAAEguB,MAAM,CAAC;GACvD;EAEDiqB,wBAAS,GAAT;IACE,IAAI,IAAI,CAACE,qBAAqB,EAAE;MAC9B,IAAI,CAACA,qBAAqB,CAACjC,SAAS,CAAC4B,gBAAgB,CAAC;;GAEzD;EAEDG,qBAAM,GAAN;IACE,IAAI,IAAI,CAACE,qBAAqB,EAAE;MAC9B,IAAI,CAACA,qBAAqB,CAACuD,MAAM,CAAC5D,gBAAgB,CAAC;;GAEtD;EAEDG,oBAAK,GAAL,UAAM0D,SAA0B;IAA1B;MAAAA,iBAA0B;IAAA;IAC9B,IAAI,OAAOhF,OAAO,KAAK,WAAW,EAAE;MAClC;;IAGF,IAAIna,KAA+B;IACnC,IAAImf,SAAS,EAAE;MACb,IAAI,CAAC,IAAI,CAACvf,cAAc,EAAE;QACxB,IAAI,CAACA,cAAc,GAAG,IAAIT,aAAa,CAAC,IAAI,CAACgF,MAAM,CAAC;;MAEtDnE,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACzhC,GAAG,EAAE;KAClC,MAAM;MACL6hC,KAAK,GAAG,IAAI,CAACmE,MAAM,CAAChmC,GAAG,EAAE;;IAG3B,IAAMihD,WAAW,GAAGv6C,MAAM,CAACjE,IAAI,CAACo/B,KAAK,CAAC,CAACqf,MAAM,CAC3C,UAACC,aAAa,EAAEC,YAAY;MAC1B,WAAI,CAAC94C,GAAG,CAAC84C,YAAY,CAACtiD,MAAM,EAAEqiD,aAAa,CAAC;KAAA,EAC9C,CAAC,CACF;IAEDh+C,IAAI,CAAC0+B,KAAK,EAAE,UAACV,IAAY,EAAE7kC,KAAc;MACvC,IAAI+kD,UAAU,GAAGlgB,IAAI;;MAErB,KAAK,IAAItiC,CAAC,GAAGsiC,IAAI,CAACriC,MAAM,EAAED,CAAC,GAAGoiD,WAAW,GAAG,CAAC,EAAEpiD,CAAC,EAAE,EAAE;QAClDwiD,UAAU,IAAI,GAAG;;MAEnBrF,OAAO,CAACp8C,GAAG,CAACyhD,UAAU,GAAG/kD,KAAK,CAAC;KAChC,CAAC;GACH;EAEDghD,oCAAqB,GAArB,UAAsBgE,MAAc;IAClC,IAAI,CAACtb,MAAM,CAAC6C,gBAAgB,CAACyY,MAAM,CAAC;IACpC,IAAI,CAAC1D,cAAc,CAAC2D,WAAW,CAACD,MAAM,CAAC;GACxC;EAEOhE,mBAAI,GAAZ;IAAa;SAAA,UAAqB,EAArB5+C,qBAAqB,EAArBA,IAAqB;MAArBC;;IACX,IAAIuB,MAAM,GAAG,EAAE;IACf,IAAI,IAAI,CAACs9C,qBAAqB,EAAE;MAC9Bt9C,MAAM,GAAG,IAAI,CAACs9C,qBAAqB,CAAC1/C,EAAE,GAAG,GAAG;;IAE9C8B,GAAG,yBAACM,MAAM,GAAKvB,OAAO;GACvB;EAED2+C,qCAAsB,GAAtB,UACE16B,QAAuE,EACvE2c,MAAc,EACd4Z,WAA2B;IAE3B,IAAIv2B,QAAQ,EAAE;MACZhd,cAAc,CAAC;QACb,IAAI25B,MAAM,KAAK,IAAI,EAAE;UACnB3c,QAAQ,CAAC,IAAI,CAAC;SACf,MAAM;UACL,IAAM1d,IAAI,GAAG,CAACq6B,MAAM,IAAI,OAAO,EAAEj6B,WAAW,EAAE;UAC9C,IAAI1G,OAAO,GAAGsG,IAAI;UAClB,IAAIi0C,WAAW,EAAE;YACfv6C,OAAO,IAAI,IAAI,GAAGu6C,WAAW;;UAG/B,IAAMh5C,KAAK,GAAG,IAAIE,KAAK,CAACzB,OAAO,CAAC;;UAE/BuB,KAAa,CAAC+E,IAAI,GAAGA,IAAI;UAC1B0d,QAAQ,CAACziB,KAAK,CAAC;;OAElB,CAAC;;GAEL;EAEDuG,sBAAI42C,0BAAQ;SAAZ;MACE,OAAO,IAAI,CAACkE,UAAU,KAAK,IAAI,CAACA,UAAU,GAAG,IAAIC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACjE;;;;EACH,WAAC;AAAD,CAAC;;AC5rBD;;;;;;;;;;;;;;;;AA4BA;;;;;;AAMA;;;;EAgCE,sBAAYj3C,MAAmB;IAC7B,IAAI,CAACk3C,cAAc,GAAG,IAAIr1B,aAAa,CAAC7hB,MAAM,CAAC2V,QAAQ,EAAE,CAAC;IAC1D,IAAI,CAACxB,MAAM,GAAGnU,MAAM,CAAC2V,QAAQ,EAAE;IAC/B,IAAI,CAACwhC,UAAU,GAAGC,YAAY,CAACC,aAAa,CAACr3C,MAAM,CAAC;IACpD,IAAI,CAACs3C,QAAQ,GAAGF,YAAY,CAACG,WAAW,CAACv3C,MAAM,CAAC;;;;;EAMlDo3C,mCAAY,GAAZ;IACE,OAAO,IAAI,CAACD,UAAU;GACvB;;;;EAKDC,iCAAU,GAAV;IACE,OAAO,IAAI,CAACE,QAAQ;GACrB;;;;;EAMDF,8BAAO,GAAP,UAAQ3wC,IAAe;IACrB,OACE,IAAI,CAAC0N,MAAM,CAACvN,OAAO,CAAC,IAAI,CAAC4wC,YAAY,EAAE,EAAE/wC,IAAI,CAAC,IAAI,CAAC,IACnD,IAAI,CAAC0N,MAAM,CAACvN,OAAO,CAACH,IAAI,EAAE,IAAI,CAACgxC,UAAU,EAAE,CAAC,IAAI,CAAC;GAEpD;;;;EAKDL,kCAAW,GAAX,UACEvjC,IAAU,EACVhiB,GAAW,EACXutB,QAAc,EACd0C,YAAkB,EAClBzb,MAA2B,EAC3B0b,oBAAmD;IAEnD,IAAI,CAAC,IAAI,CAACgJ,OAAO,CAAC,IAAIrkB,SAAS,CAAC7U,GAAG,EAAEutB,QAAQ,CAAC,CAAC,EAAE;MAC/CA,QAAQ,GAAGhP,YAAY,CAAC/H,UAAU;;IAEpC,OAAO,IAAI,CAAC6uC,cAAc,CAACruC,WAAW,CACpCgL,IAAI,EACJhiB,GAAG,EACHutB,QAAQ,EACR0C,YAAY,EACZzb,MAAM,EACN0b,oBAAoB,CACrB;GACF;;;;EAKDq1B,qCAAc,GAAd,UACEh2B,OAAa,EACbmB,OAAa,EACbR,oBAAmD;IAEnD,IAAIQ,OAAO,CAACza,UAAU,EAAE,EAAE;;MAExBya,OAAO,GAAGnS,YAAY,CAAC/H,UAAU;;IAEnC,IAAI4Y,QAAQ,GAAGsB,OAAO,CAACD,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;;IAE7C8M,QAAQ,GAAGA,QAAQ,CAACvY,cAAc,CAAC0H,YAAY,CAAC/H,UAAU,CAAC;IAC3D,IAAMqvC,IAAI,GAAG,IAAI;IACjBn1B,OAAO,CAACxR,YAAY,CAAC5G,cAAc,EAAE,UAACtY,GAAG,EAAE2W,SAAS;MAClD,IAAI,CAACkvC,IAAI,CAAC3sB,OAAO,CAAC,IAAIrkB,SAAS,CAAC7U,GAAG,EAAE2W,SAAS,CAAC,CAAC,EAAE;QAChDyY,QAAQ,GAAGA,QAAQ,CAACtY,oBAAoB,CAAC9W,GAAG,EAAEue,YAAY,CAAC/H,UAAU,CAAC;;KAEzE,CAAC;IACF,OAAO,IAAI,CAAC6uC,cAAc,CAAClxB,cAAc,CACvC5E,OAAO,EACPH,QAAQ,EACRc,oBAAoB,CACrB;GACF;;;;EAKDq1B,qCAAc,GAAd,UAAeh2B,OAAa,EAAEzQ,WAAiB;;IAE7C,OAAOyQ,OAAO;GACf;;;;EAKDg2B,mCAAY,GAAZ;IACE,OAAO,IAAI;GACZ;;;;EAKDA,uCAAgB,GAAhB;IACE,OAAO,IAAI,CAACF,cAAc;GAC3B;;;;EAKDE,+BAAQ,GAAR;IACE,OAAO,IAAI,CAACjjC,MAAM;GACnB;;;;;;EAOcijC,0BAAa,GAA5B,UAA6Bp3C,MAAmB;IAC9C,IAAIA,MAAM,CAACsX,QAAQ,EAAE,EAAE;MACrB,IAAMM,SAAS,GAAG5X,MAAM,CAAC6X,iBAAiB,EAAE;MAC5C,OAAO7X,MAAM,CAAC2V,QAAQ,EAAE,CAACgiC,QAAQ,CAAC33C,MAAM,CAACuX,kBAAkB,EAAE,EAAEK,SAAS,CAAC;KAC1E,MAAM;MACL,OAAO5X,MAAM,CAAC2V,QAAQ,EAAE,CAAChE,OAAO,EAAE;;GAErC;;;;;;EAOcylC,wBAAW,GAA1B,UAA2Bp3C,MAAmB;IAC5C,IAAIA,MAAM,CAACwX,MAAM,EAAE,EAAE;MACnB,IAAMO,OAAO,GAAG/X,MAAM,CAACgY,eAAe,EAAE;MACxC,OAAOhY,MAAM,CAAC2V,QAAQ,EAAE,CAACgiC,QAAQ,CAAC33C,MAAM,CAACyX,gBAAgB,EAAE,EAAEM,OAAO,CAAC;KACtE,MAAM;MACL,OAAO/X,MAAM,CAAC2V,QAAQ,EAAE,CAAC3D,OAAO,EAAE;;GAErC;EACH,mBAAC;AAAD,CAAC;;AC9MD;;;;;;;;;;;;;;;;AA8BA;;;;;;AAMA;;;;EAgCE,uBAAYhS,MAAmB;IAC7B,IAAI,CAAC43C,aAAa,GAAG,IAAIR,YAAY,CAACp3C,MAAM,CAAC;IAC7C,IAAI,CAACmU,MAAM,GAAGnU,MAAM,CAAC2V,QAAQ,EAAE;IAC/B,IAAI,CAACkiC,MAAM,GAAG73C,MAAM,CAAC83C,QAAQ,EAAE;IAC/B,IAAI,CAACC,QAAQ,GAAG,CAAC/3C,MAAM,CAACg4C,cAAc,EAAE;;;;;EAM1CC,mCAAW,GAAX,UACEpkC,IAAU,EACVhiB,GAAW,EACXutB,QAAc,EACd0C,YAAkB,EAClBzb,MAA2B,EAC3B0b,oBAAmD;IAEnD,IAAI,CAAC,IAAI,CAAC61B,aAAa,CAAC7sB,OAAO,CAAC,IAAIrkB,SAAS,CAAC7U,GAAG,EAAEutB,QAAQ,CAAC,CAAC,EAAE;MAC7DA,QAAQ,GAAGhP,YAAY,CAAC/H,UAAU;;IAEpC,IAAIwL,IAAI,CAACvD,iBAAiB,CAACze,GAAG,CAAC,CAAC8X,MAAM,CAACyV,QAAQ,CAAC,EAAE;;MAEhD,OAAOvL,IAAI;KACZ,MAAM,IAAIA,IAAI,CAACc,WAAW,EAAE,GAAG,IAAI,CAACkjC,MAAM,EAAE;MAC3C,OAAO,IAAI,CAACD,aAAa,CACtB9wB,gBAAgB,EAAE,CAClBje,WAAW,CACVgL,IAAI,EACJhiB,GAAG,EACHutB,QAAQ,EACR0C,YAAY,EACZzb,MAAM,EACN0b,oBAAoB,CACrB;KACJ,MAAM;MACL,OAAO,IAAI,CAACm2B,qBAAqB,CAC/BrkC,IAAI,EACJhiB,GAAG,EACHutB,QAAQ,EACR/Y,MAAM,EACN0b,oBAAoB,CACrB;;GAEJ;;;;EAKDk2B,sCAAc,GAAd,UACE72B,OAAa,EACbmB,OAAa,EACbR,oBAAmD;IAEnD,IAAId,QAAQ;IACZ,IAAIsB,OAAO,CAACza,UAAU,EAAE,IAAIya,OAAO,CAACxa,OAAO,EAAE,EAAE;;MAE7CkZ,QAAQ,GAAG7Q,YAAY,CAAC/H,UAAU,CAACia,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;KAC1D,MAAM;MACL,IACE,IAAI,CAAC0jC,MAAM,GAAG,CAAC,GAAGt1B,OAAO,CAAC5N,WAAW,EAAE,IACvC4N,OAAO,CAACP,SAAS,CAAC,IAAI,CAAC7N,MAAM,CAAC,EAC9B;;QAEA8M,QAAQ,GAAG7Q,YAAY,CAAC/H,UAAU,CAACia,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;;QAEzD,IAAItC,QAAQ;QACZ,IAAI,IAAI,CAACkmC,QAAQ,EAAE;UACjBlmC,QAAQ,GAAI0Q,OAAwB,CAACxQ,sBAAsB,CACzD,IAAI,CAAC6lC,aAAa,CAACH,UAAU,EAAE,EAC/B,IAAI,CAACtjC,MAAM,CACZ;SACF,MAAM;UACLtC,QAAQ,GAAI0Q,OAAwB,CAAC7Q,eAAe,CAClD,IAAI,CAACkmC,aAAa,CAACJ,YAAY,EAAE,EACjC,IAAI,CAACrjC,MAAM,CACZ;;QAEH,IAAIpJ,KAAK,GAAG,CAAC;QACb,OAAO8G,QAAQ,CAACsmC,OAAO,EAAE,IAAIptC,KAAK,GAAG,IAAI,CAAC8sC,MAAM,EAAE;UAChD,IAAM1xC,IAAI,GAAG0L,QAAQ,CAACzC,OAAO,EAAE;UAC/B,IAAIgpC,OAAO;UACX,IAAI,IAAI,CAACL,QAAQ,EAAE;YACjBK,OAAO,GACL,IAAI,CAACjkC,MAAM,CAACvN,OAAO,CAAC,IAAI,CAACgxC,aAAa,CAACJ,YAAY,EAAE,EAAErxC,IAAI,CAAC,IAAI,CAAC;WACpE,MAAM;YACLiyC,OAAO,GACL,IAAI,CAACjkC,MAAM,CAACvN,OAAO,CAACT,IAAI,EAAE,IAAI,CAACyxC,aAAa,CAACH,UAAU,EAAE,CAAC,IAAI,CAAC;;UAEnE,IAAIW,OAAO,EAAE;YACXn3B,QAAQ,GAAGA,QAAQ,CAACtY,oBAAoB,CAACxC,IAAI,CAAC7T,IAAI,EAAE6T,IAAI,CAACM,IAAI,CAAC;YAC9DsE,KAAK,EAAE;WACR,MAAM;;YAEL;;;OAGL,MAAM;;QAELkW,QAAQ,GAAGsB,OAAO,CAACD,SAAS,CAAC,IAAI,CAACnO,MAAM,CAAC;;QAEzC8M,QAAQ,GAAGA,QAAQ,CAACvY,cAAc,CAChC0H,YAAY,CAAC/H,UAAU,CACR;QACjB,IAAIuJ,SAAS;QACb,IAAIK,OAAO;QACX,IAAI1U,GAAG;QACP,IAAIsU,QAAQ;QACZ,IAAI,IAAI,CAACkmC,QAAQ,EAAE;UACjBlmC,QAAQ,GAAGoP,QAAQ,CAACo3B,kBAAkB,CAAC,IAAI,CAAClkC,MAAM,CAAC;UACnDvC,SAAS,GAAG,IAAI,CAACgmC,aAAa,CAACH,UAAU,EAAE;UAC3CxlC,OAAO,GAAG,IAAI,CAAC2lC,aAAa,CAACJ,YAAY,EAAE;UAC3C,IAAMc,cAAY,GAAG,IAAI,CAACnkC,MAAM,CAAC5E,UAAU,EAAE;UAC7ChS,GAAG,GAAG,aAAC/F,CAAY,EAAEC,CAAY;YAAK,qBAAY,CAACA,CAAC,EAAED,CAAC,CAAC;UAAA;SACzD,MAAM;UACLqa,QAAQ,GAAGoP,QAAQ,CAAC/R,WAAW,CAAC,IAAI,CAACiF,MAAM,CAAC;UAC5CvC,SAAS,GAAG,IAAI,CAACgmC,aAAa,CAACJ,YAAY,EAAE;UAC7CvlC,OAAO,GAAG,IAAI,CAAC2lC,aAAa,CAACH,UAAU,EAAE;UACzCl6C,GAAG,GAAG,IAAI,CAAC4W,MAAM,CAAC5E,UAAU,EAAE;;QAGhC,IAAIxE,KAAK,GAAG,CAAC;QACb,IAAIwtC,cAAc,GAAG,KAAK;QAC1B,OAAO1mC,QAAQ,CAACsmC,OAAO,EAAE,EAAE;UACzB,IAAMhyC,IAAI,GAAG0L,QAAQ,CAACzC,OAAO,EAAE;UAC/B,IAAI,CAACmpC,cAAc,IAAIh7C,GAAG,CAACqU,SAAS,EAAEzL,IAAI,CAAC,IAAI,CAAC,EAAE;;YAEhDoyC,cAAc,GAAG,IAAI;;UAEvB,IAAMH,OAAO,GACXG,cAAc,IAAIxtC,KAAK,GAAG,IAAI,CAAC8sC,MAAM,IAAIt6C,GAAG,CAAC4I,IAAI,EAAE8L,OAAO,CAAC,IAAI,CAAC;UAClE,IAAImmC,OAAO,EAAE;YACXrtC,KAAK,EAAE;WACR,MAAM;YACLkW,QAAQ,GAAGA,QAAQ,CAACtY,oBAAoB,CACtCxC,IAAI,CAAC7T,IAAI,EACT8d,YAAY,CAAC/H,UAAU,CACxB;;;;;IAKT,OAAO,IAAI,CAACuvC,aAAa,CACtB9wB,gBAAgB,EAAE,CAClBd,cAAc,CAAC5E,OAAO,EAAEH,QAAQ,EAAEc,oBAAoB,CAAC;GAC3D;;;;EAKDk2B,sCAAc,GAAd,UAAe72B,OAAa,EAAEzQ,WAAiB;;IAE7C,OAAOyQ,OAAO;GACf;;;;EAKD62B,oCAAY,GAAZ;IACE,OAAO,IAAI;GACZ;;;;EAKDA,wCAAgB,GAAhB;IACE,OAAO,IAAI,CAACL,aAAa,CAAC9wB,gBAAgB,EAAE;GAC7C;;;;EAKDmxB,gCAAQ,GAAR;IACE,OAAO,IAAI,CAAC9jC,MAAM;GACnB;;;;;;;;;;EAWO8jC,6CAAqB,GAA7B,UACEpkC,IAAU,EACVmJ,QAAgB,EAChB8B,SAAe,EACfzY,MAA2B,EAC3BmyC,iBAAgD;;IAGhD,IAAIj7C,GAAG;IACP,IAAI,IAAI,CAACw6C,QAAQ,EAAE;MACjB,IAAMU,UAAQ,GAAG,IAAI,CAACtkC,MAAM,CAAC5E,UAAU,EAAE;MACzChS,GAAG,GAAG,aAAC/F,CAAY,EAAEC,CAAY;QAAK,iBAAQ,CAACA,CAAC,EAAED,CAAC,CAAC;MAAA;KACrD,MAAM;MACL+F,GAAG,GAAG,IAAI,CAAC4W,MAAM,CAAC5E,UAAU,EAAE;;IAEhC,IAAMgZ,aAAa,GAAG1U,IAAoB;IAC1C7e,MAAM,CAACuzB,aAAa,CAAC5T,WAAW,EAAE,KAAK,IAAI,CAACkjC,MAAM,EAAE,EAAE,CAAC;IACvD,IAAMa,iBAAiB,GAAG,IAAIhyC,SAAS,CAACsW,QAAQ,EAAE8B,SAAS,CAAC;IAC5D,IAAM65B,cAAc,GAAG,IAAI,CAACZ,QAAQ,GAChCxvB,aAAa,CAACqwB,aAAa,CAAC,IAAI,CAACzkC,MAAM,CAAC,GACvCoU,aAAa,CAACswB,YAAY,CAAC,IAAI,CAAC1kC,MAAM,CAAe;IAC1D,IAAMikC,OAAO,GAAG,IAAI,CAACR,aAAa,CAAC7sB,OAAO,CAAC2tB,iBAAiB,CAAC;IAC7D,IAAInwB,aAAa,CAAC5H,QAAQ,CAAC3D,QAAQ,CAAC,EAAE;MACpC,IAAM87B,YAAY,GAAGvwB,aAAa,CAACjY,iBAAiB,CAAC0M,QAAQ,CAAC;MAC9D,IAAI4C,SAAS,GAAGvZ,MAAM,CAAC0yC,kBAAkB,CACvC,IAAI,CAAC5kC,MAAM,EACXwkC,cAAc,EACd,IAAI,CAACZ,QAAQ,CACd;MACD,OACEn4B,SAAS,IAAI,IAAI,KAChBA,SAAS,CAACttB,IAAI,KAAK0qB,QAAQ,IAAIuL,aAAa,CAAC5H,QAAQ,CAACf,SAAS,CAACttB,IAAI,CAAC,CAAC,EACvE;;;;QAIAstB,SAAS,GAAGvZ,MAAM,CAAC0yC,kBAAkB,CACnC,IAAI,CAAC5kC,MAAM,EACXyL,SAAS,EACT,IAAI,CAACm4B,QAAQ,CACd;;MAEH,IAAMiB,WAAW,GACfp5B,SAAS,IAAI,IAAI,GAAG,CAAC,GAAGriB,GAAG,CAACqiB,SAAS,EAAE84B,iBAAiB,CAAC;MAC3D,IAAMO,eAAe,GACnBb,OAAO,IAAI,CAACt5B,SAAS,CAAC/W,OAAO,EAAE,IAAIixC,WAAW,IAAI,CAAC;MACrD,IAAIC,eAAe,EAAE;QACnB,IAAIT,iBAAiB,IAAI,IAAI,EAAE;UAC7BA,iBAAiB,CAACt2B,gBAAgB,CAChCb,MAAM,CAACgB,kBAAkB,CAACrF,QAAQ,EAAE8B,SAAS,EAAEg6B,YAAY,CAAC,CAC7D;;QAEH,OAAOvwB,aAAa,CAAC5f,oBAAoB,CAACqU,QAAQ,EAAE8B,SAAS,CAAC;OAC/D,MAAM;QACL,IAAI05B,iBAAiB,IAAI,IAAI,EAAE;UAC7BA,iBAAiB,CAACt2B,gBAAgB,CAChCb,MAAM,CAACc,kBAAkB,CAACnF,QAAQ,EAAE87B,YAAY,CAAC,CAClD;;QAEH,IAAMnzB,aAAa,GAAG4C,aAAa,CAAC5f,oBAAoB,CACtDqU,QAAQ,EACR5M,YAAY,CAAC/H,UAAU,CACxB;QACD,IAAM6wC,gBAAgB,GACpBt5B,SAAS,IAAI,IAAI,IAAI,IAAI,CAACg4B,aAAa,CAAC7sB,OAAO,CAACnL,SAAS,CAAC;QAC5D,IAAIs5B,gBAAgB,EAAE;UACpB,IAAIV,iBAAiB,IAAI,IAAI,EAAE;YAC7BA,iBAAiB,CAACt2B,gBAAgB,CAChCb,MAAM,CAACe,gBAAgB,CAACxC,SAAS,CAACttB,IAAI,EAAEstB,SAAS,CAACnZ,IAAI,CAAC,CACxD;;UAEH,OAAOkf,aAAa,CAAChd,oBAAoB,CACvCiX,SAAS,CAACttB,IAAI,EACdstB,SAAS,CAACnZ,IAAI,CACf;SACF,MAAM;UACL,OAAOkf,aAAa;;;KAGzB,MAAM,IAAI7G,SAAS,CAAC/W,OAAO,EAAE,EAAE;;MAE9B,OAAO8L,IAAI;KACZ,MAAM,IAAIukC,OAAO,EAAE;MAClB,IAAI76C,GAAG,CAACo7C,cAAc,EAAED,iBAAiB,CAAC,IAAI,CAAC,EAAE;QAC/C,IAAIF,iBAAiB,IAAI,IAAI,EAAE;UAC7BA,iBAAiB,CAACt2B,gBAAgB,CAChCb,MAAM,CAACc,kBAAkB,CAACw2B,cAAc,CAACrmD,IAAI,EAAEqmD,cAAc,CAAClyC,IAAI,CAAC,CACpE;UACD+xC,iBAAiB,CAACt2B,gBAAgB,CAChCb,MAAM,CAACe,gBAAgB,CAACpF,QAAQ,EAAE8B,SAAS,CAAC,CAC7C;;QAEH,OAAOyJ,aAAa,CACjB5f,oBAAoB,CAACqU,QAAQ,EAAE8B,SAAS,CAAC,CACzCnW,oBAAoB,CAACgwC,cAAc,CAACrmD,IAAI,EAAE8d,YAAY,CAAC/H,UAAU,CAAC;OACtE,MAAM;QACL,OAAOwL,IAAI;;KAEd,MAAM;MACL,OAAOA,IAAI;;GAEd;EACH,oBAAC;AAAD,CAAC;;ACnWD;;;;;;;;;;;;;;;;AA8BA;;;;;;AAMA;EAAA;IACU,cAAS,GAAG,KAAK;IACjB,cAAS,GAAG,KAAK;IACjB,kBAAa,GAAG,KAAK;IACrB,mBAAc,GAAG,KAAK;IACtB,YAAO,GAAG,KAAK;IACf,gBAAW,GAAG,KAAK;IACnB,kBAAa,GAAG,KAAK;IAErB,WAAM,GAAG,CAAC;IACV,cAAS,GAAG,EAAE;IACd,qBAAgB,GAAmB,IAAI;IACvC,oBAAe,GAAG,EAAE;IACpB,mBAAc,GAAmB,IAAI;IACrC,kBAAa,GAAG,EAAE;IAElB,WAAM,GAAG1J,cAAc;;;;;EA+C/BgvC,8BAAQ,GAAR;IACE,OAAO,IAAI,CAACC,SAAS;GACtB;EAEDD,mCAAa,GAAb;IACE,OAAO,IAAI,CAACE,cAAc;GAC3B;EAEDF,kCAAY,GAAZ;IACE,OAAO,IAAI,CAACG,aAAa;GAC1B;;;;EAKDH,oCAAc,GAAd;IACE,IAAI,IAAI,CAACI,SAAS,KAAK,EAAE,EAAE;;;;;MAKzB,OAAO,IAAI,CAACH,SAAS;KACtB,MAAM;MACL,OACE,IAAI,CAACG,SAAS,KAAKJ,WAAW,CAACK,wBAAwB,CAACC,cAAc;;GAG3E;;;;;EAMDN,wCAAkB,GAAlB;IACEnkD,MAAM,CAAC,IAAI,CAACokD,SAAS,EAAE,kCAAkC,CAAC;IAC1D,OAAO,IAAI,CAACM,gBAAgB;GAC7B;;;;;;EAODP,uCAAiB,GAAjB;IACEnkD,MAAM,CAAC,IAAI,CAACokD,SAAS,EAAE,kCAAkC,CAAC;IAC1D,IAAI,IAAI,CAACO,aAAa,EAAE;MACtB,OAAO,IAAI,CAACC,eAAe;KAC5B,MAAM;MACL,OAAOviD,QAAQ;;GAElB;;;;EAKD8hD,4BAAM,GAAN;IACE,OAAO,IAAI,CAACU,OAAO;GACpB;;;;;EAMDV,sCAAgB,GAAhB;IACEnkD,MAAM,CAAC,IAAI,CAAC6kD,OAAO,EAAE,gCAAgC,CAAC;IACtD,OAAO,IAAI,CAACC,cAAc;GAC3B;;;;;;EAODX,qCAAe,GAAf;IACEnkD,MAAM,CAAC,IAAI,CAAC6kD,OAAO,EAAE,gCAAgC,CAAC;IACtD,IAAI,IAAI,CAACE,WAAW,EAAE;MACpB,OAAO,IAAI,CAACC,aAAa;KAC1B,MAAM;MACL,OAAO1iD,QAAQ;;GAElB;;;;EAKD6hD,8BAAQ,GAAR;IACE,OAAO,IAAI,CAACc,SAAS;GACtB;;;;EAKDd,sCAAgB,GAAhB;IACE,OAAO,IAAI,CAACc,SAAS,IAAI,IAAI,CAACV,SAAS,KAAK,EAAE;GAC/C;;;;;EAMDJ,8BAAQ,GAAR;IACEnkD,MAAM,CAAC,IAAI,CAACilD,SAAS,EAAE,kCAAkC,CAAC;IAC1D,OAAO,IAAI,CAACpC,MAAM;GACnB;;;;EAKDsB,8BAAQ,GAAR;IACE,OAAO,IAAI,CAAChlC,MAAM;GACnB;;;;;EAMOglC,2BAAK,GAAb;IACE,IAAM9tC,IAAI,GAAG,IAAI8tC,WAAW,EAAE;IAC9B9tC,IAAI,CAAC4uC,SAAS,GAAG,IAAI,CAACA,SAAS;IAC/B5uC,IAAI,CAACwsC,MAAM,GAAG,IAAI,CAACA,MAAM;IACzBxsC,IAAI,CAAC+tC,SAAS,GAAG,IAAI,CAACA,SAAS;IAC/B/tC,IAAI,CAACquC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAC7CruC,IAAI,CAACsuC,aAAa,GAAG,IAAI,CAACA,aAAa;IACvCtuC,IAAI,CAACuuC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC3CvuC,IAAI,CAACwuC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC3BxuC,IAAI,CAACyuC,cAAc,GAAG,IAAI,CAACA,cAAc;IACzCzuC,IAAI,CAAC0uC,WAAW,GAAG,IAAI,CAACA,WAAW;IACnC1uC,IAAI,CAAC2uC,aAAa,GAAG,IAAI,CAACA,aAAa;IACvC3uC,IAAI,CAAC8I,MAAM,GAAG,IAAI,CAACA,MAAM;IACzB9I,IAAI,CAACkuC,SAAS,GAAG,IAAI,CAACA,SAAS;IAC/B,OAAOluC,IAAI;GACZ;;;;;EAMD8tC,2BAAK,GAAL,UAAMe,QAAgB;IACpB,IAAMhgC,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAAC+/B,SAAS,GAAG,IAAI;IAC1B//B,SAAS,CAAC29B,MAAM,GAAGqC,QAAQ;IAC3BhgC,SAAS,CAACq/B,SAAS,GAAG,EAAE;IACxB,OAAOr/B,SAAS;GACjB;;;;;EAMDi/B,kCAAY,GAAZ,UAAae,QAAgB;IAC3B,IAAMhgC,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAAC+/B,SAAS,GAAG,IAAI;IAC1B//B,SAAS,CAAC29B,MAAM,GAAGqC,QAAQ;IAC3BhgC,SAAS,CAACq/B,SAAS,GAAGJ,WAAW,CAACK,wBAAwB,CAACC,cAAc;IACzE,OAAOv/B,SAAS;GACjB;;;;;EAMDi/B,iCAAW,GAAX,UAAYe,QAAgB;IAC1B,IAAMhgC,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAAC+/B,SAAS,GAAG,IAAI;IAC1B//B,SAAS,CAAC29B,MAAM,GAAGqC,QAAQ;IAC3BhgC,SAAS,CAACq/B,SAAS,GAAGJ,WAAW,CAACK,wBAAwB,CAACY,eAAe;IAC1E,OAAOlgC,SAAS;GACjB;;;;;;EAODi/B,6BAAO,GAAP,UAAQ5xC,UAAmB,EAAE1V,GAAmB;IAC9C,IAAMqoB,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAACk/B,SAAS,GAAG,IAAI;IAC1B,IAAI7xC,UAAU,KAAK7E,SAAS,EAAE;MAC5B6E,UAAU,GAAG,IAAI;;IAEnB2S,SAAS,CAACw/B,gBAAgB,GAAGnyC,UAAU;IACvC,IAAI1V,GAAG,IAAI,IAAI,EAAE;MACfqoB,SAAS,CAACy/B,aAAa,GAAG,IAAI;MAC9Bz/B,SAAS,CAAC0/B,eAAe,GAAG/nD,GAAG;KAChC,MAAM;MACLqoB,SAAS,CAACy/B,aAAa,GAAG,KAAK;MAC/Bz/B,SAAS,CAAC0/B,eAAe,GAAG,EAAE;;IAEhC,OAAO1/B,SAAS;GACjB;EAEDi/B,gCAAU,GAAV,UAAW5xC,UAAmB,EAAE1V,GAAmB;IACjD,IAAImrB,QAAgB;IACpB,IAAInrB,GAAG,IAAI,IAAI,EAAE;MACfmrB,QAAQ,GAAG1lB,QAAQ;KACpB,MAAM;MACL0lB,QAAQ,GAAG/W,SAAS,CAACpU,GAAG,CAAC;;IAE3B,IAAMmO,MAAM,GAAgB,IAAI,CAACqa,OAAO,CAAC9S,UAAU,EAAEyV,QAAQ,CAAC;IAC9Dhd,MAAM,CAACq5C,cAAc,GAAG,IAAI;IAC5B,OAAOr5C,MAAM;GACd;;;;;;EAODm5C,2BAAK,GAAL,UAAM5xC,UAAmB,EAAE1V,GAAmB;IAC5C,IAAMqoB,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAAC2/B,OAAO,GAAG,IAAI;IACxB,IAAItyC,UAAU,KAAK7E,SAAS,EAAE;MAC5B6E,UAAU,GAAG,IAAI;;IAEnB2S,SAAS,CAAC4/B,cAAc,GAAGvyC,UAAU;IACrC,IAAI1V,GAAG,KAAK6Q,SAAS,EAAE;MACrBwX,SAAS,CAAC6/B,WAAW,GAAG,IAAI;MAC5B7/B,SAAS,CAAC8/B,aAAa,GAAGnoD,GAAG;KAC9B,MAAM;MACLqoB,SAAS,CAAC6/B,WAAW,GAAG,KAAK;MAC7B7/B,SAAS,CAAC8/B,aAAa,GAAG,EAAE;;IAE9B,OAAO9/B,SAAS;GACjB;EAEDi/B,+BAAS,GAAT,UAAU5xC,UAAmB,EAAE1V,GAAmB;IAChD,IAAImrB,QAAgB;IACpB,IAAInrB,GAAG,IAAI,IAAI,EAAE;MACfmrB,QAAQ,GAAG3lB,QAAQ;KACpB,MAAM;MACL2lB,QAAQ,GAAGzW,WAAW,CAAC1U,GAAG,CAAC;;IAE7B,IAAMmO,MAAM,GAAgB,IAAI,CAACwa,KAAK,CAACjT,UAAU,EAAEyV,QAAQ,CAAC;IAC5Dhd,MAAM,CAACs5C,aAAa,GAAG,IAAI;IAC3B,OAAOt5C,MAAM;GACd;;;;;EAMDm5C,6BAAO,GAAP,UAAQrwC,KAAY;IAClB,IAAMoR,SAAS,GAAG,IAAI,CAACigC,KAAK,EAAE;IAC9BjgC,SAAS,CAAC/F,MAAM,GAAGrL,KAAK;IACxB,OAAOoR,SAAS;GACjB;;;;EAKDi/B,oCAAc,GAAd;IACE,IAAMkB,uBAAuB,GAAGlB,WAAW,CAACK,wBAAwB;IACpE,IAAMzhD,GAAG,GAA6B,EAAE;IACxC,IAAI,IAAI,CAACqhD,SAAS,EAAE;MAClBrhD,GAAG,CAACsiD,uBAAuB,CAACC,iBAAiB,CAAC,GAAG,IAAI,CAACZ,gBAAgB;MACtE,IAAI,IAAI,CAACC,aAAa,EAAE;QACtB5hD,GAAG,CAACsiD,uBAAuB,CAACE,gBAAgB,CAAC,GAAG,IAAI,CAACX,eAAe;;;IAGxE,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB9hD,GAAG,CAACsiD,uBAAuB,CAACG,eAAe,CAAC,GAAG,IAAI,CAACV,cAAc;MAClE,IAAI,IAAI,CAACC,WAAW,EAAE;QACpBhiD,GAAG,CAACsiD,uBAAuB,CAACI,cAAc,CAAC,GAAG,IAAI,CAACT,aAAa;;;IAGpE,IAAI,IAAI,CAACC,SAAS,EAAE;MAClBliD,GAAG,CAACsiD,uBAAuB,CAACK,KAAK,CAAC,GAAG,IAAI,CAAC7C,MAAM;MAChD,IAAI8C,QAAQ,GAAG,IAAI,CAACpB,SAAS;MAC7B,IAAIoB,QAAQ,KAAK,EAAE,EAAE;QACnB,IAAI,IAAI,CAAC3C,cAAc,EAAE,EAAE;UACzB2C,QAAQ,GAAGN,uBAAuB,CAACZ,cAAc;SAClD,MAAM;UACLkB,QAAQ,GAAGN,uBAAuB,CAACD,eAAe;;;MAGtDriD,GAAG,CAACsiD,uBAAuB,CAACO,SAAS,CAAC,GAAGD,QAAQ;;;IAGnD,IAAI,IAAI,CAACxmC,MAAM,KAAKhK,cAAc,EAAE;MAClCpS,GAAG,CAACsiD,uBAAuB,CAACQ,KAAK,CAAC,GAAG,IAAI,CAAC1mC,MAAM,CAAC3hB,QAAQ,EAAE;;IAE7D,OAAOuF,GAAG;GACX;;;;EAKDohD,kCAAY,GAAZ;IACE,OAAO,EAAE,IAAI,CAACC,SAAS,IAAI,IAAI,CAACS,OAAO,IAAI,IAAI,CAACI,SAAS,CAAC;GAC3D;;;;EAKDd,+BAAS,GAAT;IACE,OAAO,IAAI,CAAC5uB,YAAY,EAAE,IAAI,IAAI,CAACpW,MAAM,KAAKhK,cAAc;GAC7D;;;;EAKDgvC,mCAAa,GAAb;IACE,IAAI,IAAI,CAAC5uB,YAAY,EAAE,EAAE;MACvB,OAAO,IAAI1I,aAAa,CAAC,IAAI,CAAClM,QAAQ,EAAE,CAAC;KAC1C,MAAM,IAAI,IAAI,CAACuC,QAAQ,EAAE,EAAE;MAC1B,OAAO,IAAI+/B,aAAa,CAAC,IAAI,CAAC;KAC/B,MAAM;MACL,OAAO,IAAIb,YAAY,CAAC,IAAI,CAAC;;GAEhC;;;;;;EAOD+B,iDAA2B,GAA3B;IACE,IAAM2B,cAAc,GAAG3B,WAAW,CAAC4B,qBAAqB;IACxD,IAAMC,EAAE,GAAqC,EAAE;IAE/C,IAAI,IAAI,CAACtmB,SAAS,EAAE,EAAE;MACpB,OAAOsmB,EAAE;;IAGX,IAAI7gC,OAAO;IACX,IAAI,IAAI,CAAChG,MAAM,KAAKhK,cAAc,EAAE;MAClCgQ,OAAO,GAAG2gC,cAAc,CAAC3wC,cAAc;KACxC,MAAM,IAAI,IAAI,CAACgK,MAAM,KAAKT,WAAW,EAAE;MACtCyG,OAAO,GAAG2gC,cAAc,CAACpnC,WAAW;KACrC,MAAM,IAAI,IAAI,CAACS,MAAM,KAAK3M,SAAS,EAAE;MACpC2S,OAAO,GAAG2gC,cAAc,CAACtzC,SAAS;KACnC,MAAM;MACLxS,MAAM,CAAC,IAAI,CAACmf,MAAM,YAAYP,SAAS,EAAE,0BAA0B,CAAC;MACpEuG,OAAO,GAAG,IAAI,CAAChG,MAAM,CAAC3hB,QAAQ,EAAE;;IAElCwoD,EAAE,CAACF,cAAc,CAACG,QAAQ,CAAC,GAAG/oD,SAAS,CAACioB,OAAO,CAAC;IAEhD,IAAI,IAAI,CAACi/B,SAAS,EAAE;MAClB4B,EAAE,CAACF,cAAc,CAACI,QAAQ,CAAC,GAAGhpD,SAAS,CAAC,IAAI,CAACwnD,gBAAgB,CAAC;MAC9D,IAAI,IAAI,CAACC,aAAa,EAAE;QACtBqB,EAAE,CAACF,cAAc,CAACI,QAAQ,CAAC,IAAI,GAAG,GAAGhpD,SAAS,CAAC,IAAI,CAAC0nD,eAAe,CAAC;;;IAIxE,IAAI,IAAI,CAACC,OAAO,EAAE;MAChBmB,EAAE,CAACF,cAAc,CAACK,MAAM,CAAC,GAAGjpD,SAAS,CAAC,IAAI,CAAC4nD,cAAc,CAAC;MAC1D,IAAI,IAAI,CAACC,WAAW,EAAE;QACpBiB,EAAE,CAACF,cAAc,CAACK,MAAM,CAAC,IAAI,GAAG,GAAGjpD,SAAS,CAAC,IAAI,CAAC8nD,aAAa,CAAC;;;IAIpE,IAAI,IAAI,CAACC,SAAS,EAAE;MAClB,IAAI,IAAI,CAACjC,cAAc,EAAE,EAAE;QACzBgD,EAAE,CAACF,cAAc,CAACM,cAAc,CAAC,GAAG,IAAI,CAACvD,MAAM;OAChD,MAAM;QACLmD,EAAE,CAACF,cAAc,CAACO,aAAa,CAAC,GAAG,IAAI,CAACxD,MAAM;;;IAIlD,OAAOmD,EAAE;GACV;;;;;;;EA/YuB7B,oCAAwB,GAAG;IACjDmB,iBAAiB,EAAE,IAAI;IACvBC,gBAAgB,EAAE,IAAI;IACtBC,eAAe,EAAE,IAAI;IACrBC,cAAc,EAAE,IAAI;IACpBC,KAAK,EAAE,GAAG;IACVE,SAAS,EAAE,IAAI;IACfnB,cAAc,EAAE,GAAG;IACnBW,eAAe,EAAE,GAAG;IACpBS,KAAK,EAAE;GACR;;;;;;;EAQuB1B,iCAAqB,GAAG;IAC9C8B,QAAQ,EAAE,SAAS;IACnB9wC,cAAc,EAAE,WAAW;IAC3BuJ,WAAW,EAAE,QAAQ;IACrBlM,SAAS,EAAE,MAAM;IACjB0zC,QAAQ,EAAE,SAAS;IACnBC,MAAM,EAAE,OAAO;IACfC,cAAc,EAAE,cAAc;IAC9BC,aAAa,EAAE;GAChB;;;;;;EAOelC,mBAAO,GAAG,IAAIA,WAAW,EAAE;EA8W7C,kBAAC;CAxaD;;ACpCA;;;;;;;;;;;;;;;;;EA4C+BhyC;;;;;;;;;;;;EAe7B,mBAAY6P,IAAU,EAAEnc,IAAU;IAAlC;IACE,IAAI,EAAEmc,IAAI,YAAY87B,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIj9C,KAAK,CACb,2DAA2D,CAC5D;;;IAIHga,0BAAMmH,IAAI,EAAEnc,IAAI,EAAEs+C,WAAW,CAACmC,OAAO,EAAE,KAAK,CAAC;;;;EAI/CC,0BAAM,GAAN;IACEl3C,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAEzD,IAAI,IAAI,CAACuG,IAAI,CAACkN,OAAO,EAAE,EAAE;MACvB,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAAClN,IAAI,CAAC0I,OAAO,EAAE;;GAE7B;;;;;EAMDg4C,yBAAK,GAAL,UAAMn/C,UAAyB;IAC7BiI,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC3D,IAAI,OAAO8H,UAAU,KAAK,QAAQ,EAAE;MAClCA,UAAU,GAAGE,MAAM,CAACF,UAAU,CAAC;KAChC,MAAM,IAAI,EAAEA,UAAU,YAAYD,IAAI,CAAC,EAAE;MACxC,IAAI,IAAI,CAACtB,IAAI,CAACkC,QAAQ,EAAE,KAAK,IAAI,EAAE;QACjC8G,sBAAsB,CAAC,iBAAiB,EAAE,CAAC,EAAEzH,UAAU,EAAE,KAAK,CAAC;OAChE,MAAM;QACLwH,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,EAAExH,UAAU,EAAE,KAAK,CAAC;;;IAI/D,OAAO,IAAIm/C,SAAS,CAAC,IAAI,CAACvkC,IAAI,EAAE,IAAI,CAACnc,IAAI,CAACqD,KAAK,CAAC9B,UAAU,CAAC,CAAC;GAC7D;;EAGDm/C,6BAAS,GAAT;IACEl3C,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAE5D,IAAMknD,UAAU,GAAG,IAAI,CAAC3gD,IAAI,CAACusB,MAAM,EAAE;IACrC,OAAOo0B,UAAU,KAAK,IAAI,GAAG,IAAI,GAAG,IAAID,SAAS,CAAC,IAAI,CAACvkC,IAAI,EAAEwkC,UAAU,CAAC;GACzE;;EAGDD,2BAAO,GAAP;IACEl3C,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAE1D,IAAI0gB,GAAG,GAAc,IAAI;IACzB,OAAOA,GAAG,CAACC,SAAS,EAAE,KAAK,IAAI,EAAE;MAC/BD,GAAG,GAAGA,GAAG,CAACC,SAAS,EAAE;;IAEvB,OAAOD,GAAG;GACX;;EAGDumC,gCAAY,GAAZ;IACE,OAAO,IAAI,CAACvkC,IAAI,CAACykC,QAAQ;GAC1B;;;;;;EAODF,uBAAG,GAAH,UACEnG,MAAe,EACfhxC,UAAsC;IAEtCC,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACzDwP,oBAAoB,CAAC,eAAe,EAAE,IAAI,CAACjJ,IAAI,CAAC;IAChDyH,uBAAuB,CAAC,eAAe,EAAE,CAAC,EAAE8yC,MAAM,EAAE,IAAI,CAACv6C,IAAI,EAAE,KAAK,CAAC;IACrE0J,gBAAgB,CAAC,eAAe,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAEtD,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAI,CAACuS,IAAI,CAAC0kC,eAAe,CACvB,IAAI,CAAC7gD,IAAI,EACTu6C,MAAM,eACQ,IAAI,EAClB5wC,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;EAOD22C,0BAAM,GAAN,UACEx2C,aAAqB,EACrBX,UAAsC;IAEtCC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5DwP,oBAAoB,CAAC,kBAAkB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IAEnD,IAAIrG,KAAK,CAACC,OAAO,CAACsQ,aAAa,CAAC,EAAE;MAChC,IAAMC,gBAAgB,GAA6B,EAAE;MACrD,KAAK,IAAI3Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0Q,aAAa,CAACzQ,MAAM,EAAE,EAAED,CAAC,EAAE;QAC7C2Q,gBAAgB,CAAC,EAAE,GAAG3Q,CAAC,CAAC,GAAG0Q,aAAa,CAAC1Q,CAAC,CAAC;;MAE7C0Q,aAAa,GAAGC,gBAAgB;MAChClP,IAAI,CACF,uDAAuD,GACrD,2DAA2D,GAC3D,uDAAuD,GACvD,mCAAmC,CACtC;;IAEHwN,4BAA4B,CAC1B,kBAAkB,EAClB,CAAC,EACDyB,aAAa,EACb,IAAI,CAAClK,IAAI,EACT,KAAK,CACN;IACD0J,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IACzD,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAI,CAACuS,IAAI,CAACpjB,MAAM,CACd,IAAI,CAACiH,IAAI,EACTkK,aAAyC,EACzCP,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;;EAQD22C,mCAAe,GAAf,UACEnG,MAAe,EACfzkC,WAAmC,EACnCvM,UAAsC;IAEtCC,gBAAgB,CAAC,2BAA2B,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACrEwP,oBAAoB,CAAC,2BAA2B,EAAE,IAAI,CAACjJ,IAAI,CAAC;IAC5DyH,uBAAuB,CACrB,2BAA2B,EAC3B,CAAC,EACD8yC,MAAM,EACN,IAAI,CAACv6C,IAAI,EACT,KAAK,CACN;IACD2I,gBAAgB,CAAC,2BAA2B,EAAE,CAAC,EAAEmN,WAAW,EAAE,KAAK,CAAC;IACpEpM,gBAAgB,CAAC,2BAA2B,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAElE,IAAI,IAAI,CAACsQ,MAAM,EAAE,KAAK,SAAS,IAAI,IAAI,CAACA,MAAM,EAAE,KAAK,OAAO,EAAE;MAC5D,MACE,oCAAoC,GACpC,IAAI,CAACA,MAAM,EAAE,GACb,yBAAyB;;IAI7B,IAAMlQ,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAI,CAACuS,IAAI,CAAC0kC,eAAe,CACvB,IAAI,CAAC7gD,IAAI,EACTu6C,MAAM,EACNzkC,WAAW,EACXnM,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;EAMD22C,0BAAM,GAAN,UAAOn3C,UAAsC;IAC3CC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC5DwP,oBAAoB,CAAC,kBAAkB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IACnD0J,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAEzD,OAAO,IAAI,CAAC9O,GAAG,CAAC,IAAI,EAAE8O,UAAU,CAAC;GAClC;;;;;;;EAQDm3C,+BAAW,GAAX,UACEI,iBAA0C,EAC1Cv3C,UAA0E,EAC1Ew3C,YAAsB;IAEtBv3C,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACjEwP,oBAAoB,CAAC,uBAAuB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IACxD0J,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAEo3C,iBAAiB,EAAE,KAAK,CAAC;IACtEp3C,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;;;IAG9DJ,eAAe,CAAC,uBAAuB,EAAE,CAAC,EAAE43C,YAAY,EAAE,IAAI,CAAC;IAE/D,IAAI,IAAI,CAAClnC,MAAM,EAAE,KAAK,SAAS,IAAI,IAAI,CAACA,MAAM,EAAE,KAAK,OAAO,EAAE;MAC5D,MACE,gCAAgC,GAChC,IAAI,CAACA,MAAM,EAAE,GACb,yBAAyB;;IAI7B,IAAIknC,YAAY,KAAKl5C,SAAS,EAAE;MAC9Bk5C,YAAY,GAAG,IAAI;;IAGrB,IAAMp3C,QAAQ,GAAG,IAAIC,QAAQ,EAAqB;IAClD,IAAI,OAAOL,UAAU,KAAK,UAAU,EAAE;MACpCI,QAAQ,CAACI,OAAO,CAAC0U,KAAK,CAAC,cAAQ,CAAC;;IAGlC,IAAMuiC,eAAe,GAAG,SAAlBA,eAAe,CACnBlmD,KAAY,EACZuP,SAAkB,EAClBC,QAAsB;MAEtB,IAAIxP,KAAK,EAAE;QACT6O,QAAQ,CAACoV,MAAM,CAACjkB,KAAK,CAAC;OACvB,MAAM;QACL6O,QAAQ,CAACiV,OAAO,CAAC,IAAIrU,iBAAiB,CAACF,SAAS,EAAEC,QAAQ,CAAC,CAAC;;MAE9D,IAAI,OAAOf,UAAU,KAAK,UAAU,EAAE;QACpCA,UAAU,CAACzO,KAAK,EAAEuP,SAAS,EAAEC,QAAQ,CAAC;;KAEzC;IACD,IAAI,CAAC6R,IAAI,CAAC8kC,gBAAgB,CACxB,IAAI,CAACjhD,IAAI,EACT8gD,iBAAiB,EACjBE,eAAe,EACfD,YAAY,CACb;IAED,OAAOp3C,QAAQ,CAACI,OAAO;GACxB;;;;;;EAOD22C,+BAAW,GAAX,UACEl5C,QAAgC,EAChC+B,UAAsC;IAEtCC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IACjEwP,oBAAoB,CAAC,uBAAuB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IACxD2I,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAEnB,QAAQ,EAAE,KAAK,CAAC;IAC7DkC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAE9D,IAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAI,CAACuS,IAAI,CAAC0kC,eAAe,CACvB,IAAI,CAAC7gD,IAAI,CAACqD,KAAK,CAAC,WAAW,CAAC,EAC5BmE,QAAQ,EACR,IAAI,EACJmC,QAAQ,CAACG,YAAY,CAACP,UAAU,CAAC,CAClC;IACD,OAAOI,QAAQ,CAACI,OAAO;GACxB;;;;;;EAOD22C,wBAAI,GAAJ,UAAKzpD,KAAe,EAAEsS,UAAsC;IAC1DC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC1DwP,oBAAoB,CAAC,gBAAgB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IACjDyH,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,EAAExQ,KAAK,EAAE,IAAI,CAAC+I,IAAI,EAAE,IAAI,CAAC;IACpE0J,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAEH,UAAU,EAAE,IAAI,CAAC;IAEvD,IAAMyB,GAAG,GAAG,IAAI,CAACmR,IAAI,CAACk9B,UAAU,EAAE;IAClC,IAAM5hD,IAAI,GAAGoT,UAAU,CAACG,GAAG,CAAC;;;;;;IAO5B,IAAMk2C,gBAAgB,GAAG,IAAI,CAAC79C,KAAK,CAAC5L,IAAI,CAAC;IACzC,IAAM0pD,OAAO,GAAG,IAAI,CAAC99C,KAAK,CAAC5L,IAAI,CAAC;IAEhC,IAAIsS,OAAO;IACX,IAAI9S,KAAK,IAAI,IAAI,EAAE;MACjB8S,OAAO,GAAGm3C,gBAAgB,CAACzmD,GAAG,CAACxD,KAAK,EAAEsS,UAAU,CAAC,CAACysC,IAAI,CAAC;QAAM,cAAO;MAAA,EAAC;KACtE,MAAM;MACLjsC,OAAO,GAAGswC,OAAO,CAACz7B,OAAO,CAACuiC,OAAO,CAAC;;IAGpCD,gBAAgB,CAAClL,IAAI,GAAGjsC,OAAO,CAACisC,IAAI,CAACx7C,IAAI,CAACuP,OAAO,CAAC;IAClDm3C,gBAAgB,CAACziC,KAAK,GAAG1U,OAAO,CAACisC,IAAI,CAACx7C,IAAI,CAACuP,OAAO,EAAElC,SAAS,CAAC;IAE9D,IAAI,OAAO0B,UAAU,KAAK,UAAU,EAAE;MACpCQ,OAAO,CAAC0U,KAAK,CAAC,cAAQ,CAAC;;IAGzB,OAAOyiC,gBAAgB;GACxB;;;;EAKDR,gCAAY,GAAZ;IACEz3C,oBAAoB,CAAC,wBAAwB,EAAE,IAAI,CAACjJ,IAAI,CAAC;IACzD,OAAO,IAAIsJ,YAAY,CAAC,IAAI,CAAC6S,IAAI,EAAE,IAAI,CAACnc,IAAI,CAAC;GAC9C;EAEDqB,sBAAIq/C,+BAAQ;SAAZ;MACE,OAAO,IAAI,CAACU,YAAY,EAAE;KAC3B;;;;EAED//C,sBAAIq/C,0BAAG;SAAP;MACE,OAAO,IAAI,CAAC7mC,MAAM,EAAE;KACrB;;;;EAEDxY,sBAAIq/C,6BAAM;SAAV;MACE,OAAO,IAAI,CAACtmC,SAAS,EAAE;KACxB;;;;EAED/Y,sBAAIq/C,2BAAI;SAAR;MACE,OAAO,IAAI,CAACW,OAAO,EAAE;KACtB;;;;EACH,gBAAC;AAAD,CAzVA,CAA+B/kC,KAAK;AA2VpC;;;;;;AAMAA,KAAK,CAACJ,sBAAsB,GAAGwkC,SAAS;AACxC/vB,SAAS,CAACzU,sBAAsB,GAAGwkC,SAAS;;AC9Y5C;;;;;;;;;;;;;;;;AAsBA;;;AAGA;EAAA;;;IAGE,aAAQ,GAAoC,EAAE;IAC9C,eAAU,GAAG,CAAC;IACd,UAAK,GAAa,IAAI;;EACxB,eAAC;AAAD,CAAC;AAED;;;;;AAKA;;;;;;;EAOE,cACUY,KAAkB,EAClBC,OAA8B,EAC9BnoC,KAAsC;IAFtC;MAAAkoC,UAAkB;IAAA;IAClB;MAAAC,cAA8B;IAAA;IAC9B;MAAAnoC,YAAyBooC,QAAQ,EAAK;IAAA;IAFtC,UAAK,GAALF,KAAK;IACL,YAAO,GAAPC,OAAO;IACP,UAAK,GAALnoC,KAAK;;;;;;;;EASfqoC,sBAAO,GAAP,UAAQC,OAAsB;;IAE5B,IAAI1hD,IAAI,GAAG0hD,OAAO,YAAYpgD,IAAI,GAAGogD,OAAO,GAAG,IAAIpgD,IAAI,CAACogD,OAAO,CAAC;IAChE,IAAIr+C,KAAK,GAAG,IAAe;MACzBiI,IAAI,GAAGtL,IAAI,CAACkC,QAAQ,EAAE;IACxB,OAAOoJ,IAAI,KAAK,IAAI,EAAE;MACpB,IAAMqC,SAAS,GAAGqG,OAAO,CAAC3Q,KAAK,CAAC+V,KAAK,CAAC6I,QAAQ,EAAE3W,IAAI,CAAC,IAAI,IAAIk2C,QAAQ,EAAE;MACvEn+C,KAAK,GAAG,IAAIo+C,IAAI,CAACn2C,IAAI,EAAEjI,KAAK,EAAEsK,SAAS,CAAC;MACxC3N,IAAI,GAAGA,IAAI,CAACqC,QAAQ,EAAE;MACtBiJ,IAAI,GAAGtL,IAAI,CAACkC,QAAQ,EAAE;;IAGxB,OAAOmB,KAAK;GACb;;;;;;EAODo+C,uBAAQ,GAAR;IACE,OAAO,IAAI,CAACroC,KAAK,CAACniB,KAAK;GACxB;;;;;;EAODwqD,uBAAQ,GAAR,UAASxqD,KAAQ;IACfkD,MAAM,CAAC,OAAOlD,KAAK,KAAK,WAAW,EAAE,+BAA+B,CAAC;IACrE,IAAI,CAACmiB,KAAK,CAACniB,KAAK,GAAGA,KAAK;IACxB,IAAI,CAAC0qD,cAAc,EAAE;GACtB;;;;EAKDF,oBAAK,GAAL;IACE,IAAI,CAACroC,KAAK,CAACniB,KAAK,GAAG,IAAI;IACvB,IAAI,CAACmiB,KAAK,CAAC6I,QAAQ,GAAG,EAAE;IACxB,IAAI,CAAC7I,KAAK,CAACwoC,UAAU,GAAG,CAAC;IACzB,IAAI,CAACD,cAAc,EAAE;GACtB;;;;EAKDF,0BAAW,GAAX;IACE,OAAO,IAAI,CAACroC,KAAK,CAACwoC,UAAU,GAAG,CAAC;GACjC;;;;EAKDH,sBAAO,GAAP;IACE,OAAO,IAAI,CAACrzC,QAAQ,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAACyzC,WAAW,EAAE;GACvD;;;;;;EAODJ,2BAAY,GAAZ,UAAavzC,MAA+B;IAA5C;IACEpQ,IAAI,CAAC,IAAI,CAACsb,KAAK,CAAC6I,QAAQ,EAAE,UAAC5e,KAAa,EAAE+P,SAAsB;MAC9DlF,MAAM,CAAC,IAAIuzC,IAAI,CAAIp+C,KAAK,EAAE2R,KAAI,EAAE5B,SAAS,CAAC,CAAC;KAC5C,CAAC;GACH;;;;;;;;;;EAWDquC,gCAAiB,GAAjB,UACEvzC,MAA+B,EAC/B4zC,WAAqB,EACrBC,aAAuB;IAEvB,IAAID,WAAW,IAAI,CAACC,aAAa,EAAE;MACjC7zC,MAAM,CAAC,IAAI,CAAC;;IAGd,IAAI,CAACgI,YAAY,CAAC,eAAK;MACrB7S,KAAK,CAAC2+C,iBAAiB,CAAC9zC,MAAM,kBAAmB,IAAI,EAAE6zC,aAAa,CAAC;KACtE,CAAC;IAEF,IAAID,WAAW,IAAIC,aAAa,EAAE;MAChC7zC,MAAM,CAAC,IAAI,CAAC;;GAEf;;;;;;;;;EAUDuzC,8BAAe,GAAf,UACEvzC,MAAkC,EAClC4zC,WAAqB;IAErB,IAAIl2C,IAAI,GAAGk2C,WAAW,GAAG,IAAI,GAAG,IAAI,CAACv1B,MAAM,EAAE;IAC7C,OAAO3gB,IAAI,KAAK,IAAI,EAAE;MACpB,IAAIsC,MAAM,CAACtC,IAAI,CAAC,EAAE;QAChB,OAAO,IAAI;;MAEbA,IAAI,GAAGA,IAAI,CAAC2gB,MAAM,EAAE;;IAEtB,OAAO,KAAK;GACb;;;;;;;;EASDk1B,kDAAmC,GAAnC,UAAoCvzC,MAA+B;IACjE,IAAI,CAACgI,YAAY,CAAC,eAAK;MACrB,IAAI7S,KAAK,CAAC+K,QAAQ,EAAE,KAAK,IAAI,EAAE;QAC7BF,MAAM,CAAC7K,KAAK,CAAC;OACd,MAAM;QACLA,KAAK,CAAC4+C,mCAAmC,CAAC/zC,MAAM,CAAC;;KAEpD,CAAC;GACH;;;;EAKDuzC,mBAAI,GAAJ;IACE,OAAO,IAAIngD,IAAI,CACb,IAAI,CAACigD,OAAO,KAAK,IAAI,GACjB,IAAI,CAACD,KAAK,GACV,IAAI,CAACC,OAAO,CAACvhD,IAAI,EAAE,GAAG,GAAG,GAAG,IAAI,CAACshD,KAAK,CAC3C;GACF;;;;EAKDG,mBAAI,GAAJ;IACE,OAAO,IAAI,CAACH,KAAK;GAClB;;;;EAKDG,qBAAM,GAAN;IACE,OAAO,IAAI,CAACF,OAAO;GACpB;;;;;;EAOOE,6BAAc,GAAtB;IACE,IAAI,IAAI,CAACF,OAAO,KAAK,IAAI,EAAE;MACzB,IAAI,CAACA,OAAO,CAACW,YAAY,CAAC,IAAI,CAACZ,KAAK,EAAE,IAAI,CAAC;;GAE9C;;;;;;;;EASOG,2BAAY,GAApB,UAAqB/zC,SAAiB,EAAErK,KAAc;IACpD,IAAM8+C,UAAU,GAAG9+C,KAAK,CAAC6J,OAAO,EAAE;IAClC,IAAMk1C,WAAW,GAAGtqD,QAAQ,CAAC,IAAI,CAACshB,KAAK,CAAC6I,QAAQ,EAAEvU,SAAS,CAAC;IAC5D,IAAIy0C,UAAU,IAAIC,WAAW,EAAE;MAC7B,OAAO,IAAI,CAAChpC,KAAK,CAAC6I,QAAQ,CAACvU,SAAS,CAAC;MACrC,IAAI,CAAC0L,KAAK,CAACwoC,UAAU,EAAE;MACvB,IAAI,CAACD,cAAc,EAAE;KACtB,MAAM,IAAI,CAACQ,UAAU,IAAI,CAACC,WAAW,EAAE;MACtC,IAAI,CAAChpC,KAAK,CAAC6I,QAAQ,CAACvU,SAAS,CAAC,GAAGrK,KAAK,CAAC+V,KAAK;MAC5C,IAAI,CAACA,KAAK,CAACwoC,UAAU,EAAE;MACvB,IAAI,CAACD,cAAc,EAAE;;GAExB;EACH,WAAC;AAAD,CAAC;;ACzPD;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;AAEA;;;AAGA,IAAYU,iBAoBX;AApBD,WAAYA,iBAAiB;;;;EAI3BA,uDAAG;;;EAIHA,yDAAI;;;EAIJA,mEAAS;;;EAITA,iFAAgB;;EAGhBA,uEAAW;AACb,CAAC,EApBWA,iBAAiB,KAAjBA,iBAAiB;AAsB7B;;;;;;;AAOA;AACCpK,IAAY,CAACqK,wBAAwB,GAAG,EAAE;AAmC3C;;;;AAIA;AACCrK,IAAI,CAACsK,SAAiB,CAAC9J,iBAAiB,GAAG;;;;;;;EAO1C,IAAI,CAAC+J,qBAAqB,GAAG,IAAIf,IAAI,EAAiB;AACxD,CAAC;AAaD;;;;;;;;AAQAxJ,IAAI,CAACsK,SAAS,CAACtB,gBAAgB,GAAG,UAChCjhD,IAAU,EACV8gD,iBAA0C,EAC1Cv3C,UAAoE,EACpEw3C,YAAqB;EAErB,IAAI,CAACrgB,IAAI,CAAC,iBAAiB,GAAG1gC,IAAI,CAAC;;EAGnC,IAAMoe,aAAa,GAAG,SAAhBA,aAAa,GAAG,EAAc;EACpC,IAAMqkC,QAAQ,GAAG,IAAI/B,SAAS,CAAC,IAAI,EAAE1gD,IAAI,CAAC;EAC1CyiD,QAAQ,CAAC5jC,EAAE,CAAC,OAAO,EAAET,aAAa,CAAC;EACnC,IAAMskC,SAAS,GAAG,SAAZA,SAAS,GAAG;IAChBD,QAAQ,CAAC9jC,GAAG,CAAC,OAAO,EAAEP,aAAa,CAAC;GACrC;;EAGD,IAAMukC,WAAW,GAAgB;IAC/B3iD,IAAI;IACJjH,MAAM,EAAE+nD,iBAAiB;IACzBv3C,UAAU;;IAGV2wB,MAAM,EAAE,IAAI;;IAGZ0oB,KAAK,EAAEpqD,aAAa,EAAE;;IAGtBuoD,YAAY;;IAGZ8B,UAAU,EAAE,CAAC;;IAGbH,SAAS;;IAGTI,WAAW,EAAE,IAAI;IAEjBC,cAAc,EAAE,IAAI;IAEpBC,oBAAoB,EAAE,IAAI;IAE1BC,wBAAwB,EAAE,IAAI;IAE9BC,6BAA6B,EAAE;GAChC;;EAGD,IAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,CAACpjD,IAAI,CAAC;EAC/C2iD,WAAW,CAACK,oBAAoB,GAAGG,YAAY;EAC/C,IAAM5I,MAAM,GAAGoI,WAAW,CAAC5pD,MAAM,CAACoqD,YAAY,CAAC32C,GAAG,EAAE,CAAC;EACrD,IAAI+tC,MAAM,KAAK1yC,SAAS,EAAE;;IAExB86C,WAAW,CAACD,SAAS,EAAE;IACvBC,WAAW,CAACM,wBAAwB,GAAG,IAAI;IAC3CN,WAAW,CAACO,6BAA6B,GAAG,IAAI;IAChD,IAAIP,WAAW,CAACp5C,UAAU,EAAE;;MAE1B,IAAMe,QAAQ,GAAG,IAAIiP,YAAY,CAC/BopC,WAAW,CAACK,oBAAoB,EAChC,IAAItC,SAAS,CAAC,IAAI,EAAEiC,WAAW,CAAC3iD,IAAI,CAAC,EACrCsP,cAAc,CACf;MACDqzC,WAAW,CAACp5C,UAAU,CAAC,IAAI,EAAE,KAAK,EAAEe,QAAQ,CAAC;;GAEhD,MAAM;IACLxC,oBAAoB,CAClB,oCAAoC,EACpCyyC,MAAM,EACNoI,WAAW,CAAC3iD,IAAI,CACjB;;IAGD2iD,WAAW,CAACzoB,MAAM,GAAGmoB,iBAAiB,CAACgB,GAAG;IAC1C,IAAMC,SAAS,GAAG,IAAI,CAACd,qBAAqB,CAACe,OAAO,CAACvjD,IAAI,CAAC;IAC1D,IAAMwjD,SAAS,GAAGF,SAAS,CAACl1C,QAAQ,EAAE,IAAI,EAAE;IAC5Co1C,SAAS,CAAClmD,IAAI,CAACqlD,WAAW,CAAC;IAE3BW,SAAS,CAACG,QAAQ,CAACD,SAAS,CAAC;;;;IAK7B,IAAIE,eAAe;IACnB,IACE,OAAOnJ,MAAM,KAAK,QAAQ,IAC1BA,MAAM,KAAK,IAAI,IACfziD,QAAQ,CAACyiD,MAAM,EAAE,WAAW,CAAC,EAC7B;;MAEAmJ,eAAe,GAAG1vC,OAAO,CAACumC,MAAa,EAAE,WAAW,CAAC;MACrDpgD,MAAM,CACJoN,eAAe,CAACm8C,eAAe,CAAC,EAChC,4CAA4C,GAC1C,wEAAwE,CAC3E;KACF,MAAM;MACL,IAAMC,WAAW,GACf,IAAI,CAAC5K,eAAe,CAACt4B,sBAAsB,CAACzgB,IAAI,CAAC,IACjDuV,YAAY,CAAC/H,UAAU;MACzBk2C,eAAe,GAAGC,WAAW,CAACx2C,WAAW,EAAE,CAACX,GAAG,EAAE;;IAEnDk3C,eAAe,qCAAqCA,eAAe;IAEnE,IAAM1iC,YAAY,GAAG,IAAI,CAACw5B,oBAAoB,EAAE;IAChD,IAAMC,iBAAiB,GAAG1rC,cAAY,CAACwrC,MAAM,EAAEmJ,eAAe,CAAC;IAC/D,IAAMz3C,OAAO,GAAG2V,4BAA4B,CAC1C64B,iBAAiB,EACjB0I,YAAY,EACZniC,YAAY,CACb;IACD2hC,WAAW,CAACM,wBAAwB,GAAGxI,iBAAiB;IACxDkI,WAAW,CAACO,6BAA6B,GAAGj3C,OAAO;IACnD02C,WAAW,CAACI,cAAc,GAAG,IAAI,CAACrI,eAAe,EAAE;IAEnD,IAAM1sB,MAAM,GAAG,IAAI,CAAC+qB,eAAe,CAAC4B,kBAAkB,CACpD36C,IAAI,EACJiM,OAAO,EACP02C,WAAW,CAACI,cAAc,EAC1BJ,WAAW,CAAC5B,YAAY,CACzB;IACD,IAAI,CAAC/H,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAEguB,MAAM,CAAC;IAExD,IAAI,CAAC41B,sBAAsB,EAAE;;AAEjC,CAAC;AAED;;;;;;AAMA;AACC3L,IAAI,CAACsK,SAAiB,CAACa,eAAe,GAAG,UACxCpjD,IAAU,EACV6jD,WAAsB;EAEtB,OACE,IAAI,CAAC9K,eAAe,CAACt4B,sBAAsB,CAACzgB,IAAI,EAAE6jD,WAAW,CAAC,IAC9DtuC,YAAY,CAAC/H,UAAU;AAE3B,CAAC;AAED;;;;;;;;;;AAUA;AACCyqC,IAAI,CAACsK,SAAiB,CAACqB,sBAAsB,GAAG,UAC/Ch4C,IAAsD;EADP;EAC/C;IAAAA,OAA4B,IAAI,CAAC42C,qBAAqB;EAAA;;EAGtD,IAAI,CAAC52C,IAAI,EAAE;IACT,IAAI,CAACk4C,oCAAoC,CAACl4C,IAAI,CAAC;;EAGjD,IAAIA,IAAI,CAACwC,QAAQ,EAAE,KAAK,IAAI,EAAE;IAC5B,IAAM21C,KAAK,GAAG,IAAI,CAACC,sBAAsB,CAACp4C,IAAI,CAAC;IAC/CzR,MAAM,CAAC4pD,KAAK,CAACtqD,MAAM,GAAG,CAAC,EAAE,uCAAuC,CAAC;IAEjE,IAAMwqD,MAAM,GAAGF,KAAK,CAAC9nC,KAAK,CACxB,UAAC0mC,WAAwB;MAAK,kBAAW,CAACzoB,MAAM,KAAKmoB,iBAAiB,CAACgB,GAAG;IAAA,EAC3E;;IAGD,IAAIY,MAAM,EAAE;MACV,IAAI,CAACC,qBAAqB,CAACt4C,IAAI,CAAC5L,IAAI,EAAE,EAAE+jD,KAAK,CAAC;;GAEjD,MAAM,IAAIn4C,IAAI,CAACi2C,WAAW,EAAE,EAAE;IAC7Bj2C,IAAI,CAACsK,YAAY,CAAC,mBAAS;MACzBlB,KAAI,CAAC4uC,sBAAsB,CAACj2C,SAAS,CAAC;KACvC,CAAC;;AAEN,CAAC;AAED;;;;;;;AAOA;AACCsqC,IAAI,CAACsK,SAAiB,CAAC2B,qBAAqB,GAAG,UAC9ClkD,IAAU,EACV+jD,KAAoB;EAF0B;;EAK9C,IAAMI,YAAY,GAAGJ,KAAK,CAACjvC,GAAG,CAAC,aAAG;IAChC,OAAOsvC,GAAG,CAACrB,cAAc;GAC1B,CAAC;EACF,IAAMsB,WAAW,GAAG,IAAI,CAACjB,eAAe,CAACpjD,IAAI,EAAEmkD,YAAY,CAAC;EAC5D,IAAIG,UAAU,GAAGD,WAAW;EAC5B,IAAME,UAAU,GAAGF,WAAW,CAAC/tC,IAAI,EAAE;EACrC,KAAK,IAAI9c,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAM4qD,GAAG,GAAGL,KAAK,CAACvqD,CAAC,CAAC;IACpBW,MAAM,CACJiqD,GAAG,CAAClqB,MAAM,KAAKmoB,iBAAiB,CAACgB,GAAG,EACpC,+DAA+D,CAChE;IACDe,GAAG,CAAClqB,MAAM,GAAGmoB,iBAAiB,CAACmC,IAAI;IACnCJ,GAAG,CAACvB,UAAU,EAAE;IAChB,IAAMzgD,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACpC,IAAI,EAAEokD,GAAG,CAACpkD,IAAI,CAAC;;IAEtDskD,UAAU,GAAGA,UAAU,CAACt2C,WAAW,CACjC5L,YAAY,uBACZgiD,GAAG,CAACnB,wBAAwB,CAC7B;;EAGH,IAAMwB,UAAU,GAAGH,UAAU,CAAC93C,GAAG,CAAC,IAAI,CAAC;EACvC,IAAMk4C,UAAU,GAAG1kD,IAAI;;EAGvB,IAAI,CAACm8B,OAAO,CAACka,GAAG,CACdqO,UAAU,CAAC/sD,QAAQ,EAAE,EACrB8sD,UAAU,EACV,UAACvqB,MAAc;IACbllB,KAAI,CAAC0rB,IAAI,CAAC,0BAA0B,EAAE;MACpC1gC,IAAI,EAAE0kD,UAAU,CAAC/sD,QAAQ,EAAE;MAC3BuiC,MAAM;KACP,CAAC;IAEF,IAAIlM,MAAM,GAAY,EAAE;IACxB,IAAIkM,MAAM,KAAK,IAAI,EAAE;;;MAGnB,IAAMpc,SAAS,GAAG,EAAE;MACpB,KAAK,IAAItkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;QACrCuqD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACsC,SAAS;QAC7C32B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpBpb,KAAI,CAAC+jC,eAAe,CAAC/uB,YAAY,CAAC+5B,KAAK,CAACvqD,CAAC,CAAC,CAACupD,cAAc,CAAC,CAC3D;QACD,IAAIgB,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,EAAE;;UAEvB,IAAMqC,IAAI,GAAGm4C,KAAK,CAACvqD,CAAC,CAAC,CAAC0pD,6BAAqC;UAC3D,IAAM/oC,GAAG,GAAG,IAAIumC,SAAS,CAAC1rC,KAAI,EAAE+uC,KAAK,CAACvqD,CAAC,CAAC,CAACwG,IAAI,CAAC;UAC9C,IAAMsK,QAAQ,GAAG,IAAIiP,YAAY,CAAC3N,IAAI,EAAEuO,GAAG,EAAE7K,cAAc,CAAC;UAC5DwO,SAAS,CAACxgB,IAAI,CACZymD,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,CAAC/O,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE8P,QAAQ,CAAC,CACrD;;QAEHy5C,KAAK,CAACvqD,CAAC,CAAC,CAACkpD,SAAS,EAAE;;;MAItB1tC,KAAI,CAAC8uC,oCAAoC,CACvC9uC,KAAI,CAACwtC,qBAAqB,CAACe,OAAO,CAACvjD,IAAI,CAAC,CACzC;;MAEDgV,KAAI,CAAC4uC,sBAAsB,EAAE;MAE7B5uC,KAAI,CAACgkC,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAEguB,MAAM,CAAC;;MAGxD,KAAK,IAAIx0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGskB,SAAS,CAACrkB,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC+G,cAAc,CAACud,SAAS,CAACtkB,CAAC,CAAC,CAAC;;KAE/B,MAAM;;MAEL,IAAI0gC,MAAM,KAAK,WAAW,EAAE;QAC1B,KAAK,IAAI1gC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;UACrC,IAAIuqD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,KAAKmoB,iBAAiB,CAACuC,gBAAgB,EAAE;YAC1Db,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACwC,WAAW;WAChD,MAAM;YACLd,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACgB,GAAG;;;OAG5C,MAAM;QACLpoD,IAAI,CACF,iBAAiB,GAAGypD,UAAU,CAAC/sD,QAAQ,EAAE,GAAG,WAAW,GAAGuiC,MAAM,CACjE;QACD,KAAK,IAAI1gC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;UACrCuqD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACwC,WAAW;UAC/Cd,KAAK,CAACvqD,CAAC,CAAC,CAACspD,WAAW,GAAG5oB,MAAM;;;MAIjCllB,KAAI,CAAC+kC,kBAAkB,CAAC/5C,IAAI,CAAC;;GAEhC,EACDukD,UAAU,CACX;AACH,CAAC;AAED;;;;;;;;;;;;AAYA;AACCtM,IAAI,CAACsK,SAAiB,CAACxI,kBAAkB,GAAG,UAC3C1c,WAAiB;EAEjB,IAAMynB,uBAAuB,GAAG,IAAI,CAACC,2BAA2B,CAAC1nB,WAAW,CAAC;EAC7E,IAAMr9B,IAAI,GAAG8kD,uBAAuB,CAAC9kD,IAAI,EAAE;EAE3C,IAAM+jD,KAAK,GAAG,IAAI,CAACC,sBAAsB,CAACc,uBAAuB,CAAC;EAClE,IAAI,CAACE,sBAAsB,CAACjB,KAAK,EAAE/jD,IAAI,CAAC;EAExC,OAAOA,IAAI;AACb,CAAC;AAED;;;;;;;AAOA;AACCi4C,IAAI,CAACsK,SAAiB,CAACyC,sBAAsB,GAAG,UAC/CjB,KAAoB,EACpB/jD,IAAU;EAEV,IAAI+jD,KAAK,CAACtqD,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO;;;;EAKT,IAAMqkB,SAAS,GAAG,EAAE;EACpB,IAAIkQ,MAAM,GAAY,EAAE;;EAExB,IAAMi3B,WAAW,GAAGlB,KAAK,CAACx1B,MAAM,CAAC,WAAC;IAChC,OAAO6iB,CAAC,CAAClX,MAAM,KAAKmoB,iBAAiB,CAACgB,GAAG;GAC1C,CAAC;EACF,IAAMc,YAAY,GAAGc,WAAW,CAACnwC,GAAG,CAAC,WAAC;IACpC,OAAOs8B,CAAC,CAAC2R,cAAc;GACxB,CAAC;EACF,KAAK,IAAIvpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAMmpD,WAAW,GAAGoB,KAAK,CAACvqD,CAAC,CAAC;IAC5B,IAAM4I,YAAY,GAAGd,IAAI,CAACc,YAAY,CAACpC,IAAI,EAAE2iD,WAAW,CAAC3iD,IAAI,CAAC;IAC9D,IAAIklD,gBAAgB,GAAG,KAAK;MAC1BpC,WAAW;IACb3oD,MAAM,CACJiI,YAAY,KAAK,IAAI,EACrB,+DAA+D,CAChE;IAED,IAAIugD,WAAW,CAACzoB,MAAM,KAAKmoB,iBAAiB,CAACwC,WAAW,EAAE;MACxDK,gBAAgB,GAAG,IAAI;MACvBpC,WAAW,GAAGH,WAAW,CAACG,WAAW;MACrC90B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC/uB,YAAY,CAAC24B,WAAW,CAACI,cAAc,EAAE,IAAI,CAAC,CACpE;KACF,MAAM,IAAIJ,WAAW,CAACzoB,MAAM,KAAKmoB,iBAAiB,CAACgB,GAAG,EAAE;;MAEvD,IAAIV,WAAW,CAACE,UAAU,IAAK5K,IAAY,CAACqK,wBAAwB,EAAE;QACpE4C,gBAAgB,GAAG,IAAI;QACvBpC,WAAW,GAAG,UAAU;QACxB90B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC/uB,YAAY,CAAC24B,WAAW,CAACI,cAAc,EAAE,IAAI,CAAC,CACpE;OACF,MAAM;;QAEL,IAAMY,WAAW,GAAG,IAAI,CAACP,eAAe,CACtCT,WAAW,CAAC3iD,IAAI,EAChBmkD,YAAY,CACb;QACDxB,WAAW,CAACK,oBAAoB,GAAGW,WAAW;QAC9C,IAAMluB,OAAO,GAAGsuB,KAAK,CAACvqD,CAAC,CAAC,CAACT,MAAM,CAAC4qD,WAAW,CAACn3C,GAAG,EAAE,CAAC;QAClD,IAAIipB,OAAO,KAAK5tB,SAAS,EAAE;UACzBC,oBAAoB,CAClB,oCAAoC,EACpC2tB,OAAO,EACPktB,WAAW,CAAC3iD,IAAI,CACjB;UACD,IAAImlD,WAAW,GAAGp2C,cAAY,CAAC0mB,OAAO,CAAC;UACvC,IAAM2vB,mBAAmB,GACvB,OAAO3vB,OAAO,KAAK,QAAQ,IAC3BA,OAAO,IAAI,IAAI,IACf39B,QAAQ,CAAC29B,OAAO,EAAE,WAAW,CAAC;UAChC,IAAI,CAAC2vB,mBAAmB,EAAE;;YAExBD,WAAW,GAAGA,WAAW,CAACt3C,cAAc,CAAC81C,WAAW,CAACx2C,WAAW,EAAE,CAAC;;UAGrE,IAAMk4C,UAAU,GAAG1C,WAAW,CAACI,cAAc;UAC7C,IAAM/hC,YAAY,GAAG,IAAI,CAACw5B,oBAAoB,EAAE;UAChD,IAAM8K,eAAe,GAAG1jC,4BAA4B,CAClDujC,WAAW,EACXxB,WAAW,EACX3iC,YAAY,CACb;UAED2hC,WAAW,CAACM,wBAAwB,GAAGkC,WAAW;UAClDxC,WAAW,CAACO,6BAA6B,GAAGoC,eAAe;UAC3D3C,WAAW,CAACI,cAAc,GAAG,IAAI,CAACrI,eAAe,EAAE;;UAEnDyJ,YAAY,CAAC7wB,MAAM,CAAC6wB,YAAY,CAAC9oD,OAAO,CAACgqD,UAAU,CAAC,EAAE,CAAC,CAAC;UACxDr3B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC4B,kBAAkB,CACrCgI,WAAW,CAAC3iD,IAAI,EAChBslD,eAAe,EACf3C,WAAW,CAACI,cAAc,EAC1BJ,WAAW,CAAC5B,YAAY,CACzB,CACF;UACD/yB,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC/uB,YAAY,CAACq7B,UAAU,EAAE,IAAI,CAAC,CACpD;SACF,MAAM;UACLH,gBAAgB,GAAG,IAAI;UACvBpC,WAAW,GAAG,QAAQ;UACtB90B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC/uB,YAAY,CAAC24B,WAAW,CAACI,cAAc,EAAE,IAAI,CAAC,CACpE;;;;IAIP,IAAI,CAAC/J,WAAW,CAACC,yBAAyB,CAACj5C,IAAI,EAAEguB,MAAM,CAAC;IACxDA,MAAM,GAAG,EAAE;IACX,IAAIk3B,gBAAgB,EAAE;;MAEpBnB,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACsC,SAAS;;;MAI7C,CAAC,UAAUjC,SAAS;QAClBvmD,UAAU,CAACumD,SAAS,EAAEtmD,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;OACrC,EAAE0nD,KAAK,CAACvqD,CAAC,CAAC,CAACkpD,SAAS,CAAC;MAEtB,IAAIqB,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,EAAE;QACvB,IAAIu5C,WAAW,KAAK,QAAQ,EAAE;UAC5B,IAAM3oC,GAAG,GAAG,IAAIumC,SAAS,CAAC,IAAI,EAAEqD,KAAK,CAACvqD,CAAC,CAAC,CAACwG,IAAI,CAAC;;UAE9C,IAAMulD,SAAS,wBAAwBxB,KAAK,CAACvqD,CAAC,CAAC,CAACwpD,oBAAoB;UACpE,IAAM14C,QAAQ,GAAG,IAAIiP,YAAY,CAACgsC,SAAS,EAAEprC,GAAG,EAAE7K,cAAc,CAAC;UACjEwO,SAAS,CAACxgB,IAAI,CAACymD,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,CAAC/O,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE8P,QAAQ,CAAC,CAAC;SACtE,MAAM;UACLwT,SAAS,CAACxgB,IAAI,CACZymD,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,CAAC/O,IAAI,CAAC,IAAI,EAAE,IAAIQ,KAAK,CAAC8nD,WAAW,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CACpE;;;;;;EAOT,IAAI,CAACgB,oCAAoC,CAAC,IAAI,CAACtB,qBAAqB,CAAC;;EAGrE,KAAK,IAAIhpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGskB,SAAS,CAACrkB,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC+G,cAAc,CAACud,SAAS,CAACtkB,CAAC,CAAC,CAAC;;;EAI9B,IAAI,CAACoqD,sBAAsB,EAAE;AAC/B,CAAC;AAED;;;;;;;;AAQA;AACC3L,IAAI,CAACsK,SAAiB,CAACwC,2BAA2B,GAAG,UACpD/kD,IAAU;EAEV,IAAI+N,KAAK;;EAGT,IAAIy3C,eAAe,GAAG,IAAI,CAAChD,qBAAqB;EAChDz0C,KAAK,GAAG/N,IAAI,CAACkC,QAAQ,EAAE;EACvB,OAAO6L,KAAK,KAAK,IAAI,IAAIy3C,eAAe,CAACp3C,QAAQ,EAAE,KAAK,IAAI,EAAE;IAC5Do3C,eAAe,GAAGA,eAAe,CAACjC,OAAO,CAACx1C,KAAK,CAAC;IAChD/N,IAAI,GAAGA,IAAI,CAACqC,QAAQ,EAAE;IACtB0L,KAAK,GAAG/N,IAAI,CAACkC,QAAQ,EAAE;;EAGzB,OAAOsjD,eAAe;AACxB,CAAC;AAED;;;;;;;AAOA;AACCvN,IAAI,CAACsK,SAAiB,CAACyB,sBAAsB,GAAG,UAC/CwB,eAAoC;;EAGpC,IAAMC,gBAAgB,GAAkB,EAAE;EAC1C,IAAI,CAACC,kCAAkC,CAACF,eAAe,EAAEC,gBAAgB,CAAC;;EAG1EA,gBAAgB,CAACloD,IAAI,CAAC,UAACZ,CAAC,EAAEC,CAAC;IACzB,OAAOD,CAAC,CAACimD,KAAK,GAAGhmD,CAAC,CAACgmD,KAAK;GACzB,CAAC;EAEF,OAAO6C,gBAAgB;AACzB,CAAC;AAED;;;;;AAKA;AACCxN,IAAI,CAACsK,SAAiB,CAACmD,kCAAkC,GAAG,UAC3D95C,IAAyB,EACzBm4C,KAAoB;EAFuC;EAI3D,IAAMP,SAAS,GAAG53C,IAAI,CAACwC,QAAQ,EAAE;EACjC,IAAIo1C,SAAS,KAAK,IAAI,EAAE;IACtB,KAAK,IAAIhqD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgqD,SAAS,CAAC/pD,MAAM,EAAED,CAAC,EAAE,EAAE;MACzCuqD,KAAK,CAACzmD,IAAI,CAACkmD,SAAS,CAAChqD,CAAC,CAAC,CAAC;;;EAI5BoS,IAAI,CAACsK,YAAY,CAAC,eAAK;IACrBlB,KAAI,CAAC0wC,kCAAkC,CAACriD,KAAK,EAAE0gD,KAAK,CAAC;GACtD,CAAC;AACJ,CAAC;AAED;;;;;;AAMA;AACC9L,IAAI,CAACsK,SAAiB,CAACuB,oCAAoC,GAAG,UAC7Dl4C,IAAyB;EADoC;EAG7D,IAAMm4C,KAAK,GAAGn4C,IAAI,CAACwC,QAAQ,EAAE;EAC7B,IAAI21C,KAAK,EAAE;IACT,IAAI4B,EAAE,GAAG,CAAC;IACV,KAAK,IAAI59B,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGg8B,KAAK,CAACtqD,MAAM,EAAEsuB,IAAI,EAAE,EAAE;MAC9C,IAAIg8B,KAAK,CAACh8B,IAAI,CAAC,CAACmS,MAAM,KAAKmoB,iBAAiB,CAACsC,SAAS,EAAE;QACtDZ,KAAK,CAAC4B,EAAE,CAAC,GAAG5B,KAAK,CAACh8B,IAAI,CAAC;QACvB49B,EAAE,EAAE;;;IAGR5B,KAAK,CAACtqD,MAAM,GAAGksD,EAAE;IACjB/5C,IAAI,CAAC63C,QAAQ,CAACM,KAAK,CAACtqD,MAAM,GAAG,CAAC,GAAGsqD,KAAK,GAAG,IAAI,CAAC;;EAGhDn4C,IAAI,CAACsK,YAAY,CAAC,mBAAS;IACzBlB,KAAI,CAAC8uC,oCAAoC,CAACn2C,SAAS,CAAC;GACrD,CAAC;AACJ,CAAC;AAED;;;;;;;;AAQA;AACCsqC,IAAI,CAACsK,SAAiB,CAACxH,kBAAkB,GAAG,UAAU/6C,IAAU;EAApB;EAC3C,IAAMinB,YAAY,GAAG,IAAI,CAAC89B,2BAA2B,CAAC/kD,IAAI,CAAC,CAACA,IAAI,EAAE;EAElE,IAAMwlD,eAAe,GAAG,IAAI,CAAChD,qBAAqB,CAACe,OAAO,CAACvjD,IAAI,CAAC;EAEhEwlD,eAAe,CAACI,eAAe,CAAC,UAACh6C,IAAyB;IACxDoJ,KAAI,CAAC6wC,wBAAwB,CAACj6C,IAAI,CAAC;GACpC,CAAC;EAEF,IAAI,CAACi6C,wBAAwB,CAACL,eAAe,CAAC;EAE9CA,eAAe,CAACxD,iBAAiB,CAAC,UAACp2C,IAAyB;IAC1DoJ,KAAI,CAAC6wC,wBAAwB,CAACj6C,IAAI,CAAC;GACpC,CAAC;EAEF,OAAOqb,YAAY;AACrB,CAAC;AAED;;;;;;AAMA;AACCgxB,IAAI,CAACsK,SAAiB,CAACsD,wBAAwB,GAAG,UACjDj6C,IAAyB;EAEzB,IAAMm4C,KAAK,GAAGn4C,IAAI,CAACwC,QAAQ,EAAE;EAC7B,IAAI21C,KAAK,KAAK,IAAI,EAAE;;;IAGlB,IAAMjmC,SAAS,GAAG,EAAE;;;IAIpB,IAAIkQ,MAAM,GAAY,EAAE;IACxB,IAAI83B,QAAQ,GAAG,CAAC,CAAC;IACjB,KAAK,IAAItsD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuqD,KAAK,CAACtqD,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIuqD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,KAAKmoB,iBAAiB,CAACuC,gBAAgB,EAAE,CAE3D,KAAM,IAAIb,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,KAAKmoB,iBAAiB,CAACmC,IAAI,EAAE;QACrDrqD,MAAM,CACJ2rD,QAAQ,KAAKtsD,CAAC,GAAG,CAAC,EAClB,iDAAiD,CAClD;QACDssD,QAAQ,GAAGtsD,CAAC;;QAEZuqD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,GAAGmoB,iBAAiB,CAACuC,gBAAgB;QACpDb,KAAK,CAACvqD,CAAC,CAAC,CAACspD,WAAW,GAAG,KAAK;OAC7B,MAAM;QACL3oD,MAAM,CACJ4pD,KAAK,CAACvqD,CAAC,CAAC,CAAC0gC,MAAM,KAAKmoB,iBAAiB,CAACgB,GAAG,EACzC,wCAAwC,CACzC;;QAEDU,KAAK,CAACvqD,CAAC,CAAC,CAACkpD,SAAS,EAAE;QACpB10B,MAAM,GAAGA,MAAM,CAACoC,MAAM,CACpB,IAAI,CAAC2oB,eAAe,CAAC/uB,YAAY,CAAC+5B,KAAK,CAACvqD,CAAC,CAAC,CAACupD,cAAc,EAAE,IAAI,CAAC,CACjE;QACD,IAAIgB,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,EAAE;UACvB,IAAMe,QAAQ,GAAwB,IAAI;UAC1CwT,SAAS,CAACxgB,IAAI,CACZymD,KAAK,CAACvqD,CAAC,CAAC,CAAC+P,UAAU,CAAC/O,IAAI,CAAC,IAAI,EAAE,IAAIQ,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAEsP,QAAQ,CAAC,CAClE;;;;IAIP,IAAIw7C,QAAQ,KAAK,CAAC,CAAC,EAAE;;MAEnBl6C,IAAI,CAAC63C,QAAQ,CAAC,IAAI,CAAC;KACpB,MAAM;;MAELM,KAAK,CAACtqD,MAAM,GAAGqsD,QAAQ,GAAG,CAAC;;;IAI7B,IAAI,CAAC9M,WAAW,CAACC,yBAAyB,CAACrtC,IAAI,CAAC5L,IAAI,EAAE,EAAEguB,MAAM,CAAC;IAC/D,KAAK,IAAIx0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGskB,SAAS,CAACrkB,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC+G,cAAc,CAACud,SAAS,CAACtkB,CAAC,CAAC,CAAC;;;AAGlC,CAAC;;AC7xBD;;;;;;;;;;;;;;;;AAiCA;;;AAGA;EAEE,mCACUusD,IAAqB,EACrBC,aAAiD;IAF3D;IACU,SAAI,GAAJD,IAAI;IACJ,kBAAa,GAAbC,aAAa;IAHf,UAAK,GAAgC,IAAI;IAK/C,IAAI,CAACC,KAAK,GAAGD,aAAa,CAACE,YAAY,CAAC;MAAEt+C,QAAQ,EAAE;IAAI,CAAE,CAAC;IAC3D,IAAI,CAAC,IAAI,CAACq+C,KAAK,EAAE;MACfD,aAAa,CAACrrD,GAAG,EAAE,CAACq7C,IAAI,CAAC,cAAI;QAAI,OAAChhC,KAAI,CAACixC,KAAK,GAAGE,IAAI;MAAA,CAAC,CAAC;;;;;;;EAQzDC,4CAAQ,GAAR,UAASvQ,YAAqB;IAC5B,IAAI,CAAC,IAAI,CAACoQ,KAAK,EAAE;MACf,OAAO5L,OAAO,CAACz7B,OAAO,CAAC,IAAI,CAAC;;IAG9B,OAAO,IAAI,CAACqnC,KAAK,CAAClQ,QAAQ,CAACF,YAAY,CAAC,CAACp3B,KAAK,CAAC,eAAK;;;MAGlD,IAAI3jB,KAAK,IAAIA,KAAK,CAAC+E,IAAI,KAAK,4BAA4B,EAAE;QACxDtF,GAAG,CAAC,gEAAgE,CAAC;QACrE,OAAO,IAAI;OACZ,MAAM;QACL,OAAO8/C,OAAO,CAACt7B,MAAM,CAACjkB,KAAK,CAAC;;KAE/B,CAAC;GACH;EAEDsrD,0DAAsB,GAAtB,UAAuB/tB,QAAwC;;;IAG7D,IAAI,IAAI,CAAC4tB,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACI,oBAAoB,CAAChuB,QAAQ,CAAC;KAC1C,MAAM;MACLl8B,UAAU,CAAC;QAAM,eAAQ,CAAC,IAAI,CAAC;MAAA,GAAE,CAAC,CAAC;MACnC,IAAI,CAAC6pD,aAAa,CACfrrD,GAAG,EAAE,CACLq7C,IAAI,CAAC,cAAI;QAAI,WAAI,CAACqQ,oBAAoB,CAAChuB,QAAQ,CAAC;MAAA,EAAC;;GAEvD;EAED+tB,6DAAyB,GAAzB,UAA0B/tB,QAAwC;IAChE,IAAI,CAAC2tB,aAAa,CACfrrD,GAAG,EAAE,CACLq7C,IAAI,CAAC,cAAI;MAAI,WAAI,CAACsQ,uBAAuB,CAACjuB,QAAQ,CAAC;IAAA,EAAC;GACxD;EAED+tB,yDAAqB,GAArB;IACE,IAAIG,YAAY,GACd,yDAAyD,GACzD,IAAI,CAACR,IAAI,CAACtuD,IAAI,GACd,yDAAyD,GACzD,yBAAyB;IAC3B,IAAI,YAAY,IAAI,IAAI,CAACsuD,IAAI,CAACpe,OAAO,EAAE;MACrC4e,YAAY,IACV,kEAAkE,GAClE,8EAA8E,GAC9E,UAAU;KACb,MAAM,IAAI,gBAAgB,IAAI,IAAI,CAACR,IAAI,CAACpe,OAAO,EAAE;MAChD4e,YAAY,IACV,sEAAsE,GACtE,8EAA8E,GAC9E,UAAU;KACb,MAAM;MACLA,YAAY,IACV,kEAAkE,GAClE,4DAA4D,GAC5D,uCAAuC;;IAE3CtrD,IAAI,CAACsrD,YAAY,CAAC;GACnB;EACH,gCAAC;AAAD,CAAC;AAED;AACA;EAAA;EAGEC,6CAAQ,GAAR,UAAS3Q,YAAqB;IAC5B,OAAOwE,OAAO,CAACz7B,OAAO,CAAC;MACrBq3B,WAAW,EAAEuQ,0BAA0B,CAACC;KACzC,CAAC;GACH;EAEDD,2DAAsB,GAAtB,UAAuBnuB,QAAwC;;;IAG7DA,QAAQ,CAACmuB,0BAA0B,CAACC,mBAAmB,CAAC;GACzD;EAEDD,8DAAyB,GAAzB,UAA0BnuB,QAAwC,IAAU;EAE5EmuB,0DAAqB,GAArB,cAAgC;EAhBjBA,8CAAmB,GAAG,OAAO;EAiB9C,iCAAC;CAlBD;;ACnHA;;;;;;;;;;;;;;;;AAmCA;;;;;;;;AAQA,IAAME,mCAAmC,GAAG,iCAAiC;AAE7E,IAAIC,eAA4B;AAQhC;;;AAGA;EAAA;;;;IAIU,WAAM,GAIV,EAAE;;;;;IAME,mBAAc,GAAY,KAAK;;EAEhCC,uBAAW,GAAlB;IACE,IAAI,CAACD,eAAe,EAAE;MACpBA,eAAe,GAAG,IAAIC,WAAW,EAAE;;IAErC,OAAOD,eAAe;GACvB;;EAGDC,+BAAS,GAAT;;;MACE,KAAsB,wBAAM,CAACxpD,IAAI,CAAC,IAAI,CAACypD,MAAM,CAAC,6CAAE;QAA3C,IAAMC,OAAO;;UAChB,KAAoB,uCAAM,CAAC1pD,IAAI,CAAC,IAAI,CAACypD,MAAM,CAACC,OAAO,CAAC,CAAC,8CAAE;YAAlD,IAAMC,KAAK;YACd,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC7Q,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;GAG5C;EAED0Q,4BAAM,GAAN;;;MACE,KAAsB,wBAAM,CAACxpD,IAAI,CAAC,IAAI,CAACypD,MAAM,CAAC,6CAAE;QAA3C,IAAMC,OAAO;;UAChB,KAAoB,uCAAM,CAAC1pD,IAAI,CAAC,IAAI,CAACypD,MAAM,CAACC,OAAO,CAAC,CAAC,8CAAE;YAAlD,IAAMC,KAAK;YACd,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC,CAACC,KAAK,CAAC,CAACrL,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;GAGzC;;;;EAKDkL,2CAAqB,GAArB,UAAsBzqC,IAAU,EAAE9X,IAAY,EAAEqC,IAAY;IAC1DyV,IAAI,CAACovB,SAAS,GAAG,IAAIzmC,QAAQ,CACxBT,IAAI,SAAIqC,IAAM,eACH,KAAK,EACnByV,IAAI,CAACovB,SAAS,CAAChnC,SAAS,EACxB4X,IAAI,CAACovB,SAAS,CAAC/mC,aAAa,EAC5B2X,IAAI,CAACovB,SAAS,CAAC9mC,SAAS,EACxB0X,IAAI,CAACovB,SAAS,CAAC7mC,cAAc,EAC7ByX,IAAI,CAACovB,SAAS,CAAC5mC,6BAA6B,CAC7C;IAED,IAAIwX,IAAI,CAACovB,SAAS,CAAC9mC,SAAS,EAAE;MAC5B0X,IAAI,CAACg0B,kBAAkB,GAAG,IAAIqW,0BAA0B,EAAE;;GAE7D;;;;;;;EAQDI,qCAAe,GAAf,UACE5O,GAAoB,EACpBgP,YAAgD,EAChD9gB,GAAY,EACZzhC,SAAmB;IAEnB,IAAIsiD,KAAK,GAAuB7gB,GAAG,IAAI8R,GAAG,CAACrQ,OAAO,CAACsf,WAAW;IAC9D,IAAIF,KAAK,KAAKl/C,SAAS,EAAE;MACvB,IAAI,CAACmwC,GAAG,CAACrQ,OAAO,CAACuf,SAAS,EAAE;QAC1BnsD,KAAK,CACH,4DAA4D,GAC1D,sDAAsD,CACzD;;MAGHR,GAAG,CAAC,iCAAiC,EAAEy9C,GAAG,CAACrQ,OAAO,CAACuf,SAAS,CAAC;MAC7DH,KAAK,GAAM/O,GAAG,CAACrQ,OAAO,CAACuf,SAAS,iCAA8B;;IAGhE,IAAI7gD,SAAS,GAAGF,aAAa,CAAC4gD,KAAK,EAAEtiD,SAAS,CAAC;IAC/C,IAAI+B,QAAQ,GAAGH,SAAS,CAACG,QAAQ;IAEjC,IAAI2gD,UAAmB;IAEvB,IAAIC,cAAc,GAAuBv/C,SAAS;IAClD,IAAI,OAAOggC,OAAO,KAAK,WAAW,EAAE;MAClCuf,cAAc,GAAGvf,OAAO,CAACE,GAAG,CAAC2e,mCAAmC,CAAC;;IAGnE,IAAIU,cAAc,EAAE;MAClBD,UAAU,GAAG,IAAI;MACjBJ,KAAK,GAAG,YAAUK,cAAc,YAAO5gD,QAAQ,CAACjC,SAAW;MAC3D8B,SAAS,GAAGF,aAAa,CAAC4gD,KAAK,EAAEtiD,SAAS,CAAC;MAC3C+B,QAAQ,GAAGH,SAAS,CAACG,QAAQ;KAC9B,MAAM;MACL2gD,UAAU,GAAG,CAAC9gD,SAAS,CAACG,QAAQ,CAAClC,MAAM;;IAGzC,IAAM+iD,iBAAiB,GACrB5iD,SAAS,IAAI0iD,UAAU,GACnB,IAAIX,0BAA0B,EAAE,GAChC,IAAIJ,yBAAyB,CAACpO,GAAG,EAAEgP,YAAY,CAAC;IAEtD99C,WAAW,CAAC,+BAA+B,EAAE,CAAC,EAAE7C,SAAS,CAAC;IAC1D,IAAI,CAACA,SAAS,CAACrG,IAAI,CAACkN,OAAO,EAAE,EAAE;MAC7BnS,KAAK,CACH,6DAA6D,GAC3D,+BAA+B,CAClC;;IAGH,IAAMohB,IAAI,GAAG,IAAI,CAACmrC,UAAU,CAAC9gD,QAAQ,EAAEwxC,GAAG,EAAEqP,iBAAiB,CAAC;IAE9D,OAAOlrC,IAAI,CAACykC,QAAQ;GACrB;;;;;;EAODgG,gCAAU,GAAV,UAAWzqC,IAAU;IACnB,IAAMorC,QAAQ,GAAGvzC,OAAO,CAAC,IAAI,CAAC6yC,MAAM,EAAE1qC,IAAI,CAAC67B,GAAG,CAACvgD,IAAI,CAAC;;IAEpD,IAAI,CAAC8vD,QAAQ,IAAIvzC,OAAO,CAACuzC,QAAQ,EAAEprC,IAAI,CAACnlB,GAAG,CAAC,KAAKmlB,IAAI,EAAE;MACrDphB,KAAK,CACH,cAAYohB,IAAI,CAAC67B,GAAG,CAACvgD,IAAI,SAAI0kB,IAAI,CAACovB,SAAS,gCAA6B,CACzE;;IAEHpvB,IAAI,CAAC+5B,SAAS,EAAE;IAChB,OAAOqR,QAAQ,CAACprC,IAAI,CAACnlB,GAAG,CAAC;GAC1B;;;;;;;;;EAUD4vD,gCAAU,GAAV,UACEpgD,QAAkB,EAClBwxC,GAAoB,EACpBqP,iBAAoC;IAEpC,IAAIE,QAAQ,GAAGvzC,OAAO,CAAC,IAAI,CAAC6yC,MAAM,EAAE7O,GAAG,CAACvgD,IAAI,CAAC;IAE7C,IAAI,CAAC8vD,QAAQ,EAAE;MACbA,QAAQ,GAAG,EAAE;MACb,IAAI,CAACV,MAAM,CAAC7O,GAAG,CAACvgD,IAAI,CAAC,GAAG8vD,QAAQ;;IAGlC,IAAIprC,IAAI,GAAGnI,OAAO,CAACuzC,QAAQ,EAAE/gD,QAAQ,CAACjB,WAAW,EAAE,CAAC;IACpD,IAAI4W,IAAI,EAAE;MACRphB,KAAK,CACH,yHAAyH,CAC1H;;IAEHohB,IAAI,GAAG,IAAI87B,IAAI,CAACzxC,QAAQ,EAAE,IAAI,CAACghD,cAAc,EAAExP,GAAG,EAAEqP,iBAAiB,CAAC;IACtEE,QAAQ,CAAC/gD,QAAQ,CAACjB,WAAW,EAAE,CAAC,GAAG4W,IAAI;IAEvC,OAAOA,IAAI;GACZ;;;;;EAMDyqC,qCAAe,GAAf,UAAgBa,eAAwB;IACtC,IAAI,CAACD,cAAc,GAAGC,eAAe;GACtC;EACH,kBAAC;AAAD,CAAC;;ACzOD;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;EA4BE,kBAAoBC,aAAmB;IAAvC;IAAoB,kBAAa,GAAbA,aAAa;;IAtBzB,qBAAgB,GAAY,KAAK;IA8BzC,aAAQ,GAAG;MACT9kC,MAAM,EAAE;QAAA;;YACN,IAAI,CAAC+kC,aAAa,CAAC,QAAQ,CAAC;YAC5Bf,WAAW,CAACpW,WAAW,EAAE,CAACoX,UAAU,CAAC,IAAI,CAACv+C,KAAK,CAAC;YAChD,IAAI,CAACq+C,aAAa,GAAG,IAAI;YACzB,IAAI,CAACG,aAAa,GAAG,IAAI;;;;;KAE5B;;IAdC,IAAI,EAAEH,aAAa,YAAYzP,IAAI,CAAC,EAAE;MACpCl9C,KAAK,CACH,sEAAsE,CACvE;;;EAaLsG,sBAAY+6C,2BAAK;SAAjB;MACE,IAAI,CAAC,IAAI,CAAC0L,gBAAgB,EAAE;QAC1B,IAAI,CAACJ,aAAa,CAACxZ,KAAK,EAAE;QAC1B,IAAI,CAAC4Z,gBAAgB,GAAG,IAAI;;MAE9B,OAAO,IAAI,CAACJ,aAAa;KAC1B;;;;EAEDrmD,sBAAI+6C,2BAAK;SAAT;MACE,IAAI,CAAC,IAAI,CAACyL,aAAa,EAAE;QACvB,IAAI,CAACA,aAAa,GAAG,IAAInH,SAAS,CAAC,IAAI,CAACr3C,KAAK,EAAE/H,IAAI,CAACuiB,KAAK,CAAC;;MAG5D,OAAO,IAAI,CAACgkC,aAAa;KAC1B;;;;EAEDxmD,sBAAI+6C,yBAAG;SAAP;MACE,OAAO,IAAI,CAAC/yC,KAAK,CAAC2uC,GAAkB;KACrC;;;;;;;;;;;;EAUDoE,8BAAW,GAAX,UAAY/3C,IAAY,EAAEqC,IAAY;IACpC,IAAI,CAACihD,aAAa,CAAC,aAAa,CAAC;IACjC,IAAI,IAAI,CAACG,gBAAgB,EAAE;MACzB/sD,KAAK,CACH,wEAAwE,CACzE;MACD;;;IAIF6rD,WAAW,CAACpW,WAAW,EAAE,CAACuX,qBAAqB,CAC7C,IAAI,CAACL,aAAa,EAClBrjD,IAAI,EACJqC,IAAI,CACL;GACF;EAcD01C,sBAAG,GAAH,UAAIp8C,IAAyB;IAC3B,IAAI,CAAC2nD,aAAa,CAAC,KAAK,CAAC;IACzBn+C,gBAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAExD,IAAIuG,IAAI,YAAY0gD,SAAS,EAAE;MAC7B,OAAO,IAAI,CAACsH,UAAU,CAAChoD,IAAI,CAACrI,QAAQ,EAAE,CAAC;;IAGzC,OAAOqI,IAAI,KAAK6H,SAAS,GAAG,IAAI,CAAC4J,KAAK,CAACpO,KAAK,CAACrD,IAAI,CAAC,GAAG,IAAI,CAACyR,KAAK;GAChE;;;;;;;;EASD2qC,6BAAU,GAAV,UAAWlW,GAAW;;IAEpB,IAAM+hB,OAAO,GAAG,qBAAqB;IACrC,IAAI,CAACN,aAAa,CAACM,OAAO,CAAC;IAC3Bz+C,gBAAgB,CAACy+C,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEx+C,SAAS,CAAChQ,MAAM,CAAC;IACjD,IAAMyuD,SAAS,GAAG/hD,aAAa,CAAC+/B,GAAG,EAAE,IAAI,CAAC78B,KAAK,CAACkiC,SAAS,CAAC9mC,SAAS,CAAC;IACpEyE,WAAW,CAAC++C,OAAO,EAAE,CAAC,EAAEC,SAAS,CAAC;IAElC,IAAM1hD,QAAQ,GAAG0hD,SAAS,CAAC1hD,QAAQ;IACnC,IACE,CAAC,IAAI,CAAC6C,KAAK,CAACkiC,SAAS,CAACxmC,YAAY,EAAE,IACpCyB,QAAQ,CAACnC,IAAI,KAAK,IAAI,CAACgF,KAAK,CAACkiC,SAAS,CAAClnC,IAAI,EAC3C;MACAtJ,KAAK,CACHktD,OAAO,GACL,mDAAmD,GACnD,SAAS,GACTzhD,QAAQ,CAACnC,IAAI,GACb,gBAAgB,GAChB,IAAI,CAACgF,KAAK,CAACkiC,SAAS,CAAClnC,IAAI,GACzB,GAAG,CACN;;IAGH,OAAO,IAAI,CAAC8V,GAAG,CAAC+tC,SAAS,CAACloD,IAAI,CAACrI,QAAQ,EAAE,CAAC;GAC3C;;;;EAKOykD,gCAAa,GAArB,UAAsB6L,OAAe;IACnC,IAAI,IAAI,CAACP,aAAa,KAAK,IAAI,EAAE;MAC/B3sD,KAAK,CAAC,cAAc,GAAGktD,OAAO,GAAG,yBAAyB,CAAC;;GAE9D;;EAGD7L,4BAAS,GAAT;IACE5yC,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC9D,IAAI,CAACkuD,aAAa,CAAC,WAAW,CAAC;IAC/B,IAAI,CAACt+C,KAAK,CAAC6sC,SAAS,EAAE;GACvB;EAEDkG,2BAAQ,GAAR;IACE5yC,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAChQ,MAAM,CAAC;IAC7D,IAAI,CAACkuD,aAAa,CAAC,UAAU,CAAC;IAC9B,IAAI,CAACt+C,KAAK,CAACqyC,MAAM,EAAE;GACpB;EA5JeU,oBAAW,GAAG;IAC5B+L,SAAS,EAAE;MACT,KAAK,EAAE;KACR;IACDC,SAAS,EAAE,mBAAC7mC,KAAa;MACvB,OAAO;QACL,KAAK,EAAE;UACL,WAAW,EAAEA;;OAEhB;;GAEJ;EAkJH,eAAC;CApKD;;AChCA;;;;;;;;;;;;;;;;AAmCA;;;;;;;AAQO,IAAM8mC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAG;EAC9B7gB,mBAAmB,CAAC8gB,aAAa,EAAE;EACnCvnB,qBAAqB,CAACwnB,UAAU,EAAE;AACpC,CAAC;AAEM,IAAMC,eAAe,GAAG,SAAlBA,eAAe,GAAG;EAC7BznB,qBAAqB,CAACunB,aAAa,EAAE;AACvC,CAAC;AAED;AACO,IAAMpe,qBAAqB,GAAG,SAAxBA,qBAAqB,GAAG;EACnC,OAAO1C,mBAAmB,CAAC,aAAa,CAAC,EAAE;AAC7C,CAAC;AAEM,IAAMihB,wBAAwB,GAAG,SAA3BA,wBAAwB,CACnCtuC,GAAc,EACdoD,QAA6B;;EAG5BpD,GAAG,CAACgC,IAAI,CAACg8B,qBAA6B,CAACzB,sBAAsB,GAAGn5B,QAAQ;AAC3E,CAAC;AAEM,IAAMif,KAAK,GAAG,SAARA,KAAK,CAAariB,GAAc,EAAEwhC,SAAmB;EAChExhC,GAAG,CAACgC,IAAI,CAACqgB,KAAK,CAACmf,SAAS,CAAC;AAC3B,CAAC;AAEM,IAAM+M,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAavuC,GAAc,EAAE8hC,MAAc;EAC3E9hC,GAAG,CAACgC,IAAI,CAACusC,qBAAqB,CAACzM,MAAM,CAAC;AACxC,CAAC;AAEM,IAAM1C,eAAe,GAAG,SAAlBA,eAAe,CAAap/B,GAAc;EACrD,OAAOA,GAAG,CAACgC,IAAI,CAACo9B,eAAe;AACjC,CAAC;AAEM,IAAMoP,mBAAmB,GAAG,SAAtBA,mBAAmB,CAC9BxuC,GAAc,EACdoD,QAAkD;EAElD,OAAOpD,GAAG,CAACgC,IAAI,CAACysC,oBAAoB,CAACrrC,QAAQ,CAAC;AAChD,CAAC;AAED;;;;;;;;;SASgBsrC,cAAc,CAAIC,EAcjC;MAbC9Q,GAAG;IACH9R,GAAG;IACHgB,OAAO;IACP6hB,cAAc;IACdxkD,SAAS;IACTykD,iBAAiB;IAAjBvkD,SAAS,mBAAG,KAAK;EAYjBwiC,aAAa,CAACC,OAAO,CAAC;;;;;EAMtB,IAAM8f,YAAY,GAAG,IAAIiC,QAAQ,CAC/B,eAAe,EACf,IAAIC,kBAAkB,CAAC,qBAAqB,CAAC,CAC9C;EACDlC,YAAY,CAACmC,YAAY,CACvB,IAAIC,SAAS,CAAC,eAAe,EAAE;IAAM,qBAAc;EAAA,2BAAwB,CAC5E;EAED,OAAO;IACLC,QAAQ,EAAEzC,WAAW,CAACpW,WAAW,EAAE,CAAC8Y,eAAe,CACjDtR,GAAG,EACHgP,YAAY,EACZ9gB,GAAG,EACHzhC,SAAS,CACQ;IACnBF,SAAS;GACV;AACH;;;;;;;;;;;;;;ACtIA;;;;;;;;;;;;;;;;AAuBO,IAAMglD,cAAc,GAAGlZ,oBAAoB;AAElD;;;;AAIA;AACCA,oBAAoB,CAACkS,SAAiB,CAACiH,YAAY,GAAG,UACrDjoD,UAAkB,EAClBgI,UAAgC;EAEhC,IAAI,CAACynC,WAAW,CAAC,GAAG,EAAE;IAAEG,CAAC,EAAE5vC;EAAU,CAAE,EAAEgI,UAAU,CAAC;AACtD,CAAC;AAED;;;;AAIA;AACC8mC,oBAAoB,CAACkS,SAAiB,CAACkH,IAAI,GAAG,UAC7CluD,IAAa,EACbmuD,MAA4B;EAE5B,IAAI,CAAC1Y,WAAW,CAAC,MAAM,EAAE;IAAEtL,CAAC,EAAEnqC;EAAI,CAAE,EAAEmuD,MAAM,CAAC;AAC/C,CAAC;AAED;AACO,IAAMC,kBAAkB,GAAG9d,UAAU;AAE5C;;;;AAIO,IAAM+d,UAAU,GAAG,SAAbA,UAAU,CAAaC,OAAqB;EACvD,IAAMC,MAAM,GAAGzZ,oBAAoB,CAACkS,SAAS,CAAClM,GAAG;EACjDhG,oBAAoB,CAACkS,SAAS,CAAClM,GAAG,GAAG,UACnC90C,UAAU,EACVhG,IAAI,EACJgO,UAAU,EACV+M,IAAI;IAEJ,IAAIA,IAAI,KAAKzO,SAAS,EAAE;MACtByO,IAAI,GAAGuzC,OAAO,EAAE;;IAElBC,MAAM,CAAC1uC,IAAI,CAAC,IAAI,EAAE7Z,UAAU,EAAEhG,IAAI,EAAEgO,UAAU,EAAE+M,IAAI,CAAC;GACtD;EACD,OAAO;IACL+5B,oBAAoB,CAACkS,SAAS,CAAClM,GAAG,GAAGyT,MAAM;GAC5C;AACH,CAAC;AAED;;;AAGO,IAAMC,gBAAgB,GAAGjlD,QAAQ;AAExC;;;;AAIO,IAAMqb,eAAe,GAAG,SAAlBA,eAAe,CAAargB,KAAY;EACnD,OAAOA,KAAK,CAACqgB,eAAe,EAAE;AAChC,CAAC;AAED;;;;;AAKO,IAAMsnC,eAAe,GAAG,yBAAUA,gBAAwB;EAC/Db,WAAW,CAACpW,WAAW,EAAE,CAACiX,eAAe,CAACA,gBAAe,CAAC;AAC5D,CAAC;;;;;;;;;;;;;AC9FD;;;;;;;;;;;;;;;;IAoCMuC,WAAW,GAAG5N,QAAQ,CAAC4N;SAEbC,gBAAgB,CAACZ,QAA2B;;EAE1DpiB,aAAa,CAACoiB,QAAQ,CAACriB,WAAW,CAAC;;EAGnC,IAAMziC,SAAS,GAAI8kD,QAA+B,CAACa,QAAQ,CAACC,iBAAiB,CAC3E,IAAIf,SAAS,CACX,UAAU,EACV,UAACnrC,SAAS,EAAEioB,GAAG;;;IAGb,IAAM8R,GAAG,GAAG/5B,SAAS,CAACmsC,WAAW,CAAC,KAAK,CAAC,CAAClE,YAAY,EAAE;IACvD,IAAMc,YAAY,GAAG/oC,SAAS,CAACmsC,WAAW,CAAC,eAAe,CAAC;IAE3D,OAAOxD,WAAW,CAACpW,WAAW,EAAE,CAAC8Y,eAAe,CAC9CtR,GAAG,EACHgP,YAAY,EACZ9gB,GAAG,CACJ;GACF,wBAEF,CACEmkB,eAAe;;EAEd;IACE3J,SAAS;IACTpkC,KAAK;IACL8/B,QAAQ;IACR7iC,YAAY;IACZvf,aAAa;IACbkwD,QAAQ;IACRF,WAAW;IACXM,WAAW;GACZ,CACF,CACAC,oBAAoB,CAAC,IAAI,CAAC,CAC9B;EAEDlB,QAAQ,CAACmB,eAAe,CAAC/yD,IAAI,EAAEyvC,OAAO,CAAC;EAEvC,IAAIrrC,SAAS,EAAE,EAAE;IACf4uD,MAAM,CAACC,OAAO,GAAGnmD,SAAS;;AAE9B;AAEA0lD,gBAAgB,CAACU,QAAQ,CAAC","names":["domStorage_","DOMStorageWrapper","key","value","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","_i","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Object","Path","pathString","encodeURIComponent","String","begin","slice","pieces","childPathObj","childPieces","outerPath","innerPath","outer","getFront","inner","relativePath","popFront","left","right","leftKeys","rightKeys","cmp","other","getLength","j","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","ValidationPath","child","last","pop","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","internalHost","RepoInfo","isCustomHost","newHost","isCacheableHost","type","params","connURL","needsQueryParam","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","repoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","queryParams","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","comparePaths","prevPath","validateFirebaseMergeDataArg","getBack","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","repo_","OnDisconnect","onComplete","validateArgCount","arguments","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","TransactionResult","toJSON","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","successor","keyAsInt","next","i_1","source","sourcePlusOne","predecessor","repeat","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","__extends","KeyIndex","val","assertionError","indexValue","KEY_INDEX","MAX_NODE","setMaxNode","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","isEmpty","getPriority","__childrenNodeConstructor","value_","priorityNode_","LeafNode","EMPTY_NODE","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","index","action","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","result","color","LLRBNode","RED","SortedMap","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","LOG_2","logBase2","num","bitMask","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","newIndex","getCompare","indexName","newIndexSet","newIndexes","map","indexedChildren","_this","existingSnap","newChildren","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","hash","idx","resolveIndex_","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","_super","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","node_1","childData","ValueIndex","valueNode","VALUE_INDEX","indexPath_","PathIndex","snap","aChild","extractChild","bChild","node_","ref_","index_","DataSnapshot","exportVal","childPathString","childPath","childRef","childrenNode","getKey","numChildren","getRef","eventRegistration","prevName","DataEvent","ref","getParent","getEventRunner","getPath","CancelEvent","callback_","cancelCallback_","context_","ValueEventRegistration","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","getEventType","cancelCB_1","call","cb_1","callbacks_","ChildEventRegistration","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","thisCount","otherKey","thisKey","every","__referenceConstructor","repo","queryParams_","orderByCalled_","Query","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","hasStartAfter","endName","getIndexEndName","hasEndBefore","hasLimit","hasAnchoredLimit","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","validateContextObject","valueCallback","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","off","resolve","on","err","reject","limit","limitToFirst","limitToLast","validateNoPreviousOrderByCall_","parsedPath","newParams","orderBy","validateQueryEndpoints_","startAt","validateLimit_","startAfter","endAt","endBefore","toUrlEncodedString","getQueryObject","queryObject","sameRepo","samePath","sameQueryIdentifier","queryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","generateWithValues","values","Date","getTime","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","Map","SparseSnapshotTree","children","size","childKey","has","find","clear","remember","self_1","tree","forget","safeToRemove","delete","prefixPath","func","forEachTree","forEach","OperationType","fromUser","fromServer","queryId","tagged","OperationSource","affectedTree","revert","ACK_USER_WRITE","User","AckUserWrite","subtree","Empty","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childSnap","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","hasChild","eventCache_","serverCache_","ViewCache","eventSnap","complete","filtered","serverSnap","getNode","oldSnap","Change","VALUE","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","childRemovedChange","childAddedChange","childChangedChange","withIndex","newSnap","ChildChangeAccumulator","oldChange","changeMap","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","getEventCache","serverNode","getServerCache","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","viewCache","changes","filter_","ViewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","overwrite","applyUserOverwrite_","isFiltered","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","ackUserWrite_","revertUserWrite_","listenComplete_","getChanges","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","getCompleteEventSnap","valueChange","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","updateFullNode","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","updateEventSnap","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","getIndexedFilter","newServerNode","isCompleteForPath","updateServerSnap","generateEventCacheAfterServerEvent_","getCompleteChild","parent","newEventSnap","changedChildren","curViewCache","foreach","writePath","cacheHasChild_","viewMergeTree","serverChild","applyMerge_","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","EventGenerator","eventCache","eventRegistrations","events","moves","indexedValueChanged","childMovedChange","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","getPredecessorChildName","aWrapped","bWrapped","initialViewCache","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","View","cache","loadsAllData","eventRegistrations_","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","matches","hasAnyCallback","concat","applyOperation","assertIndexed","generateEventsForChanges_","initialChanges","eventNode","generateEventsForChanges","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","addEventRegistration","getInitialEvents","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","removeEventRegistration","getQuery","getCompleteServerCache","getCompleteView","viewForQuery","writeTree_","CompoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","updates","newWrite","addWrite","getCompleteNode","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","WriteTreeRef","writeId","visible","lastWriteId_","allWrites_","visibleWrites_","addWrites","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","removeWrite","treePath","writeIdsToExclude","includeHiddenWrites","subMerge","childCompoundWrite","hasCompleteWrite","layeredCache","write","mergeAtPath","layerTree_","completeServerChildren","topLevelSet","merge_1","getCompleteChildren","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","SyncTree","newData","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","addMerge","changeTree","fromObject","getWrite","needToReevaluate","affectedTree_1","Server","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","forServerTaggedQuery","applyTaggedOperation_","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","syncPoint","foreachChild","childSyncPoint","viewAlreadyExists","viewExistsForQuery","makeQueryKey_","queryToTagMap","getNextQueryTag_","tagToQueryMap","childWrites","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","fold","maybeChildSyncPoint","childMap","completeView","views_1","getQueryViews","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","applyTaggedListenComplete","applyListenComplete","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","SnapshotHolder","rootNode_","newSnapshotNode","StatsCollection","amount","counters_","deepCopy","StatsManager","hashString","collections_","creatorFunction","reporters_","collection_","StatsListener","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","collection","server_","statsListener_","reportStats_","StatsReporter","statsToReport_","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventDataList","currList","eventPath","eventLists_","EventList","add","queueEvents","raiseQueuedEventsMatchingPredicate_","changedPath","recursionDepth_","sentAll","eventList","raise","events_","eventFn","allowedEvents_","EventEmitter","listeners_","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","visible_","trigger","VisibilityMonitor","isMobileCordova","online_","OnlineMonitor","onMessage_","PacketReceiver","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","connId","applicationId","transportSessionId","lastSessionId","log_","stats_","getCollection","urlFn","connectionURL","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","open","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","m","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","repoInfo_","applicationId_","onReady_","onKill_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","onConnectionLost_","everConnected","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","token","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","scheduleConnect_","getInstance","onVisible_","onOnline_","onResponse","curReqNum","requestNumber_","connected_","realtime_","sendRequest","requestCBHash_","request","p","q","outstandingGet","outstandingGets_","outstandingGetCount_","sendGet_","currentHashFn","listens","listenSpec","sendListen_","req","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","authToken_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","token_1","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","onRealtimeDisconnect_","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","forceRefresh","forceTokenRefresh_","getToken","then","accessToken","interrupt","interruptReasons_","serverTimeOffset","put","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","clientName","isReactNative","currentlyOnline","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","toRestQueryStringParameters","restRequest_","status_1","authToken","authTokenData","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","forceRestClient_","app","Repo","authOverride","persistentConnection_","appId","addTokenChangeListener","refreshAuthToken","statsReporter_","getOrCreateReporter","transactionsInit_","infoData_","infoSyncTree_","infoEvents","applyServerOverwrite","updateInfo_","serverSyncTree_","eventQueue_","raiseEventsForChangedPath","unlisten","offsetNode","offset","serverTime","isMerge","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","applyServerMerge","rerunTransactions_","connectStatus","runOnDisconnectEvents_","updateSnapshot","nextWriteId_","cached","Promise","raiseEventsAtPath","newVal","generateServerValues","newNodeUnresolved","getNextWriteId_","applyUserOverwrite","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","resolvedOnDisconnectTree","resolved","onDisconnectPut","onDisconnectMerge","resume","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","metric","includeStat","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","makePost","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","getChildAfterChild","compareNext","remainsInWindow","nextChildInRange","QueryParams","startSet_","startAfterSet_","endBeforeSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","newLimit","copy_","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","database","setWithPriority","transactionUpdate","applyLocally","promiseComplete","startTransaction","thennablePushRef","pushRef","databaseProp","getRoot","name_","parent_","TreeNode","Tree","pathObj","updateParents_","childCount","hasChildren","includeSelf","childrenFirst","forEachDescendant","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","TransactionStatus","MAX_TRANSACTION_RETRIES_","prototype","transactionQueueTree_","watchRef","unwatcher","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","subTree","nodeQueue","setValue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","forEachAncestor","abortTransactionsOnNode_","lastSent","app_","authProvider_","auth_","getImmediate","auth","FirebaseAuthTokenProvider","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","FIREBASE_DATABASE_EMULATOR_HOST_VAR","_staticInstance","RepoManager","repos_","appName","dbUrl","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","createRepo","appRepos","useRestClient_","forceRestClient","repoInternal_","checkDeleted_","deleteRepo","rootInternal_","instanceStarted_","applyEmulatorSettings","refFromURL","apiName","parsedURL","TIMESTAMP","increment","forceLongPolling","forceDisallow","forceAllow","forceWebSockets","setSecurityDebugCallback","statsIncrementCounter","interceptServerData","interceptServerData_","initStandalone","_a","customAuthImpl","_b","Provider","ComponentContainer","setComponent","Component","instance","databaseFromApp","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","ServerValue","registerDatabase","INTERNAL","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","firebase"],"sources":["../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/util/Path.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/util/libs/parser.ts","../src/core/util/validation.ts","../src/api/onDisconnect.ts","../src/api/TransactionResult.ts","../src/core/util/NextPushId.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/comparators.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/snap/indexes/PathIndex.ts","../src/api/DataSnapshot.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/Query.ts","../src/core/util/ServerValues.ts","../src/core/SparseSnapshotTree.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/util/ImmutableTree.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/ViewCache.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/EventGenerator.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/SyncTree.ts","../src/core/SnapshotHolder.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/view/EventQueue.ts","../src/core/util/EventEmitter.ts","../src/core/util/VisibilityMonitor.ts","../src/core/util/OnlineMonitor.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/core/version.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/PersistentConnection.ts","../src/core/ReadonlyRestClient.ts","../src/core/Repo.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/api/Reference.ts","../src/core/util/Tree.ts","../src/core/Repo_transaction.ts","../src/core/AuthTokenProvider.ts","../src/core/RepoManager.ts","../src/api/Database.ts","../src/api/internal.ts","../src/api/test_access.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (\n          startName !== MIN_NAME &&\n          !(params.hasStartAfter() && startName === MAX_NAME)\n        ) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (\n          endName !== MAX_NAME &&\n          !(params.hasEndBefore() && endName === MIN_NAME)\n        ) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return this.repo.getValue(this);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);\n    validateKey('Query.startAfter', 2, name, true);\n\n    const newParams = this.queryParams_.startAfter(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' +\n          'or equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);\n    validateKey('Query.endBefore', 2, name, true);\n\n    const newParams = this.queryParams_.endBefore(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function (queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { assert, jsonEval, stringify, isNodeSdk } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: Query): Promise<string>;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk,\n  Deferred\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: Query): Promise<string> {\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query.path.toString(),\n      q: query.queryObject()\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: Query): Promise<string> {\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    const pathString = query.path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { Indexable } from './util/misc';\nimport { FirebaseAppLike } from './RepoManager';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    private forceRestClient_: boolean,\n    public app: FirebaseAppLike,\n    public authTokenProvider_: AuthTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  start(): void {\n    this.stats_ = StatsManager.getCollection(this.repoInfo_);\n\n    if (this.forceRestClient_ || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.authTokenProvider_\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = this.app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        this.authTokenProvider_,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    this.authTokenProvider_.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      this.repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  /**\n   * The purpose of `getValue` is to return the latest known value\n   * satisfying `query`.\n   *\n   * This method will first check for in-memory cached values\n   * belonging to active listeners. If they are found, such values\n   * are considered to be the most up-to-date.\n   *\n   * If the client is not connected, this method will try to\n   * establish a connection and request the value for `query`. If\n   * the client is not able to retrieve the query result, it reports\n   * an error.\n   *\n   * @param query - The query to surface a value for.\n   */\n  getValue(query: Query): Promise<DataSnapshot> {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = this.serverSyncTree_.calcCompleteEventCache(query.path);\n    if (!cached.isEmpty()) {\n      return Promise.resolve(\n        new DataSnapshot(\n          cached,\n          query.getRef(),\n          query.getQueryParams().getIndex()\n        )\n      );\n    }\n    return this.server_.get(query).then(\n      payload => {\n        const node = nodeFromJSON(payload as string);\n        const events = this.serverSyncTree_.applyServerOverwrite(\n          query.path,\n          node\n        );\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\n        return Promise.resolve(\n          new DataSnapshot(\n            node,\n            query.getRef(),\n            query.getQueryParams().getIndex()\n          )\n        );\n      },\n      err => {\n        this.log_('get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err as string));\n      }\n    );\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private startAfterSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n  private endBeforeSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  startAfter(indexValue: unknown, key?: string | null): QueryParams {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    const params: QueryParams = this.startAt(indexValue, childKey);\n    params.startAfterSet_ = true;\n    return params;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  endBefore(indexValue: unknown, key?: string | null): QueryParams {\n    let childKey: string;\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    const params: QueryParams = this.endAt(indexValue, childKey);\n    params.endBeforeSet_ = true;\n    return params;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function () {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function (\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function (\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function (\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function (\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function (\n  changedPath: Path\n): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function (\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function (\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function (\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function (\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function (path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseAppLike } from './RepoManager';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseAppLike,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseApp as FirebaseAppExp } from '@firebase/app-types-exp';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Intersection type that allows the SDK to be used from firebase-exp and\n * firebase v8.\n */\nexport type FirebaseAppLike = FirebaseApp | FirebaseAppExp;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * Update an existing repo in place to point to a new host/port.\n   */\n  applyEmulatorSettings(repo: Repo, host: string, port: number): void {\n    repo.repoInfo_ = new RepoInfo(\n      `${host}:${port}`,\n      /* secure= */ false,\n      repo.repoInfo_.namespace,\n      repo.repoInfo_.webSocketOnly,\n      repo.repoInfo_.nodeAdmin,\n      repo.repoInfo_.persistenceKey,\n      repo.repoInfo_.includeNamespaceInQueryParams\n    );\n\n    if (repo.repoInfo_.nodeAdmin) {\n      repo.authTokenProvider_ = new EmulatorAdminTokenProvider();\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseAppLike,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.key) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.key];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseAppLike,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  /** Track if the instance has been used (root or repo accessed) */\n  private instanceStarted_: boolean = false;\n\n  /** Backing state for root_ */\n  private rootInternal_?: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repoInternal_\n   */\n  constructor(private repoInternal_: Repo) {\n    if (!(repoInternal_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n  }\n\n  INTERNAL = {\n    delete: async () => {\n      this.checkDeleted_('delete');\n      RepoManager.getInstance().deleteRepo(this.repo_);\n      this.repoInternal_ = null;\n      this.rootInternal_ = null;\n    }\n  };\n\n  private get repo_(): Repo {\n    if (!this.instanceStarted_) {\n      this.repoInternal_.start();\n      this.instanceStarted_ = true;\n    }\n    return this.repoInternal_;\n  }\n\n  get root_(): Reference {\n    if (!this.rootInternal_) {\n      this.rootInternal_ = new Reference(this.repo_, Path.Empty);\n    }\n\n    return this.rootInternal_;\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app as FirebaseApp;\n  }\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host the emulator host (ex: localhost)\n   * @param port the emulator port (ex: 8080)\n   */\n  useEmulator(host: string, port: number): void {\n    this.checkDeleted_('useEmulator');\n    if (this.instanceStarted_) {\n      fatal(\n        'Cannot call useEmulator() after instance has already been initialized.'\n      );\n      return;\n    }\n\n    // Modify the repo to apply emulator settings\n    RepoManager.getInstance().applyEmulatorSettings(\n      this.repoInternal_,\n      host,\n      port\n    );\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (\n      !this.repo_.repoInfo_.isCustomHost() &&\n      repoInfo.host !== this.repo_.repoInfo_.host\n    ) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          this.repo_.repoInfo_.host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repoInternal_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\nimport { RepoManager } from '../core/RepoManager';\nimport { setSDKVersion } from '../core/version';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport * as types from '@firebase/database-types';\nimport {\n  Provider,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app A valid FirebaseApp-like object\n * @param url A valid Firebase databaseURL\n * @param version custom version e.g. firebase-admin version\n * @param customAuthImpl custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: RepoManager.getInstance().databaseFromApp(\n      app,\n      authProvider,\n      url,\n      nodeAdmin\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}