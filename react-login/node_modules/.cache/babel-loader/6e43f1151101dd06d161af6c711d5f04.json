{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { __spreadArrays, __assign } from 'tslib';\nimport { ErrorFactory, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { Component } from '@firebase/component';\nvar name = \"@firebase/performance\";\nvar version = \"0.4.5\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"trace started\" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.', _a[\"trace stopped\" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.', _a[\"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.', _a[\"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.', _a[\"no window\" /* NO_WINDOW */] = 'Window is not available.', _a[\"no app id\" /* NO_APP_ID */] = 'App id is not available.', _a[\"no project id\" /* NO_PROJECT_ID */] = 'Project id is not available.', _a[\"no api key\" /* NO_API_KEY */] = 'Api key is not available.', _a[\"invalid cc log\" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event', _a[\"FB not default\" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.', _a[\"RC response not ok\" /* RC_NOT_OK */] = 'RC response is not ok', _a[\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.', _a[\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.', _a[\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid', _a[\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.', _a);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\nvar Api = /** @class */function () {\n  function Api(window) {\n    this.window = window;\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n  Api.prototype.getUrl = function () {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  };\n  Api.prototype.mark = function (name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  };\n  Api.prototype.measure = function (measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  };\n  Api.prototype.getEntriesByType = function (type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  };\n  Api.prototype.getEntriesByName = function (name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  };\n  Api.prototype.getTimeOrigin = function () {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  };\n  Api.prototype.requiredApisAvailable = function () {\n    if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n      return false;\n    }\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  };\n  Api.prototype.setupObserver = function (entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    var observer = new this.PerformanceObserver(function (list) {\n      for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {\n        var entry = _a[_i];\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n    // Start observing the entry types you care about.\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  };\n  Api.getInstance = function () {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  };\n  return Api;\n}();\nfunction setupApi(window) {\n  windowInstance = window;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */);\n  }\n\n  var resultArray = [];\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n  return resultArray.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar settingsServiceInstance;\nvar SettingsService = /** @class */function () {\n  function SettingsService() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true;\n    // The variable which controls logging of custom traces.\n    this.dataCollectionEnabled = true;\n    // Configuration flags set through remote config.\n    this.loggingEnabled = false;\n    // Sampling rate between 0 and 1.\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1;\n    // Address of logging service.\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n    // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n    // Source type for performance event logs.\n    this.logSource = 462;\n    // Flags which control per session logging of traces and network requests.\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false;\n    // TTL of config retrieved from remote config in hours.\n    this.configTimeToLive = 12;\n  }\n  SettingsService.prototype.getAppId = function () {\n    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"no app id\" /* NO_APP_ID */);\n    }\n\n    return appId;\n  };\n  SettingsService.prototype.getProjectId = function () {\n    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"no project id\" /* NO_PROJECT_ID */);\n    }\n\n    return projectId;\n  };\n  SettingsService.prototype.getApiKey = function () {\n    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"no api key\" /* NO_API_KEY */);\n    }\n\n    return apiKey;\n  };\n  SettingsService.prototype.getFlTransportFullUrl = function () {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  };\n  SettingsService.getInstance = function () {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  };\n  return SettingsService;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar iid;\nfunction getIidPromise() {\n  var iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n// This method should be used after the iid is retrieved by getIidPromise method.\nfunction getIid() {\n  return iid;\n}\nfunction getAuthTokenPromise() {\n  var authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VisibilityState;\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return 2 /* CONTROLLED */;\n    } else {\n      return 3 /* UNCONTROLLED */;\n    }\n  } else {\n    return 1 /* UNSUPPORTED */;\n  }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1 /* CONNECTION_SLOW_2G */;\n    case '2g':\n      return 2 /* CONNECTION_2G */;\n    case '3g':\n      return 3 /* CONNECTION_3G */;\n    case '4g':\n      return 4 /* CONNECTION_4G */;\n    default:\n      return 0 /* UNKNOWN */;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\nfunction getConfig(iid) {\n  var config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n  return getRemoteConfig(iid).then(processConfig).then(function (config) {\n    return storeConfig(config);\n  }, /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\nfunction getRemoteConfig(iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise().then(function (authToken) {\n    var projectId = SettingsService.getInstance().getProjectId();\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\" + projectId + \"/namespaces/fireperf:fetch?key=\" + SettingsService.getInstance().getApiKey();\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: FIS_AUTH_PREFIX + \" \" + authToken\n      },\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: SettingsService.getInstance().getAppId(),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n    });\n\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n      // In case response is not ok. This will be caught by catch.\n      throw ERROR_FACTORY.create(\"RC response not ok\" /* RC_NOT_OK */);\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  }\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  }\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  }\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar initializationStatus = 1 /* notInitialized */;\nvar initializationPromise;\nfunction getInitializationPromise() {\n  initializationStatus = 2 /* initializationPending */;\n  initializationPromise = initializationPromise || initializePerf();\n  return initializationPromise;\n}\nfunction isPerfInitialized() {\n  return initializationStatus === 3 /* initialized */;\n}\n\nfunction initializePerf() {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise();\n  }).then(function (iid) {\n    return getConfig(iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler_1 = function handler_1() {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler_1);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler_1);\n    } else {\n      resolve();\n    }\n  });\n}\nfunction changeInitializationStatus() {\n  initializationStatus = 3 /* initialized */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nvar DEFAULT_REMAINING_TRIES = 3;\nvar MAX_EVENT_COUNT_PER_REQUEST = 1000;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\nvar queue = [];\nvar isTransportSetup = false;\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n    dispatchQueueEvents();\n  }, timeOffset);\n}\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n  sendEventsToFl(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = __spreadArrays(staged, queue);\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \" + remainingTries + \".\");\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    }\n    // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n    var logResponseDetails = res.logResponseDetails;\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = __spreadArrays(staged, queue);\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n    remainingTries = DEFAULT_REMAINING_TRIES;\n    // Schedule the next process.\n    processQueue(requestOffset);\n  });\n}\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\" /* INVALID_CC_LOG */);\n  }\n  // Add the new event to the queue.\n  queue = __spreadArrays(queue, [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\nfunction transportHandler(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var message = serializer.apply(void 0, args);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-enble camelcase */\nvar logger;\n// This method is not called before initialization.\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n  var settingsService = SettingsService.getInstance();\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(trace, 1 /* Trace */);\n  }, 0);\n}\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  var networkRequestUrl = networkRequest.url;\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(networkRequest, 0 /* NetworkRequest */);\n  }, 0);\n}\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0 /* NetworkRequest */) {\n    return serializeNetworkRequest(resource);\n  }\n  return serializeTrace(resource);\n}\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  var customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction getApplicationInfo() {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\nfunction convertMetricValueToInteger(providedValue) {\n  var valueAsInteger = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\"Metric value should be an Integer, setting the value as : \" + valueAsInteger + \".\");\n  }\n  return valueAsInteger;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Trace = /** @class */function () {\n  /**\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(name, isAuto, traceMeasureName) {\n    if (isAuto === void 0) {\n      isAuto = false;\n    }\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1 /* UNINITIALIZED */;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n    if (!this.isAuto) {\n      this.traceStartMark = TRACE_START_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceStopMark = TRACE_STOP_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n  Trace.prototype.start = function () {\n    if (this.state !== 1 /* UNINITIALIZED */) {\n      throw ERROR_FACTORY.create(\"trace started\" /* TRACE_STARTED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = 2 /* RUNNING */;\n  };\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n  Trace.prototype.stop = function () {\n    if (this.state !== 2 /* RUNNING */) {\n      throw ERROR_FACTORY.create(\"trace stopped\" /* TRACE_STOPPED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.state = 3 /* TERMINATED */;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  };\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n  Trace.prototype.record = function (startTime, duration, options) {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */, {\n        traceName: this.name\n      });\n    }\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = __assign({}, options.attributes);\n    }\n    if (options && options.metrics) {\n      for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {\n        var metric = _a[_i];\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  };\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist. The value will be floored down to an\r\n   * integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Increment by value\r\n   */\n  Trace.prototype.incrementMetric = function (counter, numAsInteger) {\n    if (numAsInteger === void 0) {\n      numAsInteger = 1;\n    }\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  };\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist. The value will be floored down to an integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Set custom metric to this value\r\n   */\n  Trace.prototype.putMetric = function (counter, numAsInteger) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */, {\n        customMetricName: counter\n      });\n    }\n  };\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n  Trace.prototype.getMetric = function (counter) {\n    return this.counters[counter] || 0;\n  };\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n  Trace.prototype.putAttribute = function (attr, value) {\n    var isValidName = isValidCustomAttributeName(attr);\n    var isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */, {\n        attributeValue: value\n      });\n    }\n  };\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n  Trace.prototype.getAttribute = function (attr) {\n    return this.customAttributes[attr];\n  };\n  Trace.prototype.removeAttribute = function (attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  };\n  Trace.prototype.getAttributes = function () {\n    return __assign({}, this.customAttributes);\n  };\n  Trace.prototype.setStartTime = function (startTime) {\n    this.startTimeUs = startTime;\n  };\n  Trace.prototype.setDuration = function (duration) {\n    this.durationUs = duration;\n  };\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n  Trace.prototype.calculateTraceMetrics = function () {\n    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  };\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n  Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {\n    var route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n    var FIRST_PAINT = 'first-paint';\n    var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      var firstPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_PAINT;\n      });\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n      var firstContentfulPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_CONTENTFUL_PAINT;\n      });\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n    logTrace(trace);\n  };\n  Trace.createUserTimingTrace = function (measureName) {\n    var trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  };\n  return Trace;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createNetworkRequestEntry(entry) {\n  var performanceEntry = entry;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\n  // Remove the query params from logged network request url.\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FID_WAIT_TIME_MS = 5000;\nfunction setupOobResources() {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(function () {\n    return setupOobTraces();\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests();\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces();\n  }, 0);\n}\nfunction setupNetworkRequests() {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n    var resource = resources_1[_i];\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\nfunction setupOobTraces() {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId_1 = setTimeout(function () {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId_1 = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId_1) {\n        clearTimeout(timeoutId_1);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\nfunction setupUserTimingTraces() {\n  var api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  var measures = api.getEntriesByType('measure');\n  for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {\n    var measure = measures_1[_i];\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\nfunction createUserTimingTrace(measure) {\n  var measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PerformanceController = /** @class */function () {\n  function PerformanceController(app) {\n    this.app = app;\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable().then(function (isAvailable) {\n        if (isAvailable) {\n          setupTransportService();\n          getInitializationPromise().then(setupOobResources, setupOobResources);\n        }\n      }).catch(function (error) {\n        consoleLogger.info(\"Environment doesn't support IndexedDB: \" + error);\n      });\n    }\n  }\n  PerformanceController.prototype.trace = function (name) {\n    return new Trace(name);\n  };\n  Object.defineProperty(PerformanceController.prototype, \"instrumentationEnabled\", {\n    get: function get() {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceController.prototype, \"dataCollectionEnabled\", {\n    get: function get() {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PerformanceController;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nfunction registerPerformance(instance) {\n  var factoryMethod = function factoryMethod(app, installations) {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(\"FB not default\" /* FB_NOT_DEFAULT */);\n    }\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n    }\n\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n  // Register performance with firebase-app.\n  instance.INTERNAL.registerComponent(new Component('performance', function (container) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because perf has `import '@firebase/installations'`\n    var installations = container.getProvider('installations').getImmediate();\n    return factoryMethod(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */));\n  instance.registerVersion(name, version);\n}\nregisterPerformance(firebase);\nexport { registerPerformance };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAmBO,IAAMA,WAAW,GAAGC,OAAO;AAClC;AACO,IAAMC,uBAAuB,GAAG,qBAAqB;AAC5D;AACO,IAAMC,sBAAsB,GAAG,oBAAoB;AAC1D;AACO,IAAMC,oBAAoB,GAAG,uBAAuB;AAC3D;AACO,IAAMC,0BAA0B,GAAG,MAAM;AAEzC,IAAMC,wBAAwB,GAAG,KAAK;AAEtC,IAAMC,mCAAmC,GAAG,MAAM;AAElD,IAAMC,8BAA8B,GAAG,MAAM;AAE7C,IAAMC,wBAAwB,GAAG,8BAA8B;AAE/D,IAAMC,+BAA+B,GAC1C,oCAAoC;AAE/B,IAAMC,OAAO,GAAG,aAAa;AAC7B,IAAMC,YAAY,GAAG,aAAa;;ACzCzC;;;;;;;;;;;;;;;;;AAsCA,IAAMC,qBAAqB,aACzBC,iDAAkC,wCAAwC,EAC1EA,iDAAkC,oCAAoC,EACtEA,uEACE,kDAAkD,EACpDA,oEACE,iDAAiD,EACnDA,kCAAuB,0BAA0B,EACjDA,kCAAuB,0BAA0B,EACjDA,0CAA2B,8BAA8B,EACzDA,oCAAwB,2BAA2B,EACnDA,4CAA4B,qCAAqC,EACjEA,4CACE,2EAA2E,EAC7EA,2CAAuB,uBAAuB,EAC9CA,4DACE,6CAA6C,EAC/CA,8DACE,+CAA+C,EACjDA,oEACE,mDAAmD,EACrDA,0EACE,sEAAsE,KACzE;AAYM,IAAMC,aAAa,GAAG,IAAIC,YAAY,CAC3CL,OAAO,EACPC,YAAY,EACZC,qBAAqB,CACtB;;AC7ED;;;;;;;;;;;;;;;;AAoBO,IAAMI,aAAa,GAAG,IAAIC,MAAM,CAACN,YAAY,CAAC;AACrDK,aAAa,CAACE,QAAQ,GAAGC,QAAQ,CAACC,IAAI;;ACrBtC;;;;;;;;;;;;;;;;AA4BA,IAAIC,WAA4B;AAChC,IAAIC,cAAkC;AAUtC;;;;AAIA;EAWE,aAAqBC,MAAe;IAAf,WAAM,GAANA,MAAM;IACzB,IAAI,CAACA,MAAM,EAAE;MACX,MAAMT,aAAa,CAACU,MAAM,6BAAqB;;;IAEjD,IAAI,CAACC,WAAW,GAAGF,MAAM,CAACE,WAAW;IACrC,IAAI,CAACC,mBAAmB,GAAGH,MAAM,CAACG,mBAAmB;IACrD,IAAI,CAACC,cAAc,GAAGJ,MAAM,CAACK,QAAQ;IACrC,IAAI,CAACC,SAAS,GAAGN,MAAM,CAACM,SAAS;IACjC,IAAI,CAACC,QAAQ,GAAGP,MAAM,CAACO,QAAQ;IAC/B,IAAI,IAAI,CAACD,SAAS,IAAI,IAAI,CAACA,SAAS,CAACE,aAAa,EAAE;;;MAGlD,IAAI,CAACC,YAAY,GAAGT,MAAM,CAACS,YAAY;;IAEzC,IAAIT,MAAM,CAACU,WAAW,IAAIV,MAAM,CAACU,WAAW,CAACC,iBAAiB,EAAE;MAC9D,IAAI,CAACA,iBAAiB,GAAGX,MAAM,CAACU,WAAW,CAACC,iBAAiB;;;EAIjEC,oBAAM,GAAN;;IAEE,OAAO,IAAI,CAACR,cAAc,CAACS,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC9C;EAEDF,kBAAI,GAAJ,UAAKG,IAAY;IACf,IAAI,CAAC,IAAI,CAACb,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAACc,IAAI,EAAE;MAC/C;;IAEF,IAAI,CAACd,WAAW,CAACc,IAAI,CAACD,IAAI,CAAC;GAC5B;EAEDH,qBAAO,GAAP,UAAQK,WAAmB,EAAEC,KAAa,EAAEC,KAAa;IACvD,IAAI,CAAC,IAAI,CAACjB,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAACkB,OAAO,EAAE;MAClD;;IAEF,IAAI,CAAClB,WAAW,CAACkB,OAAO,CAACH,WAAW,EAAEC,KAAK,EAAEC,KAAK,CAAC;GACpD;EAEDP,8BAAgB,GAAhB,UAAiBS,IAAe;IAC9B,IAAI,CAAC,IAAI,CAACnB,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAACoB,gBAAgB,EAAE;MAC3D,OAAO,EAAE;;IAEX,OAAO,IAAI,CAACpB,WAAW,CAACoB,gBAAgB,CAACD,IAAI,CAAC;GAC/C;EAEDT,8BAAgB,GAAhB,UAAiBG,IAAY;IAC3B,IAAI,CAAC,IAAI,CAACb,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAACqB,gBAAgB,EAAE;MAC3D,OAAO,EAAE;;IAEX,OAAO,IAAI,CAACrB,WAAW,CAACqB,gBAAgB,CAACR,IAAI,CAAC;GAC/C;EAEDH,2BAAa,GAAb;;IAEE,OACE,IAAI,CAACV,WAAW,KACf,IAAI,CAACA,WAAW,CAACsB,UAAU,IAAI,IAAI,CAACtB,WAAW,CAACuB,MAAM,CAACC,eAAe,CAAC;GAE3E;EAEDd,mCAAqB,GAArB;IACE,IACE,CAACe,KAAK,IACN,CAACC,OAAO,IACR,CAAC,IAAI,CAACtB,SAAS,IACf,CAAC,IAAI,CAACA,SAAS,CAACE,aAAa,EAC7B;MACAf,aAAa,CAACoC,IAAI,CAChB,wGAAwG,CACzG;MACD,OAAO,KAAK;;IAGd,IAAI,CAACC,oBAAoB,EAAE,EAAE;MAC3BrC,aAAa,CAACoC,IAAI,CAAC,gDAAgD,CAAC;MACpE,OAAO,KAAK;;IAEd,OAAO,IAAI;GACZ;EAEDjB,2BAAa,GAAb,UACEmB,SAAoB,EACpBC,QAA2C;IAE3C,IAAI,CAAC,IAAI,CAAC7B,mBAAmB,EAAE;MAC7B;;IAEF,IAAM8B,QAAQ,GAAG,IAAI,IAAI,CAAC9B,mBAAmB,CAAC,cAAI;MAChD,KAAoB,UAAiB,EAAjBb,SAAI,CAAC4C,UAAU,EAAE,EAAjBC,cAAiB,EAAjBA,IAAiB,EAAE;QAAlC,IAAMC,KAAK;;QAEdJ,QAAQ,CAACI,KAAK,CAAC;;KAElB,CAAC;;IAGFH,QAAQ,CAACI,OAAO,CAAC;MAAEC,UAAU,EAAE,CAACP,SAAS;IAAC,CAAE,CAAC;GAC9C;EAEMnB,eAAW,GAAlB;IACE,IAAId,WAAW,KAAKyC,SAAS,EAAE;MAC7BzC,WAAW,GAAG,IAAIc,GAAG,CAACb,cAAc,CAAC;;IAEvC,OAAOD,WAAW;GACnB;EACH,UAAC;AAAD,CAAC;SAEe0C,QAAQ,CAACxC,MAAc;EACrCD,cAAc,GAAGC,MAAM;AACzB;;AClKA;;;;;;;;;;;;;;;;SAmBgByC,YAAY,CAACC,KAAa,EAAEC,KAAa;EACvD,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,GAAGF,KAAK,CAACE,MAAM;EAC5C,IAAID,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAG,CAAC,EAAE;IAChC,MAAMrD,aAAa,CAACU,MAAM,qEAA2C;;;EAGvE,IAAM6C,WAAW,GAAG,EAAE;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;IACrCD,WAAW,CAACE,IAAI,CAACN,KAAK,CAACO,MAAM,CAACF,CAAC,CAAC,CAAC;IACjC,IAAIJ,KAAK,CAACE,MAAM,GAAGE,CAAC,EAAE;MACpBD,WAAW,CAACE,IAAI,CAACL,KAAK,CAACM,MAAM,CAACF,CAAC,CAAC,CAAC;;;EAIrC,OAAOD,WAAW,CAACI,IAAI,CAAC,EAAE,CAAC;AAC7B;;AClCA;;;;;;;;;;;;;;;;AAsBA,IAAIC,uBAAoD;AAExD;EAAA;;IAEE,2BAAsB,GAAG,IAAI;;IAG7B,0BAAqB,GAAG,IAAI;;IAG5B,mBAAc,GAAG,KAAK;;IAEtB,uBAAkB,GAAG,CAAC;IACtB,gCAA2B,GAAG,CAAC;;IAG/B,mBAAc,GACZ,mEAAmE;;;IAGrE,2BAAsB,GAAGV,YAAY,CACnC,kCAAkC,EAClC,iCAAiC,CAClC;IAED,iBAAY,GAAGA,YAAY,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;;IAG1E,cAAS,GAAG,GAAG;;IAGf,0BAAqB,GAAG,KAAK;IAC7B,4BAAuB,GAAG,KAAK;;IAG/B,qBAAgB,GAAG,EAAE;;EAMrBW,kCAAQ,GAAR;IACE,IAAMC,KAAK,GACT,IAAI,CAACC,mBAAmB,IACxB,IAAI,CAACA,mBAAmB,CAACC,OAAO,IAChC,IAAI,CAACD,mBAAmB,CAACC,OAAO,CAACF,KAAK;IACxC,IAAI,CAACA,KAAK,EAAE;MACV,MAAM9D,aAAa,CAACU,MAAM,6BAAqB;;;IAEjD,OAAOoD,KAAK;GACb;EAEDD,sCAAY,GAAZ;IACE,IAAMI,SAAS,GACb,IAAI,CAACF,mBAAmB,IACxB,IAAI,CAACA,mBAAmB,CAACC,OAAO,IAChC,IAAI,CAACD,mBAAmB,CAACC,OAAO,CAACC,SAAS;IAC5C,IAAI,CAACA,SAAS,EAAE;MACd,MAAMjE,aAAa,CAACU,MAAM,qCAAyB;;;IAErD,OAAOuD,SAAS;GACjB;EAEDJ,mCAAS,GAAT;IACE,IAAMK,MAAM,GACV,IAAI,CAACH,mBAAmB,IACxB,IAAI,CAACA,mBAAmB,CAACC,OAAO,IAChC,IAAI,CAACD,mBAAmB,CAACC,OAAO,CAACE,MAAM;IACzC,IAAI,CAACA,MAAM,EAAE;MACX,MAAMlE,aAAa,CAACU,MAAM,+BAAsB;;;IAElD,OAAOwD,MAAM;GACd;EAEDL,+CAAqB,GAArB;IACE,OAAO,IAAI,CAACM,sBAAsB,CAACC,MAAM,CAAC,OAAO,EAAE,IAAI,CAACC,YAAY,CAAC;GACtE;EAEMR,2BAAW,GAAlB;IACE,IAAID,uBAAuB,KAAKZ,SAAS,EAAE;MACzCY,uBAAuB,GAAG,IAAIC,eAAe,EAAE;;IAEjD,OAAOD,uBAAuB;GAC/B;EACH,sBAAC;AAAD,CAAC;;AC1GD;;;;;;;;;;;;;;;;AAkBA,IAAIU,GAAuB;SAGXC,aAAa;EAC3B,IAAMC,UAAU,GAAGX,eAAe,CAACY,WAAW,EAAE,CAACC,oBAAoB,CAACC,KAAK,EAAE;;EAE7EH,UAAU,CAACI,IAAI,CAAC,UAACC,MAAc;IAC7BP,GAAG,GAAGO,MAAM;GACb,CAAC;EACF,OAAOL,UAAU;AACnB;AAEA;SACgBM,MAAM;EACpB,OAAOR,GAAG;AACZ;SAEgBS,mBAAmB;EACjC,IAAMC,gBAAgB,GAAGnB,eAAe,CAACY,WAAW,EAAE,CAACC,oBAAoB,CAACO,QAAQ,EAAE;;EAEtFD,gBAAgB,CAACJ,IAAI,CAAC,UAACM,YAAoB,IAE1C,CAAC;EACF,OAAOF,gBAAgB;AACzB;;AC1CA;;;;;;;;;;;;;;;;AA2BA,IAAYG,eAIX;AAJD,WAAYA,eAAe;EACzBA,2DAAW;EACXA,2DAAW;EACXA,yDAAU;AACZ,CAAC,EAJWA,eAAe,KAAfA,eAAe;AA2B3B,IAAMC,2BAA2B,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,KAAK,CAAC;AACnE,IAAMC,sBAAsB,GAAG,IAAIC,MAAM,CAAC,gBAAgB,CAAC;AAC3D,IAAMC,yBAAyB,GAAG,EAAE;AACpC,IAAMC,0BAA0B,GAAG,GAAG;SAEtBC,sBAAsB;EACpC,IAAM1E,SAAS,GAAGM,GAAG,CAACoD,WAAW,EAAE,CAAC1D,SAAS;EAC7C,IAAI,eAAe,IAAIA,SAAS,EAAE;IAChC,IAAIA,SAAS,CAAC2E,aAAa,CAACC,UAAU,EAAE;MACtC;KACD,MAAM;MACL;;GAEH,MAAM;IACL;;AAEJ;;SAEgBC,kBAAkB;EAChC,IAAM5E,QAAQ,GAAGK,GAAG,CAACoD,WAAW,EAAE,CAACzD,QAAQ;EAC3C,IAAM6E,eAAe,GAAG7E,QAAQ,CAAC6E,eAAe;EAChD,QAAQA,eAAe;IACrB,KAAK,SAAS;MACZ,OAAOV,eAAe,CAACW,OAAO;IAChC,KAAK,QAAQ;MACX,OAAOX,eAAe,CAACY,MAAM;IAC/B;MACE,OAAOZ,eAAe,CAACa,OAAO;EAAC;AAErC;SAEgBC,0BAA0B;EACxC,IAAMlF,SAAS,GAAGM,GAAG,CAACoD,WAAW,EAAE,CAAC1D,SAAS;EAC7C,IAAMmF,mBAAmB,GAAInF,SAAqC,CAACoF,UAAU;EAC7E,IAAMC,aAAa,GACjBF,mBAAmB,IAAIA,mBAAmB,CAACE,aAAa;EAC1D,QAAQA,aAAa;IACnB,KAAK,SAAS;MACZ;IACF,KAAK,IAAI;MACP;IACF,KAAK,IAAI;MACP;IACF,KAAK,IAAI;MACP;IACF;MACE;EAAuC;AAE7C;;SAEgBC,0BAA0B,CAAC7E,IAAY;EACrD,IAAIA,IAAI,CAAC8B,MAAM,KAAK,CAAC,IAAI9B,IAAI,CAAC8B,MAAM,GAAGiC,yBAAyB,EAAE;IAChE,OAAO,KAAK;;EAEd,IAAMe,qBAAqB,GAAGlB,2BAA2B,CAACmB,IAAI,CAAC,gBAAM;IACnE,WAAI,CAACC,UAAU,CAACC,MAAM,CAAC;GAAA,CACxB;EACD,OAAO,CAACH,qBAAqB,IAAI,CAAC,CAAC9E,IAAI,CAACkF,KAAK,CAACrB,sBAAsB,CAAC;AACvE;SAEgBsB,2BAA2B,CAACC,KAAa;EACvD,OAAOA,KAAK,CAACtD,MAAM,KAAK,CAAC,IAAIsD,KAAK,CAACtD,MAAM,IAAIkC,0BAA0B;AACzE;;ACpHA;;;;;;;;;;;;;;;;AA6BA,IAAMqB,yBAAyB,GAAG,OAAO;AAWzC;AACA;AACA,IAAMC,eAAe,GAAoB;EACvCC,cAAc,EAAE;CACjB;AAoBD,IAAMC,eAAe,GAAG,6BAA6B;SAErCC,SAAS,CAAC3C,GAAW;EACnC,IAAM4C,MAAM,GAAGC,eAAe,EAAE;EAChC,IAAID,MAAM,EAAE;IACVE,aAAa,CAACF,MAAM,CAAC;IACrB,OAAO7E,OAAO,CAACgF,OAAO,EAAE;;EAG1B,OAAOC,eAAe,CAAChD,GAAG,CAAC,CACxBM,IAAI,CAACwC,aAAa,CAAC,CACnBxC,IAAI,CACH,gBAAM;IAAI,kBAAW,CAACsC,MAAM,CAAC;EAAA;EAE7B,cAAQ,CACT;AACL;AAEA,SAASC,eAAe;EACtB,IAAMjG,YAAY,GAAGG,GAAG,CAACoD,WAAW,EAAE,CAACvD,YAAY;EACnD,IAAI,CAACA,YAAY,EAAE;IACjB;;EAEF,IAAMqG,YAAY,GAAGrG,YAAY,CAACsG,OAAO,CAAC7H,+BAA+B,CAAC;EAC1E,IAAI,CAAC4H,YAAY,IAAI,CAACE,WAAW,CAACF,YAAY,CAAC,EAAE;IAC/C;;EAGF,IAAMG,iBAAiB,GAAGxG,YAAY,CAACsG,OAAO,CAAC9H,wBAAwB,CAAC;EACxE,IAAI,CAACgI,iBAAiB,EAAE;IACtB;;EAEF,IAAI;IACF,IAAMC,cAAc,GAAyBC,IAAI,CAACC,KAAK,CAACH,iBAAiB,CAAC;IAC1E,OAAOC,cAAc;GACtB,CAAC,WAAM;IACN;;AAEJ;AAEA,SAASG,WAAW,CAACZ,MAAwC;EAC3D,IAAMhG,YAAY,GAAGG,GAAG,CAACoD,WAAW,EAAE,CAACvD,YAAY;EACnD,IAAI,CAACgG,MAAM,IAAI,CAAChG,YAAY,EAAE;IAC5B;;EAGFA,YAAY,CAAC6G,OAAO,CAACrI,wBAAwB,EAAEkI,IAAI,CAACI,SAAS,CAACd,MAAM,CAAC,CAAC;EACtEhG,YAAY,CAAC6G,OAAO,CAClBpI,+BAA+B,EAC/BsI,MAAM,CACJC,IAAI,CAACC,GAAG,EAAE,GACRtE,eAAe,CAACY,WAAW,EAAE,CAAC2D,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAClE,CACF;AACH;AAEA,IAAMC,wBAAwB,GAC5B,kDAAkD;AAEpD,SAASf,eAAe,CACtBhD,GAAW;;EAGX,OAAOS,mBAAmB,EAAE,CACzBH,IAAI,CAAC,mBAAS;IACb,IAAMX,SAAS,GAAGJ,eAAe,CAACY,WAAW,EAAE,CAAC6D,YAAY,EAAE;IAC9D,IAAMC,cAAc,GAAG,6DAA2DtE,SAAS,uCAAkCJ,eAAe,CAACY,WAAW,EAAE,CAAC+D,SAAS,EAAI;IACxK,IAAMC,OAAO,GAAG,IAAIC,OAAO,CAACH,cAAc,EAAE;MAC1CI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAEC,aAAa,EAAK7B,eAAe,SAAI8B;MAAW,CAAE;;MAE7DC,IAAI,EAAEnB,IAAI,CAACI,SAAS,CAAC;QACnBgB,eAAe,EAAE1E,GAAG;QACpB2E,qBAAqB,EAAEH,SAAS;QAChCI,MAAM,EAAErF,eAAe,CAACY,WAAW,EAAE,CAAC0E,QAAQ,EAAE;QAChDC,WAAW,EAAEnK,WAAW;QACxBoK,WAAW,EAAExC;OACd;;KAEF,CAAC;;IACF,OAAOzE,KAAK,CAACqG,OAAO,CAAC,CAAC7D,IAAI,CAAC,kBAAQ;MACjC,IAAI0E,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,EAA0B;;;MAGhD,MAAMxJ,aAAa,CAACU,MAAM,sCAAqB;KAChD,CAAC;GACH,CAAC,CACD+I,KAAK,CAAC;IACLvJ,aAAa,CAACoC,IAAI,CAAC+F,wBAAwB,CAAC;IAC5C,OAAOrF,SAAS;GACjB,CAAC;AACN;AAEA;;;;;AAKA,SAASoE,aAAa,CACpBF,MAA6B;EAE7B,IAAI,CAACA,MAAM,EAAE;IACX,OAAOA,MAAM;;EAEf,IAAMtD,uBAAuB,GAAGC,eAAe,CAACY,WAAW,EAAE;EAC7D,IAAMiF,OAAO,GAAGxC,MAAM,CAACwC,OAAO,IAAI,EAAE;EACpC,IAAIA,OAAO,CAACC,WAAW,KAAK3G,SAAS,EAAE;;;IAGrCY,uBAAuB,CAACmD,cAAc,GACpCkB,MAAM,CAACyB,OAAO,CAACC,WAAW,CAAC,KAAK,MAAM;GACzC,MAAwD;;;IAGvD/F,uBAAuB,CAACmD,cAAc,GAAGD,eAAe,CAACC,cAAc;;EAEzE,IAAI2C,OAAO,CAACE,cAAc,EAAE;IAC1BhG,uBAAuB,CAACiG,SAAS,GAAGC,MAAM,CAACJ,OAAO,CAACE,cAAc,CAAC;;EAKpE,IAAIF,OAAO,CAACK,oBAAoB,EAAE;IAChCnG,uBAAuB,CAACoG,cAAc,GAAGN,OAAO,CAACK,oBAAoB;;;EAMvE,IAAIL,OAAO,CAACO,qBAAqB,EAAE;IACjCrG,uBAAuB,CAACS,YAAY,GAAGqF,OAAO,CAACO,qBAAqB;;EAKtE,IAAIP,OAAO,CAACQ,oCAAoC,KAAKlH,SAAS,EAAE;IAC9DY,uBAAuB,CAACuG,2BAA2B,GAAGL,MAAM,CAC1DJ,OAAO,CAACQ,oCAAoC,CAC7C;;EAKH,IAAIR,OAAO,CAACU,0BAA0B,KAAKpH,SAAS,EAAE;IACpDY,uBAAuB,CAACyG,kBAAkB,GAAGP,MAAM,CACjDJ,OAAO,CAACU,0BAA0B,CACnC;;;EAMHxG,uBAAuB,CAAC0G,qBAAqB,GAAGC,sBAAsB,CACpE3G,uBAAuB,CAACyG,kBAAkB,CAC3C;EACDzG,uBAAuB,CAAC4G,uBAAuB,GAAGD,sBAAsB,CACtE3G,uBAAuB,CAACuG,2BAA2B,CACpD;EACD,OAAOjD,MAAM;AACf;AAEA,SAASO,WAAW,CAACgD,MAAc;EACjC,OAAOX,MAAM,CAACW,MAAM,CAAC,GAAGvC,IAAI,CAACC,GAAG,EAAE;AACpC;AAEA,SAASoC,sBAAsB,CAACG,YAAoB;EAClD,OAAOC,IAAI,CAACC,MAAM,EAAE,IAAIF,YAAY;AACtC;;ACxOA;;;;;;;;;;;;;;;;AA2BA,IAAIG,oBAAoB;AAExB,IAAIC,qBAAgD;SAEpCC,wBAAwB;EACtCF,oBAAoB;EAEpBC,qBAAqB,GAAGA,qBAAqB,IAAIE,cAAc,EAAE;EAEjE,OAAOF,qBAAqB;AAC9B;SAEgBG,iBAAiB;EAC/B,OAAOJ,oBAAoB;AAC7B;;AAEA,SAASG,cAAc;EACrB,OAAOE,wBAAwB,EAAE,CAC9BtG,IAAI,CAAC;IAAM,oBAAa,EAAE;EAAA,EAAC,CAC3BA,IAAI,CAAC,aAAG;IAAI,gBAAS,CAACN,GAAG,CAAC;EAAA,EAAC,CAC3BM,IAAI,CACH;IAAM,iCAA0B,EAAE;EAAA,GAClC;IAAM,iCAA0B,EAAE;EAAA,EACnC;AACL;AAEA;;;;AAIA,SAASsG,wBAAwB;EAC/B,IAAMlK,QAAQ,GAAGK,GAAG,CAACoD,WAAW,EAAE,CAACzD,QAAQ;EAC3C,OAAO,IAAIqB,OAAO,CAAC,iBAAO;IACxB,IAAIrB,QAAQ,IAAIA,QAAQ,CAACmK,UAAU,KAAK,UAAU,EAAE;MAClD,IAAMC,SAAO,GAAG,SAAVA,SAAO,GAAG;QACd,IAAIpK,QAAQ,CAACmK,UAAU,KAAK,UAAU,EAAE;UACtCnK,QAAQ,CAACqK,mBAAmB,CAAC,kBAAkB,EAAED,SAAO,CAAC;UACzD/D,OAAO,EAAE;;OAEZ;MACDrG,QAAQ,CAACsK,gBAAgB,CAAC,kBAAkB,EAAEF,SAAO,CAAC;KACvD,MAAM;MACL/D,OAAO,EAAE;;GAEZ,CAAC;AACJ;AAEA,SAASkE,0BAA0B;EACjCV,oBAAoB;AACtB;;AC5EA;;;;;;;;;;;;;;;;AAqBA,IAAMW,wBAAwB,GAAG,EAAE,GAAG,IAAI;AAC1C,IAAMC,0BAA0B,GAAG,GAAG,GAAG,IAAI;AAC7C;AACA,IAAMC,uBAAuB,GAAG,CAAC;AACjC,IAAMC,2BAA2B,GAAG,IAAI;AACxC,IAAIC,cAAc,GAAGF,uBAAuB;AA6B5C;AAEA,IAAIG,KAAK,GAAiB,EAAE;AAE5B,IAAIC,gBAAgB,GAAY,KAAK;SAErBC,qBAAqB;EACnC,IAAI,CAACD,gBAAgB,EAAE;IACrBE,YAAY,CAACP,0BAA0B,CAAC;IACxCK,gBAAgB,GAAG,IAAI;;AAE3B;AAUA,SAASE,YAAY,CAACC,UAAkB;EACtCC,UAAU,CAAC;;IAET,IAAIN,cAAc,KAAK,CAAC,EAAE;MACxB;;;IAIF,IAAI,CAACC,KAAK,CAACvI,MAAM,EAAE;MACjB,OAAO0I,YAAY,CAACR,wBAAwB,CAAC;;IAG/CW,mBAAmB,EAAE;GACtB,EAAEF,UAAU,CAAC;AAChB;AAEA,SAASE,mBAAmB;;;;EAI1B,IAAMC,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAAC,CAAC,EAAEV,2BAA2B,CAAC;;;EAI3D,IAAMW,SAAS,GAAUF,MAAM,CAACG,GAAG,CAAC,aAAG;IAAI,OAAC;MAC1CC,4BAA4B,EAAEC,GAAG,CAACC,OAAO;MACzCC,aAAa,EAAE1E,MAAM,CAACwE,GAAG,CAACG,SAAS;KACpC;EAAA,CAAC,CAAC;EAEH,IAAMC,IAAI,GAA4B;IACpCC,eAAe,EAAE7E,MAAM,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC;IACnC4E,WAAW,EAAE;MACXC,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE;KACjB;IACDC,UAAU,EAAErJ,eAAe,CAACY,WAAW,EAAE,CAACoF,SAAS;IACnDyC,SAAS;GACV;;EAGDa,cAAc,CAACN,IAAI,EAAET,MAAM,CAAC,CAAC3C,KAAK,CAAC;;;IAGjCoC,KAAK,kBAAOO,MAAM,EAAKP,KAAK,CAAC;IAC7BD,cAAc,EAAE;IAChB1L,aAAa,CAACoC,IAAI,CAAC,iBAAesJ,cAAc,MAAG,CAAC;IACpDI,YAAY,CAACR,wBAAwB,CAAC;GACvC,CAAC;AACJ;AAEA,SAAS2B,cAAc,CACrBN,IAA6B,EAC7BT,MAAoB;EAEpB,OAAOgB,gBAAgB,CAACP,IAAI,CAAC,CAC1BjI,IAAI,CAAC,aAAG;IACP,IAAI,CAACyI,GAAG,CAAC9D,EAAE,EAAE;MACXrJ,aAAa,CAACoC,IAAI,CAAC,kCAAkC,CAAC;;IAExD,OAAO+K,GAAG,CAAC7D,IAAI,EAAE;GAClB,CAAC,CACD5E,IAAI,CAAC,aAAG;;IAEP,IAAM0I,aAAa,GAAGxD,MAAM,CAACuD,GAAG,CAACE,qBAAqB,CAAC;IACvD,IAAIC,aAAa,GAAGhC,wBAAwB;IAC5C,IAAI,CAACiC,KAAK,CAACH,aAAa,CAAC,EAAE;MACzBE,aAAa,GAAG7C,IAAI,CAAC+C,GAAG,CAACJ,aAAa,EAAEE,aAAa,CAAC;;;;IAKxD,IAAMG,kBAAkB,GAAyBN,GAAG,CAACM,kBAAkB;IACvE,IACEC,KAAK,CAACC,OAAO,CAACF,kBAAkB,CAAC,IACjCA,kBAAkB,CAACrK,MAAM,GAAG,CAAC,IAC7BqK,kBAAkB,CAAC,CAAC,CAAC,CAACG,cAAc,KAAK,qBAAqB,EAC9D;MACAjC,KAAK,kBAAOO,MAAM,EAAKP,KAAK,CAAC;MAC7B3L,aAAa,CAACoC,IAAI,CAAC,gCAAgC,CAAC;;IAGtDsJ,cAAc,GAAGF,uBAAuB;;IAExCM,YAAY,CAACwB,aAAa,CAAC;GAC5B,CAAC;AACN;AAEA,SAASJ,gBAAgB,CAACP,IAA6B;EACrD,IAAMkB,kBAAkB,GAAGlK,eAAe,CAACY,WAAW,EAAE,CAACuJ,qBAAqB,EAAE;EAChF,OAAO5L,KAAK,CAAC2L,kBAAkB,EAAE;IAC/BpF,MAAM,EAAE,MAAM;IACdI,IAAI,EAAEnB,IAAI,CAACI,SAAS,CAAC6E,IAAI;GAC1B,CAAC;AACJ;AAEA,SAASoB,UAAU,CAACxB,GAAe;EACjC,IAAI,CAACA,GAAG,CAACG,SAAS,IAAI,CAACH,GAAG,CAACC,OAAO,EAAE;IAClC,MAAM1M,aAAa,CAACU,MAAM,uCAA0B;;;EAGtDmL,KAAK,kBAAOA,KAAK,GAAEY,GAAG,EAAC;AACzB;AAEA;SACgByB,gBAAgB;AAC9B;AACAC,UAAsC;EAEtC,OAAO;IAAC;SAAA,UAAO,EAAPvL,qBAAO,EAAPA,IAAO;MAAPwL;;IACN,IAAM1B,OAAO,GAAGyB,UAAU,eAAIC,IAAI,CAAC;IACnCH,UAAU,CAAC;MACTvB,OAAO;MACPE,SAAS,EAAE1E,IAAI,CAACC,GAAG;KACpB,CAAC;GACH;AACH;;AC/LA;;;;;;;;;;;;;;;;AAqFA;AAEA,IAAIkG,MAGiB;AACrB;AACA,SAASC,OAAO,CACdC,QAAgC,EAChCC,YAA0B;EAE1B,IAAI,CAACH,MAAM,EAAE;IACXA,MAAM,GAAGH,gBAAgB,CAACC,UAAU,CAAC;;EAEvCE,MAAM,CAACE,QAAQ,EAAEC,YAAY,CAAC;AAChC;SAEgBC,QAAQ,CAACC,KAAY;EACnC,IAAMC,eAAe,GAAG9K,eAAe,CAACY,WAAW,EAAE;;EAErD,IAAI,CAACkK,eAAe,CAACC,sBAAsB,IAAIF,KAAK,CAACG,MAAM,EAAE;IAC3D;;;EAGF,IAAI,CAACF,eAAe,CAACG,qBAAqB,IAAI,CAACJ,KAAK,CAACG,MAAM,EAAE;IAC3D;;;EAGF,IAAI,CAACxN,GAAG,CAACoD,WAAW,EAAE,CAACsK,qBAAqB,EAAE,EAAE;IAC9C;;;EAIF,IAAIL,KAAK,CAACG,MAAM,IAAIjJ,kBAAkB,EAAE,KAAKT,eAAe,CAACW,OAAO,EAAE;IACpE;;EAGF,IAAImF,iBAAiB,EAAE,EAAE;IACvB+D,YAAY,CAACN,KAAK,CAAC;GACpB,MAAM;;;IAIL3D,wBAAwB,EAAE,CAACnG,IAAI,CAC7B;MAAM,mBAAY,CAAC8J,KAAK,CAAC;IAAA,GACzB;MAAM,mBAAY,CAACA,KAAK,CAAC;IAAA,EAC1B;;AAEL;AAEA,SAASM,YAAY,CAACN,KAAY;EAChC,IAAI,CAAC5J,MAAM,EAAE,EAAE;IACb;;EAGF,IAAM6J,eAAe,GAAG9K,eAAe,CAACY,WAAW,EAAE;EACrD,IACE,CAACkK,eAAe,CAAC5H,cAAc,IAC/B,CAAC4H,eAAe,CAACrE,qBAAqB,EACtC;IACA;;EAGF4B,UAAU,CAAC;IAAM,cAAO,CAACwC,KAAK,gBAAqB;EAAA,GAAE,CAAC,CAAC;AACzD;SAEgBO,iBAAiB,CAACC,cAA8B;EAC9D,IAAMP,eAAe,GAAG9K,eAAe,CAACY,WAAW,EAAE;;EAErD,IAAI,CAACkK,eAAe,CAACC,sBAAsB,EAAE;IAC3C;;;;EAKF,IAAMO,iBAAiB,GAAGD,cAAc,CAACE,GAAG;;;EAI5C,IAAMC,cAAc,GAAGV,eAAe,CAAC3E,cAAc,CAACzI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnE,IAAM+N,aAAa,GAAGX,eAAe,CAACxK,sBAAsB,CAAC5C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1E,IACE4N,iBAAiB,KAAKE,cAAc,IACpCF,iBAAiB,KAAKG,aAAa,EACnC;IACA;;EAGF,IACE,CAACX,eAAe,CAAC5H,cAAc,IAC/B,CAAC4H,eAAe,CAACnE,uBAAuB,EACxC;IACA;;EAGF0B,UAAU,CAAC;IAAM,cAAO,CAACgD,cAAc,yBAA8B;EAAA,GAAE,CAAC,CAAC;AAC3E;AAEA,SAASf,UAAU,CACjBI,QAAgC,EAChCC,YAA0B;EAE1B,IAAIA,YAAY,6BAAkC;IAChD,OAAOe,uBAAuB,CAAChB,QAA0B,CAAC;;EAE5D,OAAOiB,cAAc,CAACjB,QAAiB,CAAC;AAC1C;AAEA,SAASgB,uBAAuB,CAACL,cAA8B;EAC7D,IAAMO,oBAAoB,GAAyB;IACjDL,GAAG,EAAEF,cAAc,CAACE,GAAG;IACvBM,WAAW,EAAER,cAAc,CAACS,UAAU,IAAI,CAAC;IAC3CC,kBAAkB,EAAE,GAAG;IACvBC,sBAAsB,EAAEX,cAAc,CAACY,oBAAoB;IAC3DC,oBAAoB,EAAEb,cAAc,CAACc,WAAW;IAChDC,6BAA6B,EAAEf,cAAc,CAACgB,yBAAyB;IACvEC,6BAA6B,EAAEjB,cAAc,CAACkB;GAC/C;EACD,IAAMC,UAAU,GAAmB;IACjCC,gBAAgB,EAAEC,kBAAkB,EAAE;IACtCC,sBAAsB,EAAEf;GACzB;EACD,OAAO7H,IAAI,CAACI,SAAS,CAACqI,UAAU,CAAC;AACnC;AAEA,SAASb,cAAc,CAACd,KAAY;EAClC,IAAM+B,WAAW,GAAgB;IAC/BjP,IAAI,EAAEkN,KAAK,CAAClN,IAAI;IAChBkP,OAAO,EAAEhC,KAAK,CAACG,MAAM;IACrBkB,oBAAoB,EAAErB,KAAK,CAACsB,WAAW;IACvCW,WAAW,EAAEjC,KAAK,CAACkC;GACpB;EAED,IAAIC,MAAM,CAACC,IAAI,CAACpC,KAAK,CAACqC,QAAQ,CAAC,CAACzN,MAAM,KAAK,CAAC,EAAE;IAC5CmN,WAAW,CAACM,QAAQ,GAAGrC,KAAK,CAACqC,QAAQ;;EAEvC,IAAMC,gBAAgB,GAAGtC,KAAK,CAACuC,aAAa,EAAE;EAC9C,IAAIJ,MAAM,CAACC,IAAI,CAACE,gBAAgB,CAAC,CAAC1N,MAAM,KAAK,CAAC,EAAE;IAC9CmN,WAAW,CAACS,iBAAiB,GAAGF,gBAAgB;;EAGlD,IAAMX,UAAU,GAAiB;IAC/BC,gBAAgB,EAAEC,kBAAkB,EAAE;IACtCY,YAAY,EAAEV;GACf;EACD,OAAO7I,IAAI,CAACI,SAAS,CAACqI,UAAU,CAAC;AACnC;AAEA,SAASE,kBAAkB;EACzB,OAAO;IACLa,aAAa,EAAEvN,eAAe,CAACY,WAAW,EAAE,CAAC0E,QAAQ,EAAE;IACvDH,eAAe,EAAElE,MAAM,EAAE;IACzBuM,YAAY,EAAE;MACZhI,WAAW,EAAEpK,WAAW;MACxBqS,QAAQ,EAAEjQ,GAAG,CAACoD,WAAW,EAAE,CAAC8M,MAAM,EAAE;MACpCC,qBAAqB,EAAE/L,sBAAsB,EAAE;MAC/CgM,gBAAgB,EAAE7L,kBAAkB,EAAE;MACtC8L,yBAAyB,EAAEzL,0BAA0B;KACtD;IACD0L,yBAAyB,EAAE;GAC5B;AACH;;ACtPA;;;;;;;;;;;;;;;;AAyBA,IAAMC,sBAAsB,GAAG,GAAG;AAClC,IAAMC,oBAAoB,GAAG,GAAG;AAChC,IAAMC,UAAU,GAAG,CACjBvS,wBAAwB,EACxBC,mCAAmC,EACnCC,8BAA8B,CAC/B;AAED;;;;SAIgBsS,iBAAiB,CAACvQ,IAAY,EAAEwQ,SAAkB;EAChE,IAAIxQ,IAAI,CAAC8B,MAAM,KAAK,CAAC,IAAI9B,IAAI,CAAC8B,MAAM,GAAGsO,sBAAsB,EAAE;IAC7D,OAAO,KAAK;;EAEd,OACGI,SAAS,IACRA,SAAS,CAACxL,UAAU,CAAClH,0BAA0B,CAAC,IAChDwS,UAAU,CAACG,OAAO,CAACzQ,IAAI,CAAC,GAAG,CAAC,CAAC,IAC/B,CAACA,IAAI,CAACgF,UAAU,CAACqL,oBAAoB,CAAC;AAE1C;AAEA;;;;;;SAMgBK,2BAA2B,CAACC,aAAqB;EAC/D,IAAMC,cAAc,GAAWzH,IAAI,CAAC0H,KAAK,CAACF,aAAa,CAAC;EACxD,IAAIC,cAAc,GAAGD,aAAa,EAAE;IAClCjS,aAAa,CAACoC,IAAI,CAChB,+DAA6D8P,cAAc,MAAG,CAC/E;;EAEH,OAAOA,cAAc;AACvB;;AC/DA;;;;;;;;;;;;;;;;AA6CA;;;;;;;;EAmBE,eACW5Q,IAAY,EACZqN,MAAc,EACvByD,gBAAyB;IADhB;MAAAzD,cAAc;IAAA;IADd,SAAI,GAAJrN,IAAI;IACJ,WAAM,GAANqN,MAAM;IApBT,UAAK;IAGL,qBAAgB,GAA8B,EAAE;IACxD,aAAQ,GAAsC,EAAE;IACxC,QAAG,GAAGxN,GAAG,CAACoD,WAAW,EAAE;IACvB,aAAQ,GAAGkG,IAAI,CAAC0H,KAAK,CAAC1H,IAAI,CAACC,MAAM,EAAE,GAAG,OAAO,CAAC;IAiBpD,IAAI,CAAC,IAAI,CAACiE,MAAM,EAAE;MAChB,IAAI,CAAC0D,cAAc,GAAMpT,uBAAuB,SAAI,IAAI,CAACqT,QAAQ,SAAI,IAAI,CAAChR,IAAM;MAChF,IAAI,CAACiR,aAAa,GAAMrT,sBAAsB,SAAI,IAAI,CAACoT,QAAQ,SAAI,IAAI,CAAChR,IAAM;MAC9E,IAAI,CAACkR,YAAY,GACfJ,gBAAgB,IACbjT,oBAAoB,SAAI,IAAI,CAACmT,QAAQ,SAAI,IAAI,CAAChR,IAAM;MAEzD,IAAI8Q,gBAAgB,EAAE;;;QAGpB,IAAI,CAACK,qBAAqB,EAAE;;;;;;;EAQlCC,qBAAK,GAAL;IACE,IAAI,IAAI,CAACC,KAAK,4BAA+B;MAC3C,MAAM7S,aAAa,CAACU,MAAM,6CAAiC;QACzDsR,SAAS,EAAE,IAAI,CAACxQ;OACjB,CAAC;;IAEJ,IAAI,CAACsR,GAAG,CAACrR,IAAI,CAAC,IAAI,CAAC8Q,cAAc,CAAC;IAClC,IAAI,CAACM,KAAK;GACX;;;;;EAMDD,oBAAI,GAAJ;IACE,IAAI,IAAI,CAACC,KAAK,sBAAyB;MACrC,MAAM7S,aAAa,CAACU,MAAM,6CAAiC;QACzDsR,SAAS,EAAE,IAAI,CAACxQ;OACjB,CAAC;;IAEJ,IAAI,CAACqR,KAAK;IACV,IAAI,CAACC,GAAG,CAACrR,IAAI,CAAC,IAAI,CAACgR,aAAa,CAAC;IACjC,IAAI,CAACK,GAAG,CAACjR,OAAO,CACd,IAAI,CAAC6Q,YAAY,EACjB,IAAI,CAACH,cAAc,EACnB,IAAI,CAACE,aAAa,CACnB;IACD,IAAI,CAACE,qBAAqB,EAAE;IAC5BlE,QAAQ,CAAC,IAAI,CAAC;GACf;;;;;;;;EASDmE,sBAAM,GAAN,UACEG,SAAiB,EACjBC,QAAgB,EAChBhP,OAGC;IAED,IAAI+O,SAAS,IAAI,CAAC,EAAE;MAClB,MAAM/S,aAAa,CAACU,MAAM,mEAAyC;QACjEsR,SAAS,EAAE,IAAI,CAACxQ;OACjB,CAAC;;IAEJ,IAAIwR,QAAQ,IAAI,CAAC,EAAE;MACjB,MAAMhT,aAAa,CAACU,MAAM,gEAAuC;QAC/DsR,SAAS,EAAE,IAAI,CAACxQ;OACjB,CAAC;;IAGJ,IAAI,CAACoP,UAAU,GAAGjG,IAAI,CAAC0H,KAAK,CAACW,QAAQ,GAAG,IAAI,CAAC;IAC7C,IAAI,CAAChD,WAAW,GAAGrF,IAAI,CAAC0H,KAAK,CAACU,SAAS,GAAG,IAAI,CAAC;IAC/C,IAAI/O,OAAO,IAAIA,OAAO,CAACiP,UAAU,EAAE;MACjC,IAAI,CAACjC,gBAAgB,gBAAQhN,OAAO,CAACiP,UAAU,CAAE;;IAEnD,IAAIjP,OAAO,IAAIA,OAAO,CAACkP,OAAO,EAAE;MAC9B,KAAqB,UAA4B,EAA5BnT,WAAM,CAAC+Q,IAAI,CAAC9M,OAAO,CAACkP,OAAO,CAAC,EAA5BtQ,cAA4B,EAA5BA,IAA4B,EAAE;QAA9C,IAAMuQ,MAAM;QACf,IAAI,CAAC1F,KAAK,CAAC3D,MAAM,CAAC9F,OAAO,CAACkP,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;UAC3C,IAAI,CAACpC,QAAQ,CAACoC,MAAM,CAAC,GAAGrJ,MAAM,CAACa,IAAI,CAAC0H,KAAK,CAACrO,OAAO,CAACkP,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC;;;;IAIzE1E,QAAQ,CAAC,IAAI,CAAC;GACf;;;;;;;;EASDmE,+BAAe,GAAf,UAAgBQ,OAAe,EAAEC,YAAgB;IAAhB;MAAAA,gBAAgB;IAAA;IAC/C,IAAI,IAAI,CAACtC,QAAQ,CAACqC,OAAO,CAAC,KAAKpQ,SAAS,EAAE;MACxC,IAAI,CAACsQ,SAAS,CAACF,OAAO,EAAEC,YAAY,CAAC;KACtC,MAAM;MACL,IAAI,CAACC,SAAS,CAACF,OAAO,EAAE,IAAI,CAACrC,QAAQ,CAACqC,OAAO,CAAC,GAAGC,YAAY,CAAC;;GAEjE;;;;;;;EAQDT,yBAAS,GAAT,UAAUQ,OAAe,EAAEC,YAAoB;IAC7C,IAAItB,iBAAiB,CAACqB,OAAO,EAAE,IAAI,CAAC5R,IAAI,CAAC,EAAE;MACzC,IAAI,CAACuP,QAAQ,CAACqC,OAAO,CAAC,GAAGlB,2BAA2B,CAACmB,YAAY,CAAC;KACnE,MAAM;MACL,MAAMrT,aAAa,CAACU,MAAM,gEAAuC;QAC/D6S,gBAAgB,EAAEH;OACnB,CAAC;;GAEL;;;;;;EAODR,yBAAS,GAAT,UAAUQ,OAAe;IACvB,OAAO,IAAI,CAACrC,QAAQ,CAACqC,OAAO,CAAC,IAAI,CAAC;GACnC;;;;;;EAODR,4BAAY,GAAZ,UAAaY,IAAY,EAAE5M,KAAa;IACtC,IAAM6M,WAAW,GAAGpN,0BAA0B,CAACmN,IAAI,CAAC;IACpD,IAAME,YAAY,GAAG/M,2BAA2B,CAACC,KAAK,CAAC;IACvD,IAAI6M,WAAW,IAAIC,YAAY,EAAE;MAC/B,IAAI,CAAC1C,gBAAgB,CAACwC,IAAI,CAAC,GAAG5M,KAAK;MACnC;;;IAGF,IAAI,CAAC6M,WAAW,EAAE;MAChB,MAAMzT,aAAa,CAACU,MAAM,wDAAmC;QAC3DiT,aAAa,EAAEH;OAChB,CAAC;;IAEJ,IAAI,CAACE,YAAY,EAAE;MACjB,MAAM1T,aAAa,CAACU,MAAM,0DAAoC;QAC5DkT,cAAc,EAAEhN;OACjB,CAAC;;GAEL;;;;;EAMDgM,4BAAY,GAAZ,UAAaY,IAAY;IACvB,OAAO,IAAI,CAACxC,gBAAgB,CAACwC,IAAI,CAAC;GACnC;EAEDZ,+BAAe,GAAf,UAAgBY,IAAY;IAC1B,IAAI,IAAI,CAACxC,gBAAgB,CAACwC,IAAI,CAAC,KAAKxQ,SAAS,EAAE;MAC7C;;IAEF,OAAO,IAAI,CAACgO,gBAAgB,CAACwC,IAAI,CAAC;GACnC;EAEDZ,6BAAa,GAAb;IACE,oBAAY,IAAI,CAAC5B,gBAAgB;GAClC;EAEO4B,4BAAY,GAApB,UAAqBG,SAAiB;IACpC,IAAI,CAAC/C,WAAW,GAAG+C,SAAS;GAC7B;EAEOH,2BAAW,GAAnB,UAAoBI,QAAgB;IAClC,IAAI,CAACpC,UAAU,GAAGoC,QAAQ;GAC3B;;;;;EAMOJ,qCAAqB,GAA7B;IACE,IAAMiB,kBAAkB,GAAG,IAAI,CAACf,GAAG,CAAC9Q,gBAAgB,CAAC,IAAI,CAAC0Q,YAAY,CAAC;IACvE,IAAMoB,gBAAgB,GAAGD,kBAAkB,IAAIA,kBAAkB,CAAC,CAAC,CAAC;IACpE,IAAIC,gBAAgB,EAAE;MACpB,IAAI,CAAClD,UAAU,GAAGjG,IAAI,CAAC0H,KAAK,CAACyB,gBAAgB,CAACd,QAAQ,GAAG,IAAI,CAAC;MAC9D,IAAI,CAAChD,WAAW,GAAGrF,IAAI,CAAC0H,KAAK,CAC3B,CAACyB,gBAAgB,CAACf,SAAS,GAAG,IAAI,CAACD,GAAG,CAACiB,aAAa,EAAE,IAAI,IAAI,CAC/D;;GAEJ;;;;;;;EAQMnB,oBAAc,GAArB,UACEoB,iBAAgD,EAChDC,YAAgC,EAChCC,eAAwB;IAExB,IAAMC,KAAK,GAAG9S,GAAG,CAACoD,WAAW,EAAE,CAAC8M,MAAM,EAAE;IACxC,IAAI,CAAC4C,KAAK,EAAE;MACV;;IAEF,IAAMzF,KAAK,GAAG,IAAIkE,KAAK,CAACtT,0BAA0B,GAAG6U,KAAK,EAAE,IAAI,CAAC;IACjE,IAAMC,YAAY,GAAGzJ,IAAI,CAAC0H,KAAK,CAAChR,GAAG,CAACoD,WAAW,EAAE,CAACsP,aAAa,EAAE,GAAG,IAAI,CAAC;IACzErF,KAAK,CAAC2F,YAAY,CAACD,YAAY,CAAC;;IAGhC,IAAIJ,iBAAiB,IAAIA,iBAAiB,CAAC,CAAC,CAAC,EAAE;MAC7CtF,KAAK,CAAC4F,WAAW,CAAC3J,IAAI,CAAC0H,KAAK,CAAC2B,iBAAiB,CAAC,CAAC,CAAC,CAAChB,QAAQ,GAAG,IAAI,CAAC,CAAC;MACnEtE,KAAK,CAAC4E,SAAS,CACb,gBAAgB,EAChB3I,IAAI,CAAC0H,KAAK,CAAC2B,iBAAiB,CAAC,CAAC,CAAC,CAACO,cAAc,GAAG,IAAI,CAAC,CACvD;MACD7F,KAAK,CAAC4E,SAAS,CACb,0BAA0B,EAC1B3I,IAAI,CAAC0H,KAAK,CAAC2B,iBAAiB,CAAC,CAAC,CAAC,CAACQ,wBAAwB,GAAG,IAAI,CAAC,CACjE;MACD9F,KAAK,CAAC4E,SAAS,CACb,cAAc,EACd3I,IAAI,CAAC0H,KAAK,CAAC2B,iBAAiB,CAAC,CAAC,CAAC,CAACS,YAAY,GAAG,IAAI,CAAC,CACrD;;IAGH,IAAMC,WAAW,GAAG,aAAa;IACjC,IAAMC,sBAAsB,GAAG,wBAAwB;IACvD,IAAIV,YAAY,EAAE;MAChB,IAAMW,UAAU,GAAGX,YAAY,CAACY,IAAI,CAClC,qBAAW;QAAI,kBAAW,CAACrT,IAAI,KAAKkT,WAAW;MAAA,EAChD;MACD,IAAIE,UAAU,IAAIA,UAAU,CAAC7B,SAAS,EAAE;QACtCrE,KAAK,CAAC4E,SAAS,CACb/T,wBAAwB,EACxBoL,IAAI,CAAC0H,KAAK,CAACuC,UAAU,CAAC7B,SAAS,GAAG,IAAI,CAAC,CACxC;;MAEH,IAAM+B,oBAAoB,GAAGb,YAAY,CAACY,IAAI,CAC5C,qBAAW;QAAI,kBAAW,CAACrT,IAAI,KAAKmT,sBAAsB;MAAA,EAC3D;MACD,IAAIG,oBAAoB,IAAIA,oBAAoB,CAAC/B,SAAS,EAAE;QAC1DrE,KAAK,CAAC4E,SAAS,CACb9T,mCAAmC,EACnCmL,IAAI,CAAC0H,KAAK,CAACyC,oBAAoB,CAAC/B,SAAS,GAAG,IAAI,CAAC,CAClD;;MAGH,IAAImB,eAAe,EAAE;QACnBxF,KAAK,CAAC4E,SAAS,CACb7T,8BAA8B,EAC9BkL,IAAI,CAAC0H,KAAK,CAAC6B,eAAe,GAAG,IAAI,CAAC,CACnC;;;IAILzF,QAAQ,CAACC,KAAK,CAAC;GAChB;EAEMkE,2BAAqB,GAA5B,UAA6BlR,WAAmB;IAC9C,IAAMgN,KAAK,GAAG,IAAIkE,KAAK,CAAClR,WAAW,EAAE,KAAK,EAAEA,WAAW,CAAC;IACxD+M,QAAQ,CAACC,KAAK,CAAC;GAChB;EACH,YAAC;AAAD,CAAC;;ACnVD;;;;;;;;;;;;;;;;SAgDgBqG,yBAAyB,CAAClS,KAAuB;EAC/D,IAAMmS,gBAAgB,GAAGnS,KAAkC;EAC3D,IAAI,CAACmS,gBAAgB,IAAIA,gBAAgB,CAACC,aAAa,KAAKjS,SAAS,EAAE;IACrE;;EAEF,IAAMf,UAAU,GAAGZ,GAAG,CAACoD,WAAW,EAAE,CAACsP,aAAa,EAAE;EACpD,IAAM/D,WAAW,GAAGrF,IAAI,CAAC0H,KAAK,CAC5B,CAAC2C,gBAAgB,CAACjC,SAAS,GAAG9Q,UAAU,IAAI,IAAI,CACjD;EACD,IAAMiO,yBAAyB,GAAG8E,gBAAgB,CAACC,aAAa,GAC5DtK,IAAI,CAAC0H,KAAK,CACR,CAAC2C,gBAAgB,CAACC,aAAa,GAAGD,gBAAgB,CAACjC,SAAS,IAAI,IAAI,CACrE,GACD/P,SAAS;EACb,IAAMoN,yBAAyB,GAAGzF,IAAI,CAAC0H,KAAK,CAC1C,CAAC2C,gBAAgB,CAACE,WAAW,GAAGF,gBAAgB,CAACjC,SAAS,IAAI,IAAI,CACnE;;EAED,IAAM3D,GAAG,GAAG4F,gBAAgB,CAACxT,IAAI,IAAIwT,gBAAgB,CAACxT,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACxE,IAAM2N,cAAc,GAAmB;IACrCE,GAAG;IACHU,oBAAoB,EAAEkF,gBAAgB,CAACG,YAAY;IACnDnF,WAAW;IACXE,yBAAyB;IACzBE,yBAAyB;GAC1B;EAEDnB,iBAAiB,CAACC,cAAc,CAAC;AACnC;;AC5EA;;;;;;;;;;;;;;;;AAsBA,IAAMkG,gBAAgB,GAAG,IAAI;SAEbC,iBAAiB;;EAE/B,IAAI,CAACvQ,MAAM,EAAE,EAAE;IACb;;;;EAIFoH,UAAU,CAAC;IAAM,qBAAc,EAAE;EAAA,GAAE,CAAC,CAAC;EACrCA,UAAU,CAAC;IAAM,2BAAoB,EAAE;EAAA,GAAE,CAAC,CAAC;EAC3CA,UAAU,CAAC;IAAM,4BAAqB,EAAE;EAAA,GAAE,CAAC,CAAC;AAC9C;AAEA,SAASoJ,oBAAoB;EAC3B,IAAMxC,GAAG,GAAGzR,GAAG,CAACoD,WAAW,EAAE;EAC7B,IAAM8Q,SAAS,GAAGzC,GAAG,CAAC/Q,gBAAgB,CAAC,UAAU,CAAC;EAClD,KAAuB,UAAS,EAATyT,uBAAS,EAAT5S,uBAAS,EAATA,IAAS,EAAE;IAA7B,IAAM2L,QAAQ;IACjBwG,yBAAyB,CAACxG,QAAQ,CAAC;;EAErCuE,GAAG,CAAC2C,aAAa,CAAC,UAAU,EAAEV,yBAAyB,CAAC;AAC1D;AAEA,SAASW,cAAc;EACrB,IAAM5C,GAAG,GAAGzR,GAAG,CAACoD,WAAW,EAAE;EAC7B,IAAMuP,iBAAiB,GAAGlB,GAAG,CAAC/Q,gBAAgB,CAC5C,YAAY,CACoB;EAClC,IAAMkS,YAAY,GAAGnB,GAAG,CAAC/Q,gBAAgB,CAAC,OAAO,CAAC;;;EAGlD,IAAI+Q,GAAG,CAAC1R,iBAAiB,EAAE;;;IAGzB,IAAIuU,WAAS,GAAQzJ,UAAU,CAAC;MAC9B0G,KAAK,CAACgD,cAAc,CAAC5B,iBAAiB,EAAEC,YAAY,CAAC;MACrD0B,WAAS,GAAG3S,SAAS;KACtB,EAAEoS,gBAAgB,CAAC;IACpBtC,GAAG,CAAC1R,iBAAiB,CAAC,UAACyU,GAAW;MAChC,IAAIF,WAAS,EAAE;QACbG,YAAY,CAACH,WAAS,CAAC;QACvB/C,KAAK,CAACgD,cAAc,CAAC5B,iBAAiB,EAAEC,YAAY,EAAE4B,GAAG,CAAC;;KAE7D,CAAC;GACH,MAAM;IACLjD,KAAK,CAACgD,cAAc,CAAC5B,iBAAiB,EAAEC,YAAY,CAAC;;AAEzD;AAEA,SAAS8B,qBAAqB;EAC5B,IAAMjD,GAAG,GAAGzR,GAAG,CAACoD,WAAW,EAAE;;EAE7B,IAAMuR,QAAQ,GAAGlD,GAAG,CAAC/Q,gBAAgB,CAAC,SAAS,CAAC;EAChD,KAAsB,UAAQ,EAARkU,qBAAQ,EAARrT,sBAAQ,EAARA,IAAQ,EAAE;IAA3B,IAAMf,OAAO;IAChBqU,qBAAqB,CAACrU,OAAO,CAAC;;;EAGhCiR,GAAG,CAAC2C,aAAa,CAAC,SAAS,EAAES,qBAAqB,CAAC;AACrD;AAEA,SAASA,qBAAqB,CAACrU,OAAyB;EACtD,IAAMH,WAAW,GAAGG,OAAO,CAACL,IAAI;;EAEhC,IACEE,WAAW,CAACyU,SAAS,CAAC,CAAC,EAAE9W,oBAAoB,CAACiE,MAAM,CAAC,KACrDjE,oBAAoB,EACpB;IACA;;EAEFuT,KAAK,CAACsD,qBAAqB,CAACxU,WAAW,CAAC;AAC1C;;AC5FA;;;;;;;;;;;;;;;;AA0BA;EACE,+BAAqB0U,GAAgB;IAAhB,QAAG,GAAHA,GAAG;IACtB,IAAI/U,GAAG,CAACoD,WAAW,EAAE,CAACsK,qBAAqB,EAAE,EAAE;MAC7CsH,yBAAyB,EAAE,CACxBzR,IAAI,CAAC,qBAAW;QACf,IAAI0R,WAAW,EAAE;UACfvK,qBAAqB,EAAE;UACvBhB,wBAAwB,EAAE,CAACnG,IAAI,CAC7ByQ,iBAAiB,EACjBA,iBAAiB,CAClB;;OAEJ,CAAC,CACD5L,KAAK,CAAC,eAAK;QACVvJ,aAAa,CAACoC,IAAI,CAAC,4CAA0CiU,KAAO,CAAC;OACtE,CAAC;;;EAIRC,qCAAK,GAAL,UAAMhV,IAAY;IAChB,OAAO,IAAIoR,KAAK,CAACpR,IAAI,CAAC;GACvB;EAEDqP,sBAAI2F,yDAAsB;SAG1B;MACE,OAAO3S,eAAe,CAACY,WAAW,EAAE,CAACmK,sBAAsB;KAC5D;SALD,aAA2B6H,GAAY;MACrC5S,eAAe,CAACY,WAAW,EAAE,CAACmK,sBAAsB,GAAG6H,GAAG;KAC3D;;;;EAKD5F,sBAAI2F,wDAAqB;SAGzB;MACE,OAAO3S,eAAe,CAACY,WAAW,EAAE,CAACqK,qBAAqB;KAC3D;SALD,aAA0B2H,GAAY;MACpC5S,eAAe,CAACY,WAAW,EAAE,CAACqK,qBAAqB,GAAG2H,GAAG;KAC1D;;;;EAIH,4BAAC;AAAD,CAAC;;AC9DD;;;;;;;;;;;;;;;;AA8BA,IAAMC,kBAAkB,GAAG,WAAW;SAEtBC,mBAAmB,CAACC,QAA2B;EAC7D,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CACjBT,GAAgB,EAChBU,aAAoC;IAEpC,IAAIV,GAAG,CAAC5U,IAAI,KAAKkV,kBAAkB,EAAE;MACnC,MAAM1W,aAAa,CAACU,MAAM,uCAA0B;;;IAEtD,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;MACjC,MAAMT,aAAa,CAACU,MAAM,6BAAqB;;;IAEjDuC,QAAQ,CAACxC,MAAM,CAAC;IAChBoD,eAAe,CAACY,WAAW,EAAE,CAACV,mBAAmB,GAAGqS,GAAG;IACvDvS,eAAe,CAACY,WAAW,EAAE,CAACC,oBAAoB,GAAGoS,aAAa;IAClE,OAAO,IAAIN,qBAAqB,CAACJ,GAAG,CAAC;GACtC;;EAGAQ,QAA+B,CAACG,QAAQ,CAACC,iBAAiB,CACzD,IAAIC,SAAS,CACX,aAAa,EACb,mBAAS;;;IAGP,IAAMb,GAAG,GAAGc,SAAS,CAACC,WAAW,CAAC,KAAK,CAAC,CAACC,YAAY,EAAE;;IAEvD,IAAMN,aAAa,GAAGI,SAAS,CAC5BC,WAAW,CAAC,eAAe,CAAC,CAC5BC,YAAY,EAAE;IAEjB,OAAOP,aAAa,CAACT,GAAG,EAAEU,aAAa,CAAC;GACzC,wBAEF,CACF;EAEDF,QAAQ,CAACS,eAAe,CAAC7V,IAAI,EAAEtC,OAAO,CAAC;AACzC;AAEAyX,mBAAmB,CAACW,QAAQ,CAAC","names":["SDK_VERSION","version","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","_a","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","INFO","apiInstance","windowInstance","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","Api","href","split","name","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","fetch","Promise","info","isIndexedDBAvailable","entryType","callback","observer","getEntries","_i","entry","observe","entryTypes","undefined","setupApi","mergeStrings","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","appId","firebaseAppInstance","options","projectId","apiKey","flTransportEndpointUrl","concat","transportKey","iid","getIidPromise","iidPromise","getInstance","installationsService","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","startsWith","prefix","match","isValidCustomAttributeValue","value","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","loggingEnabled","FIS_AUTH_PREFIX","getConfig","config","getStoredConfig","processConfig","resolve","getRemoteConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","storeConfig","setItem","stringify","String","Date","now","configTimeToLive","COULD_NOT_GET_CONFIG_MSG","getProjectId","configEndPoint","getApiKey","request","Request","method","headers","Authorization","authToken","body","app_instance_id","app_instance_id_token","app_id","getAppId","app_version","sdk_version","response","ok","json","catch","entries","fpr_enabled","fpr_log_source","logSource","Number","fpr_log_endpoint_url","logEndPointUrl","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","networkRequestsSamplingRate","fpr_vc_trace_sampling_rate","tracesSamplingRate","logTraceAfterSampling","shouldLogAfterSampling","logNetworkAfterSampling","expiry","samplingRate","Math","random","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","readyState","handler_1","removeEventListener","addEventListener","changeInitializationStatus","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","MAX_EVENT_COUNT_PER_REQUEST","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","splice","log_event","map","source_extension_json_proto3","evt","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","sendEventsToFl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","flTransportFullUrl","getFlTransportFullUrl","addToQueue","transportHandler","serializer","args","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","instrumentationEnabled","isAuto","dataCollectionEnabled","requiredApisAvailable","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","isValidMetricName","traceName","indexOf","convertMetricValueToInteger","providedValue","valueAsInteger","floor","traceMeasureName","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","Trace","state","api","startTime","duration","attributes","metrics","metric","counter","numAsInteger","putMetric","customMetricName","attr","isValidName","isValidValue","attributeName","attributeValue","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","firstContentfulPaint","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupNetworkRequests","resources","resources_1","setupObserver","setupOobTraces","timeoutId_1","createOobTrace","fid","clearTimeout","setupUserTimingTraces","measures","measures_1","createUserTimingTrace","substring","app","validateIndexedDBOpenable","isAvailable","error","PerformanceController","val","DEFAULT_ENTRY_NAME","registerPerformance","instance","factoryMethod","installations","INTERNAL","registerComponent","Component","container","getProvider","getImmediate","registerVersion","firebase"],"sources":["../src/constants.ts","../src/utils/errors.ts","../src/utils/console_logger.ts","../src/services/api_service.ts","../src/utils/string_merger.ts","../src/services/settings_service.ts","../src/services/iid_service.ts","../src/utils/attributes_utils.ts","../src/services/remote_config_service.ts","../src/services/initialization_service.ts","../src/services/transport_service.ts","../src/services/perf_logger.ts","../src/utils/metric_utils.ts","../src/resources/trace.ts","../src/resources/network_request.ts","../src/services/oob_resources_service.ts","../src/controllers/perf.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}