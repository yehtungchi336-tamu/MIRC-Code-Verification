{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n  return r;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nvar ConsoleMethod = (_a = {}, _a[LogLevel.DEBUG] = 'log', _a[LogLevel.VERBOSE] = 'log', _a[LogLevel.INFO] = 'info', _a[LogLevel.WARN] = 'warn', _a[LogLevel.ERROR] = 'error', _a);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nvar defaultLogHandler = function defaultLogHandler(instance, logType) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (logType < instance.logLevel) {\n    return;\n  }\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n  if (method) {\n    console[method].apply(console, __spreadArrays([\"[\" + now + \"]  \" + instance.name + \":\"], args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\n  }\n};\nvar Logger = /** @class */function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  Object.defineProperty(Logger.prototype, \"logLevel\", {\n    get: function get() {\n      return this._logLevel;\n    },\n    set: function set(val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\" + val + \"\\\" assigned to `logLevel`\");\n      }\n      this._logLevel = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // Workaround for setter/getter having to be the same type.\n  Logger.prototype.setLogLevel = function (val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  };\n  Object.defineProperty(Logger.prototype, \"logHandler\", {\n    get: function get() {\n      return this._logHandler;\n    },\n    set: function set(val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n      this._logHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Logger.prototype, \"userLogHandler\", {\n    get: function get() {\n      return this._userLogHandler;\n    },\n    set: function set(val) {\n      this._userLogHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n  Logger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n  };\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n  };\n  Logger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n  };\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n  };\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n  };\n  return Logger;\n}();\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  var _loop_1 = function _loop_1(instance) {\n    var customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = function (instance, level) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n          args[_i - 2] = arguments[_i];\n        }\n        var message = args.map(function (arg) {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(function (arg) {\n          return arg;\n        }).join(' ');\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message: message,\n            args: args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  };\n  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {\n    var instance = instances_1[_i];\n    _loop_1(instance);\n  }\n}\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}