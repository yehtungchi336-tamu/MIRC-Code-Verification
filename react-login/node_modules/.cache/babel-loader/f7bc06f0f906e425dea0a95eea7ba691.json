{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from 'tslib';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\nvar FirebaseStorageError = /** @class */function (_super) {\n  __extends(FirebaseStorageError, _super);\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n    _this.customData = {\n      serverResponse: null\n    };\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n  FirebaseStorageError.prototype.codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n  Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\n    get: function get() {\n      if (this.customData.serverResponse) {\n        return this.message + \"\\n\" + this.customData.serverResponse;\n      } else {\n        return this.message;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    get: function get() {\n      return this.customData.serverResponse;\n    },\n    set: function set(serverResponse) {\n      this.customData.serverResponse = serverResponse;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\nvar Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(Code.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\nfunction unauthorized(path) {\n  return new FirebaseStorageError(Code.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(Code.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(Code.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\nvar StringData = /** @class */function () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n  return StringData;\n}();\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  var b = [];\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  var decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nvar DataURLParts = /** @class */function () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    var middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n  return DataURLParts;\n}();\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\nvar InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\nvar NetworkXhrIo = /** @class */function () {\n  function NetworkXhrIo() {\n    var _this = this;\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('load', function () {\n        resolve(_this);\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n  return NetworkXhrIo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\nvar XhrIoPool = /** @class */function () {\n  function XhrIoPool() {}\n  XhrIoPool.prototype.createXhrIo = function () {\n    return new NetworkXhrIo();\n  };\n  return XhrIoPool;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n */\nvar FbsBlob = /** @class */function () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n  FbsBlob.getBlob = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n  return FbsBlob;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Location = /** @class */function () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function get() {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function get() {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n  Location.makeFromBucketSpec = function (bucketString) {\n    var bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n  Location.makeFromUrl = function (url) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  };\n  return Location;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  var obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart) {\n  return \"https://\" + DEFAULT_HOST + \"/v0\" + urlPart;\n}\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nvar Mapping = /** @class */function () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n  return Mapping;\n}();\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  var tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service.makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\nvar RequestInfo = /** @class */function () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n  return RequestInfo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    var str = '';\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nvar ResumableUploadStatus = /** @class */function () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n  return ResumableUploadStatus;\n}();\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar resumableUploadChunkSize = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Observer = /** @class */function () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n  return Observer;\n}();\nvar UploadTaskSnapshot = /** @class */function () {\n  function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\n    this.bytesTransferred = bytesTransferred;\n    this.totalBytes = totalBytes;\n    this.state = state;\n    this.metadata = metadata;\n    this.task = task;\n    this.ref = ref;\n  }\n  return UploadTaskSnapshot;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n */\nvar UploadTask = /** @class */function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * @internal\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        _this._needToFetchStatus = true;\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n      _this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, function () {});\n  }\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n  UploadTask.prototype._start = function () {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(function (authToken) {\n      switch (_this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          _this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          _this._transition(InternalTaskState.PAUSED);\n          break;\n      }\n    });\n  };\n  // TODO(andysoto): assert false\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this;\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n      var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n        _this._updateProgress(status.current);\n        _this._needToFetchStatus = false;\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n    var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken) {\n      var requestInfo;\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n        _this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n        _this._request = undefined;\n        _this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n          _this._transition(InternalTaskState.SUCCESS);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = resumableUploadChunkSize * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);\n      var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._metadataErrorHandler);\n    });\n  };\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._updateProgress(_this._blob.size());\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  };\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n    }\n  };\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    get: function get() {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   */\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n    this._finishPromise();\n    var observers = this._observers.slice();\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === InternalTaskState.PAUSED || this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === InternalTaskState.RUNNING || this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  };\n  return UploadTask;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar Reference = /** @class */function () {\n  function Reference(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n  /**\r\n   * @returns The URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n  Reference.prototype.newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * @returns An reference to the root of this\r\n     *     object's bucket.\r\n     */\n    get: function get() {\n      var location = new Location(this._location.bucket, '');\n      return this.newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function get() {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function get() {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function get() {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function get() {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function get() {\n      var newPath = parent(this._location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return Reference;\n}();\n/**\r\n * Uploads a blob to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  if (metadata === void 0) {\n    metadata = null;\n  }\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded object.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\nfunction uploadString(ref, value, format, metadata) {\n  if (format === void 0) {\n    format = StringFormat.RAW;\n  }\n  ref._throwIfRoot('putString');\n  var data = dataFromString(format, value);\n  var metadataClone = __assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - Storage Reference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @internal\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n    var _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4 /*yield*/, list$1(ref, opt)];\n        case 1:\n          nextPage = _c.sent();\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n          if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];\n          return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - Storage Reference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n            }\n          }\n          return [4 /*yield*/, ref.storage.getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          op = options || {};\n          requestInfo = list(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n          return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - Storage Reference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n          return [4 /*yield*/, ref.storage.getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getMetadata(ref.storage, ref._location, getMappings());\n          return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - Storage Reference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n          return [4 /*yield*/, ref.storage.getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());\n          return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n          return [4 /*yield*/, ref.storage.getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - Storage Reference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n          return [4 /*yield*/, ref.storage.getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = deleteObject(ref.storage, ref._location);\n          return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n * @internal\r\n *\r\n * @param ref - Storage Reference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n */\nfunction getChild(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskSnapshotCompat = /** @class */function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function get() {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function get() {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function get() {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function get() {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskCompat = /** @class */function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n    this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function get() {\n      return this._snapshot;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n  return UploadTaskCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ListResultCompat = /** @class */function () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function get() {\n      var _this = this;\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function get() {\n      var _this = this;\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function get() {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ReferenceCompat = /** @class */function () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function get() {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function get() {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function get() {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function get() {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function get() {\n      var reference = this._delegate.parent;\n      if (reference == null) {\n        return null;\n      }\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n    return listAll(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n    return list$1(this._delegate, options).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A promise that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata$1(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A promise that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata$1(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A promise that resolves with the download\r\n   * URL for this object.\r\n   */\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A promise that resolves if the deletion succeeds.\r\n   */\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n    return deleteObject$1(this._delegate);\n  };\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return ReferenceCompat;\n}();\n\n/**\r\n * A request whose promise always fails.\r\n */\nvar FailRequest = /** @class */function () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  FailRequest.prototype.cancel = function (_appDelete) {};\n  return FailRequest;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  var triggeredCallback = false;\n  function triggerCallback() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function handler(success) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n    var mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    var waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  var stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar NetworkRequest = /** @class */function () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n    this.pendingXhr_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      var xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n        if (self.progressCallback_ !== null) {\n          xhr.removeUploadProgressListener(progressListener);\n        }\n        self.pendingXhr_ = null;\n        xhr = xhr;\n        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = xhr.getStatus();\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, xhr));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var xhr = status.xhr;\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          var err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  };\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nvar RequestEndStatus = /** @class */function () {\n  function RequestEndStatus(wasSuccessCode, xhr, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.xhr = xhr;\n    this.canceled = !!canceled;\n  }\n  return RequestEndStatus;\n}();\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers) {\n  var version = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, pool) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof StorageService) {\n    var service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    var reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\nvar StorageService = /** @class */function () {\n  function StorageService(app,\n  /**\r\n   * @internal\r\n   */\n  _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool,\n  /**\r\n   * @internal\r\n   */\n  _url) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._pool = _pool;\n    this._url = _url;\n    /**\r\n     * @internal\r\n     */\n    this._bucket = null;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n  Object.defineProperty(StorageService.prototype, \"maxUploadRetryTime\", {\n    get: function get() {\n      return this._maxUploadRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxOperationRetryTime\", {\n    get: function get() {\n      return this._maxOperationRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  StorageService.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3 /*break*/, 2];\n            return [4 /*yield*/, auth.getToken()];\n          case 1:\n            tokenData = _a.sent();\n            if (tokenData !== null) {\n              return [2 /*return*/, tokenData.accessToken];\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   * @internal\r\n   */\n  StorageService.prototype._delete = function () {\n    this._deleted = true;\n    this._requests.forEach(function (request) {\n      return request.cancel();\n    });\n    this._requests.clear();\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  StorageService.prototype.makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @internal\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  StorageService.prototype.makeRequest = function (requestInfo, authToken) {\n    var _this = this;\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);\n      this._requests.add(request_1);\n      // Request removes itself from set when complete.\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n  return StorageService;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nvar StorageServiceCompat = /** @class */function () {\n  function StorageServiceCompat(app, _delegate) {\n    var _this = this;\n    this.app = app;\n    this._delegate = _delegate;\n    this.INTERNAL = {\n      /**\r\n       * Called when the associated app is deleted.\r\n       */\n      delete: function _delete() {\n        return _this._delegate._delete();\n      }\n    };\n  }\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function get() {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function get() {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  };\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n  return StorageServiceCompat;\n}();\nvar name = \"@firebase/storage\";\nvar version = \"0.4.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(container, url) {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url));\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","__extends","code","message","_super","prependCode","_this","serverResponse","Object","setPrototypeOf","FirebaseStorageError","prototype","customData","FirebaseError","Code","UNKNOWN","OBJECT_NOT_FOUND","BUCKET_NOT_FOUND","PROJECT_NOT_FOUND","QUOTA_EXCEEDED","UNAUTHENTICATED","UNAUTHORIZED","RETRY_LIMIT_EXCEEDED","INVALID_CHECKSUM","CANCELED","INVALID_EVENT_NAME","INVALID_URL","INVALID_DEFAULT_BUCKET","NO_DEFAULT_BUCKET","CANNOT_SLICE_BLOB","SERVER_FILE_WRONG_SIZE","NO_DOWNLOAD_URL","INVALID_ARGUMENT","INVALID_ARGUMENT_COUNT","APP_DELETED","INVALID_ROOT_OPERATION","INVALID_FORMAT","INTERNAL_ERROR","UNSUPPORTED_ENVIRONMENT","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","DataURLParts","s","end","longEnough","TaskEvent","STATE_CHANGED","InternalTaskState","RUNNING","PAUSING","PAUSED","SUCCESS","CANCELING","ERROR","TaskState","taskStateFromInternalTaskState","state","ErrorCode","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","addEventListener","ABORT","resolve","NETWORK_ERROR","NetworkXhrIo","method","body","headers","sent_","open","undefined","key","hasOwnProperty","setRequestHeader","toString","send","status","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener","XhrIoPool","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","_i","args","bb","append","type.isNativeBlobDefined","sliceBlob","blob","start","webkitSlice","mozSlice","slice","elideCopy","size","blobType","type.isNativeBlob","data_","type","ArrayBuffer","byteLength","set","size_","type_","FbsBlob","startByte","endByte","realBlob","sliced","fs.sliceBlob","buffer","blobby","map","val","fs.getBlob","apply","uint8Arrays","type.isString","finalLength_1","forEach","merged_1","index_1","path_","Location","encode","encodeURIComponent","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","jsonObjectOrNull","obj","JSON","parse","type.isNonArrayObject","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","join","lastComponent","makeUrl","urlPart","makeQueryString","params","queryPart","nextPart","noXform_","metadata","server","local","writable","xform","mappings_","xformPath","fullPath","path.lastComponent","getMappings","mappings","Mapping","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","json.jsonObjectOrNull","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","UrlUtils.makeUrl","queryString","UrlUtils.makeQueryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_c","_b","item","fromResponseString","handler","timeout","handlerCheck","cndn","metadataHandler","xhr","text","MetadataUtils.fromResourceString","listHandler","ListResultUtils.fromResponseString","downloadUrlHandler","MetadataUtils.downloadUrlFromResourceString","sharedErrorHandler","errorHandler","err","newErr","getStatus","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","requestInfo","RequestInfo","list","delimiter","pageToken","maxResults","urlParams","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata","MetadataUtils.toResourceString","deleteObject","_xhr","_text","successCodes","determineContentType_","metadataForUpload_","metadataClone","assign","multipartUpload","genBoundary","str","Math","random","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","total","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","resumableUploadChunkSize","continueResumableUpload","chunkSize","progressCallback","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","nextOrObserver","error","complete","asFunctions","type.isFunction","next","observer","bytesTransferred","totalBytes","task","ref","async","f","argsToForward","then","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","reject","_resolve","_reject","_start","UploadTask","sizeBefore","_transferred","_updateProgress","loaded","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","callback","storage","getAuthToken","authToken","_resolveToken","fbsRequests.createResumableUpload","_location","createRequest","makeRequest","getPromise","fbsRequests.getResumableUploadStatus","statusRequest","fbsRequests.resumableUploadChunkSize","fbsRequests.ResumableUploadStatus","fbsRequests.continueResumableUpload","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","fbsRequests.getMetadata","metadataRequest","fbsRequests.multipartUpload","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","UploadTaskSnapshot","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","_service","Reference","newRef","uploadBytesResumable","_throwIfRoot","uploadString","__assign","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","getChild","_delegate","UploadTaskSnapshotCompat","catch","pause","resume","_snapshot","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","ReferenceCompat","root","r","promise_","FailRequest","_appDelete","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","setTimeout","success","call","mustStop","waitMillis","stopped","stop","wasTimeout","clearTimeout","id","additionalRetryCodes","errorCallback","pool","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","NetworkRequest","self","doTheRequest","backoffCallback","RequestEndStatus","createXhrIo","pendingXhr_","progressListener","progressEvent","lengthComputable","addUploadProgressListener","removeUploadProgressListener","hitServer","getErrorCode","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","type.isJustDef","appDelete_","canceled_","backoffId_","backoff.start","appDelete","backoff.stop","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","addVersionHeader_","firebase","SDK_VERSION","addGmpidHeader_","appId","isUrl","test","refFromURL","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","extractBucket","config","constants.CONFIG_STORAGE_BUCKET_KEY","makeFromBucketSpec","app","_authProvider","_pool","_url","_maxOperationRetryTime","constants.DEFAULT_MAX_OPERATION_RETRY_TIME","_maxUploadRetryTime","constants.DEFAULT_MAX_UPLOAD_RETRY_TIME","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_deleted","clear","request_1","_appId","add","delete","_delete","StorageServiceCompat","STORAGE_TYPE","factory","container","getProvider","authProvider","storageServiceCompat","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/string.ts","../src/implementation/taskenums.ts","../src/implementation/xhrio.ts","../src/implementation/xhrio_network.ts","../src/implementation/xhriopool.ts","../src/implementation/type.ts","../src/implementation/fs.ts","../src/implementation/blob.ts","../src/implementation/location.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/url.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/observer.ts","../src/tasksnapshot.ts","../src/implementation/async.ts","../src/task.ts","../src/reference.ts","../compat/tasksnapshot.ts","../compat/task.ts","../compat/list.ts","../compat/reference.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/request.ts","../src/service.ts","../compat/service.ts","../compat/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\nexport class FirebaseStorageError extends FirebaseError {\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  constructor(code: Code, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    Code.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    Code.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirebaseStorageError } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as type from './type';\nimport { Code, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        Code.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (type.isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (type.isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (type.isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport * as json from './json';\nimport { Location } from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!type.isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!type.isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = UrlUtils.makeUrl(urlPart);\n    const queryString = UrlUtils.makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Metadata,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport * as json from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service.makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service.makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport * as MetadataUtils from './metadata';\nimport * as ListResultUtils from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = ListResultUtils.fromResponseString(\n      service,\n      bucket,\n      text\n    );\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return MetadataUtils.downloadUrlFromResourceString(\n      metadata as Metadata,\n      text\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Metadata,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = MetadataUtils.toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = MetadataUtils.toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = MetadataUtils.toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: MetadataUtils.Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\nimport { FirebaseStorageError } from './error';\n\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirebaseStorageError) => void;\nexport type CompleteFn = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      type.isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskState } from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport { Reference } from './reference';\nimport { UploadTask } from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(\n    readonly bytesTransferred: number,\n    readonly totalBytes: number,\n    readonly state: TaskState,\n    readonly metadata: Metadata,\n    readonly task: UploadTask,\n    readonly ref: Reference\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { canceled, Code, FirebaseStorageError } from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsRequests from './implementation/requests';\nimport { Reference } from './reference';\nimport { getMappings } from './implementation/metadata';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * @internal\n   */\n  _blob: FbsBlob;\n  /**\n   * @internal\n   */\n  _metadata: Metadata | null;\n  private _mappings: fbsMetadata.Mappings;\n  /**\n   * @internal\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * @internal\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as fbsRequests.ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n    const status = new fbsRequests.ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest\n        .getPromise()\n        .then((newStatus: fbsRequests.ResumableUploadStatus) => {\n          this._increaseMultiplier();\n          this._request = undefined;\n          this._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            this._metadata = newStatus.metadata;\n            this._transition(InternalTaskState.SUCCESS);\n          } else {\n            this.completeTransitions_();\n          }\n        }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return new UploadTaskSnapshot(\n      this._transferred,\n      this._blob.size(),\n      externalState,\n      this._metadata!,\n      this,\n      this._ref\n    );\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject\n} from './implementation/requests';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListOptions, ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  /**\n   * @internal\n   */\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @returns The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * @returns An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this.newRef(this._service, location);\n  }\n\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads a blob to this object's location.\n * @public\n * @param ref - Storage Reference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata: Metadata | null = null\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * @public\n * @param ref - Storage Reference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded object.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('putString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - Storage Reference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @internal\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - Storage Reference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage.getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - Storage Reference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - Storage Reference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Metadata\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - Storage Reference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n * @internal\n *\n * @param ref - Storage Reference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n */\nexport function getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { Metadata } from '../src/metadata';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): Metadata {\n    return this._delegate.metadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTask } from '../src/task';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { TaskEvent } from '../src/implementation/taskenums';\nimport * as types from '@firebase/storage-types';\nimport {\n  StorageObserver,\n  ErrorFn,\n  CompleteFn,\n  Subscribe,\n  Unsubscribe\n} from '../src/implementation/observer';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport { FirebaseStorageError } from '../src/implementation/error';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  private readonly _snapshot: UploadTaskSnapshotCompat;\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {\n    this._snapshot = new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return this._snapshot;\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ErrorFn | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ListResult } from '../src/list';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Reference,\n  getChild,\n  uploadBytesResumable,\n  uploadString,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject\n} from '../src/reference';\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { StringFormat } from '../src/implementation/string';\nimport { ListOptions } from '../src/list';\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: Reference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(\n      uploadString(this._delegate, value, format, metadata),\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    return getMetadata(this._delegate);\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    return updateMetadata(this._delegate, metadata);\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport firebase from '@firebase/app';\nimport * as backoff from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoff.id | null = null;\n  private resolve_!: (value?: T | PromiseLike<T> | undefined) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers): void {\n  const version =\n    typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool\n): Request<T> {\n  const queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n} from '@firebase/app-types-exp';\nimport * as constants from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[constants.CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  /**\n   * @internal\n   */\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    readonly app: FirebaseApp,\n    /**\n     * @internal\n     */\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _pool: XhrIoPool,\n    /**\n     * @internal\n     */\n    readonly _url?: string\n  ) {\n    this._maxOperationRetryTime = constants.DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = constants.DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   * @internal\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @internal\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { StorageService, isUrl, ref } from '../src/service';\nimport { Location } from '../src/implementation/location';\nimport { ReferenceCompat } from './reference';\nimport { invalidArgument } from '../src/implementation/error';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from '../src/implementation/string';\nimport { TaskEvent, TaskState } from '../src/implementation/taskenums';\n\nimport { XhrIoPool } from '../src/implementation/xhriopool';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { StorageService } from '../src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  url?: string\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(app, authProvider, new XhrIoPool(), url)\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}