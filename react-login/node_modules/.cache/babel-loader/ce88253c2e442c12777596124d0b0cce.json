{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { __spreadArray, __assign } from 'tslib';\nimport { ErrorFactory, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { Component } from '@firebase/component';\nvar name = \"@firebase/performance\";\nvar version = \"0.4.18\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"trace started\" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.', _a[\"trace stopped\" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.', _a[\"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.', _a[\"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.', _a[\"no window\" /* NO_WINDOW */] = 'Window is not available.', _a[\"no app id\" /* NO_APP_ID */] = 'App id is not available.', _a[\"no project id\" /* NO_PROJECT_ID */] = 'Project id is not available.', _a[\"no api key\" /* NO_API_KEY */] = 'Api key is not available.', _a[\"invalid cc log\" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event', _a[\"FB not default\" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.', _a[\"RC response not ok\" /* RC_NOT_OK */] = 'RC response is not ok', _a[\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.', _a[\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.', _a[\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid', _a[\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.', _a);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\nvar Api = /** @class */function () {\n  function Api(window) {\n    this.window = window;\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n  Api.prototype.getUrl = function () {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  };\n  Api.prototype.mark = function (name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  };\n  Api.prototype.measure = function (measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  };\n  Api.prototype.getEntriesByType = function (type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  };\n  Api.prototype.getEntriesByName = function (name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  };\n  Api.prototype.getTimeOrigin = function () {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  };\n  Api.prototype.requiredApisAvailable = function () {\n    if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n      return false;\n    }\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  };\n  Api.prototype.setupObserver = function (entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    var observer = new this.PerformanceObserver(function (list) {\n      for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {\n        var entry = _a[_i];\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n    // Start observing the entry types you care about.\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  };\n  Api.getInstance = function () {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  };\n  return Api;\n}();\nfunction setupApi(window) {\n  windowInstance = window;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */);\n  }\n\n  var resultArray = [];\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n  return resultArray.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar settingsServiceInstance;\nvar SettingsService = /** @class */function () {\n  function SettingsService() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true;\n    // The variable which controls logging of custom traces.\n    this.dataCollectionEnabled = true;\n    // Configuration flags set through remote config.\n    this.loggingEnabled = false;\n    // Sampling rate between 0 and 1.\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1;\n    // Address of logging service.\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n    // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n    // Source type for performance event logs.\n    this.logSource = 462;\n    // Flags which control per session logging of traces and network requests.\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false;\n    // TTL of config retrieved from remote config in hours.\n    this.configTimeToLive = 12;\n  }\n  SettingsService.prototype.getAppId = function () {\n    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"no app id\" /* NO_APP_ID */);\n    }\n\n    return appId;\n  };\n  SettingsService.prototype.getProjectId = function () {\n    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"no project id\" /* NO_PROJECT_ID */);\n    }\n\n    return projectId;\n  };\n  SettingsService.prototype.getApiKey = function () {\n    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"no api key\" /* NO_API_KEY */);\n    }\n\n    return apiKey;\n  };\n  SettingsService.prototype.getFlTransportFullUrl = function () {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  };\n  SettingsService.getInstance = function () {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  };\n  return SettingsService;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar iid;\nfunction getIidPromise() {\n  var iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n// This method should be used after the iid is retrieved by getIidPromise method.\nfunction getIid() {\n  return iid;\n}\nfunction getAuthTokenPromise() {\n  var authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VisibilityState;\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return 2 /* CONTROLLED */;\n    } else {\n      return 3 /* UNCONTROLLED */;\n    }\n  } else {\n    return 1 /* UNSUPPORTED */;\n  }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1 /* CONNECTION_SLOW_2G */;\n    case '2g':\n      return 2 /* CONNECTION_2G */;\n    case '3g':\n      return 3 /* CONNECTION_3G */;\n    case '4g':\n      return 4 /* CONNECTION_4G */;\n    default:\n      return 0 /* UNKNOWN */;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\nfunction getConfig(iid) {\n  var config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n  return getRemoteConfig(iid).then(processConfig).then(function (config) {\n    return storeConfig(config);\n  }, /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\nfunction getRemoteConfig(iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise().then(function (authToken) {\n    var projectId = SettingsService.getInstance().getProjectId();\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\" + projectId + \"/namespaces/fireperf:fetch?key=\" + SettingsService.getInstance().getApiKey();\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: FIS_AUTH_PREFIX + \" \" + authToken\n      },\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: SettingsService.getInstance().getAppId(),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n    });\n\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n      // In case response is not ok. This will be caught by catch.\n      throw ERROR_FACTORY.create(\"RC response not ok\" /* RC_NOT_OK */);\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  }\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  }\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  }\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar initializationStatus = 1 /* notInitialized */;\nvar initializationPromise;\nfunction getInitializationPromise() {\n  initializationStatus = 2 /* initializationPending */;\n  initializationPromise = initializationPromise || initializePerf();\n  return initializationPromise;\n}\nfunction isPerfInitialized() {\n  return initializationStatus === 3 /* initialized */;\n}\n\nfunction initializePerf() {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise();\n  }).then(function (iid) {\n    return getConfig(iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler_1 = function handler_1() {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler_1);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler_1);\n    } else {\n      resolve();\n    }\n  });\n}\nfunction changeInitializationStatus() {\n  initializationStatus = 3 /* initialized */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nvar DEFAULT_REMAINING_TRIES = 3;\nvar MAX_EVENT_COUNT_PER_REQUEST = 1000;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\nvar queue = [];\nvar isTransportSetup = false;\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n    dispatchQueueEvents();\n  }, timeOffset);\n}\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n  sendEventsToFl(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = __spreadArray(__spreadArray([], staged), queue);\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \" + remainingTries + \".\");\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    }\n    // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n    var logResponseDetails = res.logResponseDetails;\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = __spreadArray(__spreadArray([], staged), queue);\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n    remainingTries = DEFAULT_REMAINING_TRIES;\n    // Schedule the next process.\n    processQueue(requestOffset);\n  });\n}\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\" /* INVALID_CC_LOG */);\n  }\n  // Add the new event to the queue.\n  queue = __spreadArray(__spreadArray([], queue), [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\nfunction transportHandler(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var message = serializer.apply(void 0, args);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-enble camelcase */\nvar logger;\n// This method is not called before initialization.\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n  var settingsService = SettingsService.getInstance();\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(trace, 1 /* Trace */);\n  }, 0);\n}\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  var networkRequestUrl = networkRequest.url;\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(networkRequest, 0 /* NetworkRequest */);\n  }, 0);\n}\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0 /* NetworkRequest */) {\n    return serializeNetworkRequest(resource);\n  }\n  return serializeTrace(resource);\n}\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  var customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction getApplicationInfo() {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\nfunction convertMetricValueToInteger(providedValue) {\n  var valueAsInteger = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\"Metric value should be an Integer, setting the value as : \" + valueAsInteger + \".\");\n  }\n  return valueAsInteger;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Trace = /** @class */function () {\n  /**\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(name, isAuto, traceMeasureName) {\n    if (isAuto === void 0) {\n      isAuto = false;\n    }\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1 /* UNINITIALIZED */;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n    if (!this.isAuto) {\n      this.traceStartMark = TRACE_START_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceStopMark = TRACE_STOP_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n  Trace.prototype.start = function () {\n    if (this.state !== 1 /* UNINITIALIZED */) {\n      throw ERROR_FACTORY.create(\"trace started\" /* TRACE_STARTED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = 2 /* RUNNING */;\n  };\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n  Trace.prototype.stop = function () {\n    if (this.state !== 2 /* RUNNING */) {\n      throw ERROR_FACTORY.create(\"trace stopped\" /* TRACE_STOPPED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.state = 3 /* TERMINATED */;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  };\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n  Trace.prototype.record = function (startTime, duration, options) {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */, {\n        traceName: this.name\n      });\n    }\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = __assign({}, options.attributes);\n    }\n    if (options && options.metrics) {\n      for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {\n        var metric = _a[_i];\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  };\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist. The value will be floored down to an\r\n   * integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Increment by value\r\n   */\n  Trace.prototype.incrementMetric = function (counter, numAsInteger) {\n    if (numAsInteger === void 0) {\n      numAsInteger = 1;\n    }\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  };\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist. The value will be floored down to an integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Set custom metric to this value\r\n   */\n  Trace.prototype.putMetric = function (counter, numAsInteger) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */, {\n        customMetricName: counter\n      });\n    }\n  };\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n  Trace.prototype.getMetric = function (counter) {\n    return this.counters[counter] || 0;\n  };\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n  Trace.prototype.putAttribute = function (attr, value) {\n    var isValidName = isValidCustomAttributeName(attr);\n    var isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */, {\n        attributeValue: value\n      });\n    }\n  };\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n  Trace.prototype.getAttribute = function (attr) {\n    return this.customAttributes[attr];\n  };\n  Trace.prototype.removeAttribute = function (attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  };\n  Trace.prototype.getAttributes = function () {\n    return __assign({}, this.customAttributes);\n  };\n  Trace.prototype.setStartTime = function (startTime) {\n    this.startTimeUs = startTime;\n  };\n  Trace.prototype.setDuration = function (duration) {\n    this.durationUs = duration;\n  };\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n  Trace.prototype.calculateTraceMetrics = function () {\n    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  };\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n  Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {\n    var route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n    var FIRST_PAINT = 'first-paint';\n    var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      var firstPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_PAINT;\n      });\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n      var firstContentfulPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_CONTENTFUL_PAINT;\n      });\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n    logTrace(trace);\n  };\n  Trace.createUserTimingTrace = function (measureName) {\n    var trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  };\n  return Trace;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createNetworkRequestEntry(entry) {\n  var performanceEntry = entry;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\n  // Remove the query params from logged network request url.\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FID_WAIT_TIME_MS = 5000;\nfunction setupOobResources() {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(function () {\n    return setupOobTraces();\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests();\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces();\n  }, 0);\n}\nfunction setupNetworkRequests() {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n    var resource = resources_1[_i];\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\nfunction setupOobTraces() {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId_1 = setTimeout(function () {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId_1 = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId_1) {\n        clearTimeout(timeoutId_1);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\nfunction setupUserTimingTraces() {\n  var api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  var measures = api.getEntriesByType('measure');\n  for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {\n    var measure = measures_1[_i];\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\nfunction createUserTimingTrace(measure) {\n  var measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PerformanceController = /** @class */function () {\n  function PerformanceController(app) {\n    this.app = app;\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable().then(function (isAvailable) {\n        if (isAvailable) {\n          setupTransportService();\n          getInitializationPromise().then(setupOobResources, setupOobResources);\n        }\n      }).catch(function (error) {\n        consoleLogger.info(\"Environment doesn't support IndexedDB: \" + error);\n      });\n    }\n  }\n  PerformanceController.prototype.trace = function (name) {\n    return new Trace(name);\n  };\n  Object.defineProperty(PerformanceController.prototype, \"instrumentationEnabled\", {\n    get: function get() {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceController.prototype, \"dataCollectionEnabled\", {\n    get: function get() {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PerformanceController;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nfunction registerPerformance(instance) {\n  var factoryMethod = function factoryMethod(app, installations) {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(\"FB not default\" /* FB_NOT_DEFAULT */);\n    }\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n    }\n\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n  // Register performance with firebase-app.\n  instance.INTERNAL.registerComponent(new Component('performance', function (container) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because perf has `import '@firebase/installations'`\n    var installations = container.getProvider('installations').getImmediate();\n    return factoryMethod(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */));\n  instance.registerVersion(name, version);\n}\nregisterPerformance(firebase);\nexport { registerPerformance };","map":{"version":3,"sources":["../src/constants.ts","../src/utils/errors.ts","../src/utils/console_logger.ts","../src/services/api_service.ts","../src/utils/string_merger.ts","../src/services/settings_service.ts","../src/services/iid_service.ts","../src/utils/attributes_utils.ts","../src/services/remote_config_service.ts","../src/services/initialization_service.ts","../src/services/transport_service.ts","../src/services/perf_logger.ts","../src/utils/metric_utils.ts","../src/resources/trace.ts","../src/resources/network_request.ts","../src/services/oob_resources_service.ts","../src/controllers/perf.ts","../index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}