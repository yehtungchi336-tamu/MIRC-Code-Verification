{"ast":null,"code":"import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory } from '@firebase/util';\nimport { __spread, __awaiter, __generator, __assign, __values } from 'tslib';\nimport { deleteDb, openDb } from 'idb';\nimport firebase from '@firebase/app';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERROR_MAP = (_a = {}, _a[\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: \"{$valueName}\"', _a[\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */] = 'This method is available in a Window context.', _a[\"only-available-in-sw\" /* AVAILABLE_IN_SW */] = 'This method is available in a service worker context.', _a[\"permission-default\" /* PERMISSION_DEFAULT */] = 'The notification permission was not granted and dismissed instead.', _a[\"permission-blocked\" /* PERMISSION_BLOCKED */] = 'The notification permission was not granted and blocked instead.', _a[\"unsupported-browser\" /* UNSUPPORTED_BROWSER */] = \"This browser doesn't support the API's required to use the firebase SDK.\", _a[\"failed-service-worker-registration\" /* FAILED_DEFAULT_REGISTRATION */] = 'We are unable to register the default service worker. {$browserErrorMessage}', _a[\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */] = 'A problem occurred while subscribing the user to FCM: {$errorInfo}', _a[\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */] = 'FCM returned no token when subscribing the user to push.', _a[\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */] = 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}', _a[\"token-update-failed\" /* TOKEN_UPDATE_FAILED */] = 'A problem occurred while updating the user from FCM: {$errorInfo}', _a[\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */] = 'FCM returned no token when updating the user to push.', _a[\"use-sw-after-get-token\" /* USE_SW_AFTER_GET_TOKEN */] = 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.', _a[\"invalid-sw-registration\" /* INVALID_SW_REGISTRATION */] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.', _a[\"invalid-bg-handler\" /* INVALID_BG_HANDLER */] = 'The input to setBackgroundMessageHandler() must be a function.', _a[\"invalid-vapid-key\" /* INVALID_VAPID_KEY */] = 'The public VAPID key must be a string.', _a[\"use-vapid-key-after-get-token\" /* USE_VAPID_KEY_AFTER_GET_TOKEN */] = 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.', _a);\nvar ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\nvar DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nvar ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n// Key of FCM Payload in Notification's data field.\nvar FCM_MSG = 'FCM_MSG';\nvar TAG = 'FirebaseMessaging: ';\n// Set to '1' if Analytics is enabled for the campaign\nvar CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nvar CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nvar CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nvar CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nvar BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n// Preparation time for client to initialize and set up the message handler.\nvar FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\nvar MessageType;\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction arrayToBase64(array) {\n  var uint8Array = new Uint8Array(array);\n  var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nfunction base64ToArray(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\nvar OLD_DB_VERSION = 5;\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\nfunction migrateOldDatabase(senderId) {\n  return __awaiter(this, void 0, void 0, function () {\n    var databases, dbNames, tokenDetails, db;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!('databases' in indexedDB)) return [3 /*break*/, 2];\n          return [4 /*yield*/, indexedDB.databases()];\n        case 1:\n          databases = _a.sent();\n          dbNames = databases.map(function (db) {\n            return db.name;\n          });\n          if (!dbNames.includes(OLD_DB_NAME)) {\n            // old DB didn't exist, no need to open.\n            return [2 /*return*/, null];\n          }\n          _a.label = 2;\n        case 2:\n          tokenDetails = null;\n          return [4 /*yield*/, openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var objectStore, value, oldDetails, oldDetails, oldDetails;\n              var _a;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (db.oldVersion < 2) {\n                      // Database too old, skip migration.\n                      return [2 /*return*/];\n                    }\n\n                    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n                      // Database did not exist. Nothing to do.\n                      return [2 /*return*/];\n                    }\n\n                    objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n                    return [4 /*yield*/, objectStore.index('fcmSenderId').get(senderId)];\n                  case 1:\n                    value = _b.sent();\n                    return [4 /*yield*/, objectStore.clear()];\n                  case 2:\n                    _b.sent();\n                    if (!value) {\n                      // No entry in the database, nothing to migrate.\n                      return [2 /*return*/];\n                    }\n\n                    if (db.oldVersion === 2) {\n                      oldDetails = value;\n                      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n                        return [2 /*return*/];\n                      }\n\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n                        subscriptionOptions: {\n                          auth: oldDetails.auth,\n                          p256dh: oldDetails.p256dh,\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 3) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 4) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            });\n          })];\n\n        case 3:\n          db = _a.sent();\n          db.close();\n          // Delete all old databases.\n          return [4 /*yield*/, deleteDb(OLD_DB_NAME)];\n        case 4:\n          // Delete all old databases.\n          _a.sent();\n          return [4 /*yield*/, deleteDb('fcm_vapid_details_db')];\n        case 5:\n          _a.sent();\n          return [4 /*yield*/, deleteDb('undefined')];\n        case 6:\n          _a.sent();\n          return [2 /*return*/, checkTokenDetails(tokenDetails) ? tokenDetails : null];\n      }\n    });\n  });\n}\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  var subscriptionOptions = tokenDetails.subscriptionOptions;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\nvar DATABASE_NAME = 'firebase-messaging-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-messaging-store';\nvar dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\nfunction dbGet(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tokenDetails, oldTokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          return [4 /*yield*/, db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key)];\n        case 2:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3 /*break*/, 3];\n          return [2 /*return*/, tokenDetails];\n        case 3:\n          return [4 /*yield*/, migrateOldDatabase(firebaseDependencies.appConfig.senderId)];\n        case 4:\n          oldTokenDetails = _a.sent();\n          if (!oldTokenDetails) return [3 /*break*/, 6];\n          return [4 /*yield*/, dbSet(firebaseDependencies, oldTokenDetails)];\n        case 5:\n          _a.sent();\n          return [2 /*return*/, oldTokenDetails];\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nfunction dbSet(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key)];\n        case 2:\n          _a.sent();\n          return [4 /*yield*/, tx.complete];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, tokenDetails];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\nfunction dbRemove(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n        case 2:\n          _a.sent();\n          return [4 /*yield*/, tx.complete];\n        case 3:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction getKey(_a) {\n  var appConfig = _a.appConfig;\n  return appConfig.appId;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction requestGetToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, subscribeOptions, responseData, response, err_1, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getHeaders(firebaseDependencies)];\n        case 1:\n          headers = _a.sent();\n          body = getBody(subscriptionOptions);\n          subscribeOptions = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n          return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];\n        case 3:\n          response = _a.sent();\n          return [4 /*yield*/, response.json()];\n        case 4:\n          responseData = _a.sent();\n          return [3 /*break*/, 6];\n        case 5:\n          err_1 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\n            errorInfo: err_1\n          });\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\n              errorInfo: message\n            });\n          }\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */);\n          }\n\n          return [2 /*return*/, responseData.token];\n      }\n    });\n  });\n}\nfunction requestUpdateToken(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, updateOptions, responseData, response, err_2, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getHeaders(firebaseDependencies)];\n        case 1:\n          headers = _a.sent();\n          body = getBody(tokenDetails.subscriptionOptions);\n          updateOptions = {\n            method: 'PATCH',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n          return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + tokenDetails.token, updateOptions)];\n        case 3:\n          response = _a.sent();\n          return [4 /*yield*/, response.json()];\n        case 4:\n          responseData = _a.sent();\n          return [3 /*break*/, 6];\n        case 5:\n          err_2 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\n            errorInfo: err_2\n          });\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\n              errorInfo: message\n            });\n          }\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */);\n          }\n\n          return [2 /*return*/, responseData.token];\n      }\n    });\n  });\n}\nfunction requestDeleteToken(firebaseDependencies, token) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, unsubscribeOptions, response, responseData, message, err_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getHeaders(firebaseDependencies)];\n        case 1:\n          headers = _a.sent();\n          unsubscribeOptions = {\n            method: 'DELETE',\n            headers: headers\n          };\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n          return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + token, unsubscribeOptions)];\n        case 3:\n          response = _a.sent();\n          return [4 /*yield*/, response.json()];\n        case 4:\n          responseData = _a.sent();\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\n              errorInfo: message\n            });\n          }\n          return [3 /*break*/, 6];\n        case 5:\n          err_3 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\n            errorInfo: err_3\n          });\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction getEndpoint(_a) {\n  var projectId = _a.projectId;\n  return ENDPOINT + \"/projects/\" + projectId + \"/registrations\";\n}\nfunction getHeaders(_a) {\n  var appConfig = _a.appConfig,\n    installations = _a.installations;\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, installations.getToken()];\n        case 1:\n          authToken = _b.sent();\n          return [2 /*return*/, new Headers({\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'x-goog-api-key': appConfig.apiKey,\n            'x-goog-firebase-installations-auth': \"FIS \" + authToken\n          })];\n      }\n    });\n  });\n}\nfunction getBody(_a) {\n  var p256dh = _a.p256dh,\n    auth = _a.auth,\n    endpoint = _a.endpoint,\n    vapidKey = _a.vapidKey;\n  var body = {\n    web: {\n      endpoint: endpoint,\n      auth: auth,\n      p256dh: p256dh\n    }\n  };\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n  return body;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** UpdateRegistration will be called once every week. */\nvar TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\nfunction getToken(firebaseDependencies, swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pushSubscription, tokenDetails, subscriptionOptions, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (Notification.permission !== 'granted') {\n            throw ERROR_FACTORY.create(\"permission-blocked\" /* PERMISSION_BLOCKED */);\n          }\n\n          return [4 /*yield*/, getPushSubscription(swRegistration, vapidKey)];\n        case 1:\n          pushSubscription = _a.sent();\n          return [4 /*yield*/, dbGet(firebaseDependencies)];\n        case 2:\n          tokenDetails = _a.sent();\n          subscriptionOptions = {\n            vapidKey: vapidKey,\n            swScope: swRegistration.scope,\n            endpoint: pushSubscription.endpoint,\n            auth: arrayToBase64(pushSubscription.getKey('auth')),\n            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n          };\n          if (!!tokenDetails) return [3 /*break*/, 3];\n          // No token, get a new one.\n          return [2 /*return*/, getNewToken(firebaseDependencies, subscriptionOptions)];\n        case 3:\n          if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3 /*break*/, 8];\n          _a.label = 4;\n        case 4:\n          _a.trys.push([4, 6,, 7]);\n          return [4 /*yield*/, requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n        case 5:\n          _a.sent();\n          return [3 /*break*/, 7];\n        case 6:\n          e_1 = _a.sent();\n          // Suppress errors because of #2364\n          console.warn(e_1);\n          return [3 /*break*/, 7];\n        case 7:\n          return [2 /*return*/, getNewToken(firebaseDependencies, subscriptionOptions)];\n        case 8:\n          if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n            // Weekly token refresh\n            return [2 /*return*/, updateToken({\n              token: tokenDetails.token,\n              createTime: Date.now(),\n              subscriptionOptions: subscriptionOptions\n            }, firebaseDependencies, swRegistration)];\n          } else {\n            // Valid token, nothing to do.\n            return [2 /*return*/, tokenDetails.token];\n          }\n        case 9:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\nfunction deleteToken(firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenDetails, pushSubscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, dbGet(firebaseDependencies)];\n        case 1:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3 /*break*/, 4];\n          return [4 /*yield*/, requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n        case 2:\n          _a.sent();\n          return [4 /*yield*/, dbRemove(firebaseDependencies)];\n        case 3:\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [4 /*yield*/, swRegistration.pushManager.getSubscription()];\n        case 5:\n          pushSubscription = _a.sent();\n          if (pushSubscription) {\n            return [2 /*return*/, pushSubscription.unsubscribe()];\n          }\n          // If there's no SW, consider it a success.\n          return [2 /*return*/, true];\n      }\n    });\n  });\n}\nfunction updateToken(tokenDetails, firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var updatedToken, updatedTokenDetails, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 5]);\n          return [4 /*yield*/, requestUpdateToken(firebaseDependencies, tokenDetails)];\n        case 1:\n          updatedToken = _a.sent();\n          updatedTokenDetails = __assign(__assign({}, tokenDetails), {\n            token: updatedToken,\n            createTime: Date.now()\n          });\n          return [4 /*yield*/, dbSet(firebaseDependencies, updatedTokenDetails)];\n        case 2:\n          _a.sent();\n          return [2 /*return*/, updatedToken];\n        case 3:\n          e_2 = _a.sent();\n          return [4 /*yield*/, deleteToken(firebaseDependencies, swRegistration)];\n        case 4:\n          _a.sent();\n          throw e_2;\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction getNewToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var token, tokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, requestGetToken(firebaseDependencies, subscriptionOptions)];\n        case 1:\n          token = _a.sent();\n          tokenDetails = {\n            token: token,\n            createTime: Date.now(),\n            subscriptionOptions: subscriptionOptions\n          };\n          return [4 /*yield*/, dbSet(firebaseDependencies, tokenDetails)];\n        case 2:\n          _a.sent();\n          return [2 /*return*/, tokenDetails.token];\n      }\n    });\n  });\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\nfunction getPushSubscription(swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var subscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, swRegistration.pushManager.getSubscription()];\n        case 1:\n          subscription = _a.sent();\n          if (subscription) {\n            return [2 /*return*/, subscription];\n          }\n          return [2 /*return*/, swRegistration.pushManager.subscribe({\n            userVisibleOnly: true,\n            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n            // submitted to pushManager#subscribe must be of type Uint8Array.\n            applicationServerKey: base64ToArray(vapidKey)\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\nfunction isTokenValid(dbOptions, currentOptions) {\n  var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  var isAuthEqual = currentOptions.auth === dbOptions.auth;\n  var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction externalizePayload(internalPayload) {\n  var payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n  payload.notification = {};\n  var title = messagePayloadInternal.notification.title;\n  if (!!title) {\n    payload.notification.title = title;\n  }\n  var body = messagePayloadInternal.notification.body;\n  if (!!body) {\n    payload.notification.body = body;\n  }\n  var image = messagePayloadInternal.notification.image;\n  if (!!image) {\n    payload.notification.image = image;\n  }\n}\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n  payload.data = messagePayloadInternal.data;\n}\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n  payload.fcmOptions = {};\n  var link = messagePayloadInternal.fcmOptions.link;\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  }\n  // eslint-disable-next-line camelcase\n  var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a promise that resolves after given time passes. */\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SwController = /** @class */function () {\n  function SwController(firebaseDependencies) {\n    var _this = this;\n    this.firebaseDependencies = firebaseDependencies;\n    // A boolean flag to determine wether an app is using onBackgroundMessage or\n    // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n    // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n    // MessagePayload if a NotificationPayload is included.\n    this.isOnBackgroundMessageUsed = null;\n    this.vapidKey = null;\n    this.bgMessageHandler = null;\n    self.addEventListener('push', function (e) {\n      e.waitUntil(_this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      e.waitUntil(_this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', function (e) {\n      e.waitUntil(_this.onNotificationClick(e));\n    });\n  }\n  Object.defineProperty(SwController.prototype, \"app\", {\n    get: function get() {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\r\n   * Unsubscribe instead.\r\n   *\r\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\r\n   *\r\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\r\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\r\n   * contains no notification data this method will be called and the promise it returns will be\r\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\r\n   * the developer can handle them in a their own 'push' event callback\r\n   *\r\n   * @param callback The callback to be called when a push message is received and a notification\r\n   * must be shown. The callback will be given the data from the push message.\r\n   */\n  SwController.prototype.setBackgroundMessageHandler = function (callback) {\n    this.isOnBackgroundMessageUsed = false;\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(\"invalid-bg-handler\" /* INVALID_BG_HANDLER */);\n    }\n\n    this.bgMessageHandler = callback;\n  };\n  SwController.prototype.onBackgroundMessage = function (nextOrObserver) {\n    var _this = this;\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n    return function () {\n      _this.bgMessageHandler = null;\n    };\n  };\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  SwController.prototype.getToken = function () {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!!this.vapidKey) return [3 /*break*/, 2];\n            return [4 /*yield*/, dbGet(this.firebaseDependencies)];\n          case 1:\n            tokenDetails = _c.sent();\n            this.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n            _c.label = 2;\n          case 2:\n            return [2 /*return*/, getToken(this.firebaseDependencies, self.registration, this.vapidKey)];\n        }\n      });\n    });\n  };\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  SwController.prototype.deleteToken = function () {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  };\n  SwController.prototype.requestPermission = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\n  };\n  // TODO: Remove this together with getToken from SW Controller.\n  SwController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\" /* USE_VAPID_KEY_AFTER_GET_TOKEN */);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\" /* INVALID_VAPID_KEY */);\n    }\n\n    this.vapidKey = vapidKey;\n  };\n  SwController.prototype.useServiceWorker = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\n  };\n\n  SwController.prototype.onMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\n  };\n\n  SwController.prototype.onTokenRefresh = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\n  };\n  /**\r\n   * A handler for push events that shows notifications based on the content of the payload.\r\n   *\r\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\r\n   * `notification` property will be used as the NotificationOptions object passed to\r\n   * showNotification. Additionally, the `title` property of the notification object will be used as\r\n   * the title.\r\n   *\r\n   * If there is no notification data in the payload then no notification will be shown.\r\n   */\n  SwController.prototype.onPush = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, clientList, isNotificationShown, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            internalPayload = getMessagePayloadInternal(event);\n            if (!internalPayload) {\n              console.debug(TAG + 'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.');\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, getClientList()];\n          case 1:\n            clientList = _a.sent();\n            if (hasVisibleClients(clientList)) {\n              return [2 /*return*/, sendMessagePayloadInternalToWindows(clientList, internalPayload)];\n            }\n            isNotificationShown = false;\n            if (!!!internalPayload.notification) return [3 /*break*/, 3];\n            return [4 /*yield*/, showNotification(wrapInternalPayload(internalPayload))];\n          case 2:\n            _a.sent();\n            isNotificationShown = true;\n            _a.label = 3;\n          case 3:\n            // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n            // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n            if (isNotificationShown === true && this.isOnBackgroundMessageUsed === false) {\n              return [2 /*return*/];\n            }\n\n            if (!!this.bgMessageHandler) {\n              payload = externalizePayload(internalPayload);\n              if (typeof this.bgMessageHandler === 'function') {\n                this.bgMessageHandler(payload);\n              } else {\n                this.bgMessageHandler.next(payload);\n              }\n            }\n            // wait briefly to allow onBackgroundMessage to complete\n            return [4 /*yield*/, sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)];\n          case 4:\n            // wait briefly to allow onBackgroundMessage to complete\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onSubChange = function (event) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var newSubscription, tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            newSubscription = event.newSubscription;\n            if (!!newSubscription) return [3 /*break*/, 2];\n            // Subscription revoked, delete token\n            return [4 /*yield*/, deleteToken(this.firebaseDependencies, self.registration)];\n          case 1:\n            // Subscription revoked, delete token\n            _c.sent();\n            return [2 /*return*/];\n          case 2:\n            return [4 /*yield*/, dbGet(this.firebaseDependencies)];\n          case 3:\n            tokenDetails = _c.sent();\n            return [4 /*yield*/, deleteToken(this.firebaseDependencies, self.registration)];\n          case 4:\n            _c.sent();\n            return [4 /*yield*/, getToken(this.firebaseDependencies, self.registration, (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];\n          case 5:\n            _c.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onNotificationClick = function (event) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, link, url, originUrl, client;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n            if (!internalPayload) {\n              return [2 /*return*/];\n            } else if (event.action) {\n              // User clicked on an action button. This will allow developers to act on action button clicks\n              // by using a custom onNotificationClick listener that they define.\n              return [2 /*return*/];\n            }\n            // Prevent other listeners from receiving the event\n            event.stopImmediatePropagation();\n            event.notification.close();\n            link = getLink(internalPayload);\n            if (!link) {\n              return [2 /*return*/];\n            }\n\n            url = new URL(link, self.location.href);\n            originUrl = new URL(self.location.origin);\n            if (url.host !== originUrl.host) {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, getWindowClient(url)];\n          case 1:\n            client = _c.sent();\n            if (!!client) return [3 /*break*/, 4];\n            return [4 /*yield*/, self.clients.openWindow(link)];\n          case 2:\n            client = _c.sent();\n            // Wait three seconds for the client to initialize and set up the message handler so that it\n            // can receive the message.\n            return [4 /*yield*/, sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS)];\n          case 3:\n            // Wait three seconds for the client to initialize and set up the message handler so that it\n            // can receive the message.\n            _c.sent();\n            return [3 /*break*/, 6];\n          case 4:\n            return [4 /*yield*/, client.focus()];\n          case 5:\n            client = _c.sent();\n            _c.label = 6;\n          case 6:\n            if (!client) {\n              // Window Client will not be returned if it's for a third party origin.\n              return [2 /*return*/];\n            }\n\n            internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n            internalPayload.isFirebaseMessaging = true;\n            return [2 /*return*/, client.postMessage(internalPayload)];\n        }\n      });\n    });\n  };\n  return SwController;\n}();\nfunction wrapInternalPayload(internalPayload) {\n  var _a;\n  var wrappedInternalPayload = __assign({}, internalPayload.notification);\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = (_a = {}, _a[FCM_MSG] = internalPayload, _a);\n  return wrappedInternalPayload;\n}\nfunction getMessagePayloadInternal(_a) {\n  var data = _a.data;\n  if (!data) {\n    return null;\n  }\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\nfunction getWindowClient(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    var clientList, clientList_1, clientList_1_1, client, clientUrl;\n    var e_1, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, getClientList()];\n        case 1:\n          clientList = _b.sent();\n          try {\n            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {\n              client = clientList_1_1.value;\n              clientUrl = new URL(client.url, self.location.href);\n              if (url.host === clientUrl.host) {\n                return [2 /*return*/, client];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (clientList_1_1 && !clientList_1_1.done && (_a = clientList_1.return)) _a.call(clientList_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n          return [2 /*return*/, null];\n      }\n    });\n  });\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\r\n * otherwise false.\r\n */\nfunction hasVisibleClients(clientList) {\n  return clientList.some(function (client) {\n    return client.visibilityState === 'visible' &&\n    // Ignore chrome-extension clients as that matches the background pages of extensions, which\n    // are always considered visible for some reason.\n    !client.url.startsWith('chrome-extension://');\n  });\n}\nfunction sendMessagePayloadInternalToWindows(clientList, internalPayload) {\n  var e_2, _a;\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n  try {\n    for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {\n      var client = clientList_2_1.value;\n      client.postMessage(internalPayload);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (clientList_2_1 && !clientList_2_1.done && (_a = clientList_2.return)) _a.call(clientList_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  });\n}\n\nfunction showNotification(notificationPayloadInternal) {\n  var _a;\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  var actions = notificationPayloadInternal.actions;\n  var maxActions = Notification.maxActions;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\"This browser only supports \" + maxActions + \" actions. The remaining actions will not be displayed.\");\n  }\n  return self.registration.showNotification((_a = /* title= */notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);\n}\nfunction getLink(payload) {\n  var _a, _b, _c;\n  // eslint-disable-next-line camelcase\n  var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n  if (link) {\n    return link;\n  }\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar WindowController = /** @class */function () {\n  function WindowController(firebaseDependencies) {\n    var _this = this;\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.onMessageCallback = null;\n    navigator.serviceWorker.addEventListener('message', function (e) {\n      return _this.messageEventListener(e);\n    });\n  }\n  Object.defineProperty(WindowController.prototype, \"app\", {\n    get: function get() {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  WindowController.prototype.messageEventListener = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, dataPayload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            internalPayload = event.data;\n            if (!internalPayload.isFirebaseMessaging) {\n              return [2 /*return*/];\n            }\n            // onMessageCallback is either a function or observer/subscriber.\n            // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n            // the legacy payload where some fields are in snake cases.\n            if (this.onMessageCallback && internalPayload.messageType === MessageType.PUSH_RECEIVED) {\n              if (typeof this.onMessageCallback === 'function') {\n                this.onMessageCallback(stripInternalFields(Object.assign({}, internalPayload)));\n              } else {\n                this.onMessageCallback.next(Object.assign({}, internalPayload));\n              }\n            }\n            dataPayload = internalPayload.data;\n            if (!(isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.logEvent(internalPayload.messageType, dataPayload)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.getVapidKey = function () {\n    return this.vapidKey;\n  };\n  WindowController.prototype.getSwReg = function () {\n    return this.swRegistration;\n  };\n  WindowController.prototype.getToken = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(Notification.permission === 'default')) return [3 /*break*/, 2];\n            return [4 /*yield*/, Notification.requestPermission()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (Notification.permission !== 'granted') {\n              throw ERROR_FACTORY.create(\"permission-blocked\" /* PERMISSION_BLOCKED */);\n            }\n\n            return [4 /*yield*/, this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];\n          case 4:\n            _a.sent();\n            return [2 /*return*/, getToken(this.firebaseDependencies, this.swRegistration, this.vapidKey)];\n        }\n      });\n    });\n  };\n  WindowController.prototype.updateVapidKey = function (vapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!!vapidKey) {\n          this.vapidKey = vapidKey;\n        } else if (!this.vapidKey) {\n          this.vapidKey = DEFAULT_VAPID_KEY;\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  WindowController.prototype.updateSwReg = function (swRegistration) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!swRegistration && !this.swRegistration)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.registerDefaultSw()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!swRegistration && !!this.swRegistration) {\n              return [2 /*return*/];\n            }\n\n            if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n              throw ERROR_FACTORY.create(\"invalid-sw-registration\" /* INVALID_SW_REGISTRATION */);\n            }\n\n            this.swRegistration = swRegistration;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.registerDefaultSw = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, e_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            _a = this;\n            return [4 /*yield*/, navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n              scope: DEFAULT_SW_SCOPE\n            })];\n          case 1:\n            _a.swRegistration = _b.sent();\n            // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n            // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n            // is stuck with the old version. For example,\n            // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n            // sw if there was an update.\n            this.swRegistration.update().catch(function () {\n              /* it is non blocking and we don't care if it failed */\n            });\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _b.sent();\n            throw ERROR_FACTORY.create(\"failed-service-worker-registration\" /* FAILED_DEFAULT_REGISTRATION */, {\n              browserErrorMessage: e_1.message\n            });\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.deleteToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.swRegistration) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.registerDefaultSw()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, deleteToken(this.firebaseDependencies, this.swRegistration)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Request permission if it is not currently granted.\r\n   *\r\n   * @return Resolves if the permission was granted, rejects otherwise.\r\n   *\r\n   * @deprecated Use Notification.requestPermission() instead.\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n   */\n  WindowController.prototype.requestPermission = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var permissionResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Notification.permission === 'granted') {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, Notification.requestPermission()];\n          case 1:\n            permissionResult = _a.sent();\n            if (permissionResult === 'granted') {\n              return [2 /*return*/];\n            } else if (permissionResult === 'denied') {\n              throw ERROR_FACTORY.create(\"permission-blocked\" /* PERMISSION_BLOCKED */);\n            } else {\n              throw ERROR_FACTORY.create(\"permission-default\" /* PERMISSION_DEFAULT */);\n            }\n        }\n      });\n    });\n  };\n  /**\r\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\r\n   * ServiceWorkerRegistration;}): Promise<string> instead.\r\n   */\n  WindowController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\" /* USE_VAPID_KEY_AFTER_GET_TOKEN */);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\" /* INVALID_VAPID_KEY */);\n    }\n\n    this.vapidKey = vapidKey;\n  };\n  /**\r\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\r\n   * ServiceWorkerRegistration;}): Promise<string> instead.\r\n   */\n  WindowController.prototype.useServiceWorker = function (swRegistration) {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(\"invalid-sw-registration\" /* INVALID_SW_REGISTRATION */);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(\"use-sw-after-get-token\" /* USE_SW_AFTER_GET_TOKEN */);\n    }\n\n    this.swRegistration = swRegistration;\n  };\n  /**\r\n   * @param nextOrObserver An observer object or a function triggered on message.\r\n   *\r\n   * @return The unsubscribe function for the observer.\r\n   */\n  WindowController.prototype.onMessage = function (nextOrObserver) {\n    var _this = this;\n    this.onMessageCallback = nextOrObserver;\n    return function () {\n      _this.onMessageCallback = null;\n    };\n  };\n  WindowController.prototype.setBackgroundMessageHandler = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\" /* AVAILABLE_IN_SW */);\n  };\n\n  WindowController.prototype.onBackgroundMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\" /* AVAILABLE_IN_SW */);\n  };\n  /**\r\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\r\n   * However, the plan to implement such feature was abandoned.\r\n   */\n  WindowController.prototype.onTokenRefresh = function () {\n    return function () {};\n  };\n  WindowController.prototype.logEvent = function (messageType, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventType, analytics;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventType = getEventType(messageType);\n            return [4 /*yield*/, this.firebaseDependencies.analyticsProvider.get()];\n          case 1:\n            analytics = _a.sent();\n            analytics.logEvent(eventType, {\n              /* eslint-disable camelcase */\n              message_id: data[CONSOLE_CAMPAIGN_ID],\n              message_name: data[CONSOLE_CAMPAIGN_NAME],\n              message_time: data[CONSOLE_CAMPAIGN_TIME],\n              message_device_time: Math.floor(Date.now() / 1000)\n              /* eslint-enable camelcase */\n            });\n\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return WindowController;\n}();\nfunction getEventType(messageType) {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\nfunction stripInternalFields(internalPayload) {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction extractAppConfig(app) {\n  var e_1, _a;\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n  // Required app config keys\n  var configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  var options = app.options;\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n      if (!options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\n    valueName: valueName\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MESSAGING_NAME = 'messaging';\nfunction factoryMethod(container) {\n  // Dependencies.\n  var app = container.getProvider('app').getImmediate();\n  var appConfig = extractAppConfig(app);\n  var installations = container.getProvider('installations').getImmediate();\n  var analyticsProvider = container.getProvider('analytics-internal');\n  var firebaseDependencies = {\n    app: app,\n    appConfig: appConfig,\n    installations: installations,\n    analyticsProvider: analyticsProvider\n  };\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(\"unsupported-browser\" /* UNSUPPORTED_BROWSER */);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\nfirebase.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, \"PUBLIC\" /* PUBLIC */).setServiceProps(NAMESPACE_EXPORTS));\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n */\nfunction isWindowControllerSupported() {\n  return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\nfunction isSWControllerSupported() {\n  return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}","map":{"version":3,"mappings":"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","names":["ERROR_MAP","_a","ERROR_FACTORY","ErrorFactory","DEFAULT_SW_PATH","DEFAULT_SW_SCOPE","DEFAULT_VAPID_KEY","ENDPOINT","FCM_MSG","TAG","CONSOLE_CAMPAIGN_ANALYTICS_ENABLED","CONSOLE_CAMPAIGN_ID","CONSOLE_CAMPAIGN_TIME","CONSOLE_CAMPAIGN_NAME","BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS","FOREGROUND_HANDLE_PREPARATION_TIME_MS","MessageType","arrayToBase64","array","uint8Array","Uint8Array","base64String","btoa","String","fromCharCode","replace","base64ToArray","padding","repeat","length","base64","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_DB_VERSION","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","dbNames","map","name","includes","tokenDetails","openDb","db","oldVersion","objectStoreNames","contains","objectStore","transaction","index","get","value","_b","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","deleteDb","checkTokenDetails","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","delete","appId","requestGetToken","getHeaders","headers","body","getBody","subscribeOptions","method","JSON","stringify","fetch","getEndpoint","response","json","responseData","create","errorInfo","err_1","error","message","requestUpdateToken","updateOptions","err_2","requestDeleteToken","unsubscribeOptions","err_3","projectId","installations","getToken","authToken","Headers","Accept","apiKey","web","applicationPubKey","TOKEN_EXPIRATION_MS","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","isTokenValid","console","warn","e_1","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","e_2","subscription","subscribe","userVisibleOnly","applicationServerKey","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","externalizePayload","internalPayload","payload","from","collapseKey","collapse_key","propagateNotificationPayload","propagateDataPayload","propagateFcmOptions","messagePayloadInternal","notification","title","image","data","fcmOptions","link","analyticsLabel","analytics_label","isConsoleMessage","sleep","ms","Promise","setTimeout","resolve","self","addEventListener","e","waitUntil","_this","onPush","onSubChange","onNotificationClick","Object","SwController","app","callback","isOnBackgroundMessageUsed","bgMessageHandler","nextOrObserver","_c","registration","event","getMessagePayloadInternal","debug","getClientList","clientList","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","showNotification","wrapInternalPayload","next","newSubscription","action","stopImmediatePropagation","getLink","url","URL","location","href","originUrl","origin","host","getWindowClient","client","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","err","clientList_1","clientUrl","some","visibilityState","startsWith","PUSH_RECEIVED","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","click_action","navigator","serviceWorker","messageEventListener","WindowController","onMessageCallback","stripInternalFields","assign","dataPayload","logEvent","options","requestPermission","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","update","catch","browserErrorMessage","permissionResult","eventType","getEventType","analyticsProvider","analytics","message_id","message_name","message_time","message_device_time","Math","floor","Error","extractAppConfig","getMissingValueError","configKeys","keyName","appName","messagingSenderId","valueName","MESSAGING_NAME","factoryMethod","container","getProvider","getImmediate","isSupported","NAMESPACE_EXPORTS","firebase","INTERNAL","registerComponent","Component","setServiceProps","isSWControllerSupported","isWindowControllerSupported","window","cookieEnabled","prototype","hasOwnProperty","PushSubscription"],"sources":["../src/util/errors.ts","../src/util/constants.ts","../src/interfaces/internal-message-payload.ts","../src/helpers/array-base64-translator.ts","../src/helpers/migrate-old-database.ts","../src/helpers/idb-manager.ts","../src/core/api.ts","../src/core/token-management.ts","../src/helpers/externalizePayload.ts","../src/helpers/is-console-message.ts","../src/helpers/sleep.ts","../src/controllers/sw-controller.ts","../src/controllers/window-controller.ts","../src/helpers/extract-app-config.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}