{"ast":null,"code":"import clamp from 'clamp';\nimport { getContainerToImageRatio, getSmallToLargeImageRatio } from './imageRatio';\nfunction getMinCoordinates(container, largeImage) {\n  return {\n    x: (largeImage.width - container.width) * -1,\n    y: (largeImage.height - container.height) * -1\n  };\n}\nfunction getMaxCoordinates() {\n  return {\n    x: 0,\n    y: 0\n  };\n}\nexport function getLensModeEnlargedImageCoordinates(_ref) {\n  var containerDimensions = _ref.containerDimensions,\n    lensCursorOffset = _ref.cursorOffset,\n    largeImage = _ref.largeImage,\n    position = _ref.position,\n    smallImage = _ref.smallImage;\n  var adjustedPosition = getCursorPositionAdjustedForLens(position, lensCursorOffset);\n  var ratio = getSmallToLargeImageRatio(smallImage, largeImage);\n  var coordinates = {\n    x: Math.round(adjustedPosition.x * ratio.x) * -1,\n    y: Math.round(adjustedPosition.y * ratio.y) * -1\n  };\n  var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n  var maxCoordinates = getMaxCoordinates();\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\nexport function getInPlaceEnlargedImageCoordinates(_ref2) {\n  var containerDimensions = _ref2.containerDimensions,\n    largeImage = _ref2.largeImage,\n    position = _ref2.position;\n  var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n  var maxCoordinates = getMaxCoordinates();\n  var ratio = getContainerToImageRatio(containerDimensions, largeImage);\n  var coordinates = {\n    x: Math.round(position.x * ratio.x) * -1,\n    y: Math.round(position.y * ratio.y) * -1\n  };\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\nfunction clampImageCoordinates(imageCoordinates, minCoordinates, maxCoordinates) {\n  return {\n    x: clamp(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n    y: clamp(imageCoordinates.y, minCoordinates.y, maxCoordinates.y)\n  };\n}\nfunction getCursorPositionAdjustedForLens(position, lensCursorOffset) {\n  return {\n    x: position.x - lensCursorOffset.x,\n    y: position.y - lensCursorOffset.y\n  };\n}","map":{"version":3,"names":["clamp","getContainerToImageRatio","getSmallToLargeImageRatio","getMinCoordinates","container","largeImage","x","width","y","height","getMaxCoordinates","getLensModeEnlargedImageCoordinates","_ref","containerDimensions","lensCursorOffset","cursorOffset","position","smallImage","adjustedPosition","getCursorPositionAdjustedForLens","ratio","coordinates","Math","round","minCoordinates","maxCoordinates","clampImageCoordinates","getInPlaceEnlargedImageCoordinates","_ref2","imageCoordinates"],"sources":["C:/Users/Max/Documents/GitHub/MIRC-Code-Verification/react-login/node_modules/react-image-magnify/dist/es/lib/imageCoordinates.js"],"sourcesContent":["import clamp from 'clamp';\nimport { getContainerToImageRatio, getSmallToLargeImageRatio } from './imageRatio';\n\nfunction getMinCoordinates(container, largeImage) {\n    return {\n        x: (largeImage.width - container.width) * -1,\n        y: (largeImage.height - container.height) * -1\n    };\n}\n\nfunction getMaxCoordinates() {\n    return {\n        x: 0,\n        y: 0\n    };\n}\n\nexport function getLensModeEnlargedImageCoordinates(_ref) {\n    var containerDimensions = _ref.containerDimensions,\n        lensCursorOffset = _ref.cursorOffset,\n        largeImage = _ref.largeImage,\n        position = _ref.position,\n        smallImage = _ref.smallImage;\n\n    var adjustedPosition = getCursorPositionAdjustedForLens(position, lensCursorOffset);\n    var ratio = getSmallToLargeImageRatio(smallImage, largeImage);\n    var coordinates = {\n        x: Math.round(adjustedPosition.x * ratio.x) * -1,\n        y: Math.round(adjustedPosition.y * ratio.y) * -1\n    };\n    var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n    var maxCoordinates = getMaxCoordinates();\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nexport function getInPlaceEnlargedImageCoordinates(_ref2) {\n    var containerDimensions = _ref2.containerDimensions,\n        largeImage = _ref2.largeImage,\n        position = _ref2.position;\n\n    var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n    var maxCoordinates = getMaxCoordinates();\n    var ratio = getContainerToImageRatio(containerDimensions, largeImage);\n    var coordinates = {\n        x: Math.round(position.x * ratio.x) * -1,\n        y: Math.round(position.y * ratio.y) * -1\n    };\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nfunction clampImageCoordinates(imageCoordinates, minCoordinates, maxCoordinates) {\n    return {\n        x: clamp(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n        y: clamp(imageCoordinates.y, minCoordinates.y, maxCoordinates.y)\n    };\n}\n\nfunction getCursorPositionAdjustedForLens(position, lensCursorOffset) {\n    return {\n        x: position.x - lensCursorOffset.x,\n        y: position.y - lensCursorOffset.y\n    };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}