{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n// Importing `PluralRule` polyfill from a separate package\n// results in a bundle that is larger by 1kB for some reason.\n// export { default as default } from 'intl-plural-rules-polyfill/cardinal'\nimport PluralRuleFunctions from \"./PluralRuleFunctions.js\";\nimport getPluralRulesLocale from \"./getPluralRulesLocale.js\";\n/**\r\n * `Intl.PluralRules` polyfill.\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules\r\n */\n\nvar PluralRules = /*#__PURE__*/function () {\n  function PluralRules(locale, options) {\n    _classCallCheck(this, PluralRules);\n    var locales = PluralRules.supportedLocalesOf(locale);\n    if (locales.length === 0) {\n      throw new RangeError(\"Unsupported locale: \" + locale);\n    }\n    if (options && options.type !== \"cardinal\") {\n      throw new RangeError(\"Only \\\"cardinal\\\" \\\"type\\\" is supported\");\n    }\n    this.$ = PluralRuleFunctions[getPluralRulesLocale(locales[0])];\n  }\n  _createClass(PluralRules, [{\n    key: \"select\",\n    value: function select(number) {\n      return this.$(number);\n    }\n  }], [{\n    key: \"supportedLocalesOf\",\n    value: function supportedLocalesOf(locales) {\n      if (typeof locales === \"string\") {\n        locales = [locales];\n      }\n      return locales.filter(function (locale) {\n        return PluralRuleFunctions[getPluralRulesLocale(locale)];\n      });\n    }\n  }]);\n  return PluralRules;\n}();\nexport { PluralRules as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA,OAAOA,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AAEA;AACA;AACA;AACA;;IACqBC,W;EACpB,qBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;IAAAC;IAC5B,IAAMC,OAAO,GAAGJ,WAAW,CAACK,kBAAZ,CAA+BJ,MAA/B,CAAhB;IACA,IAAIG,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;MACzB,MAAM,IAAIC,UAAJ,CAAe,yBAAyBN,MAAxC,CAAN;IACA;IACD,IAAIC,OAAO,IAAIA,OAAO,CAACM,IAAR,KAAiB,UAAhC,EAA4C;MAC3C,MAAM,IAAID,UAAJ,CAAe,yCAAf,CAAN;IACA;IACD,KAAKE,CAAL,GAASX,mBAAmB,CAACC,oBAAoB,CAACK,OAAO,CAAC,CAAD,CAAR,CAArB,CAA5B;EACA;;;WACD,gBAAOM,MAAP,EAAe;MACd,OAAO,KAAKD,CAAL,CAAOC,MAAP,CAAP;IACA;;;WACD,4BAA0BN,OAA1B,EAAmC;MAClC,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;QAChCA,OAAO,GAAG,CAACA,OAAD,CAAV;MACA;MACD,OAAOA,OAAO,CAACO,MAAR,CAAe,gBAAM;QAAA,OAAIb,mBAAmB,CAACC,oBAAoB,CAACE,MAAD,CAArB,CAAvB;MAAA,CAArB,CAAP;IACA;;;;SAnBmBD,W","names":["PluralRuleFunctions","getPluralRulesLocale","PluralRules","locale","options","_classCallCheck","locales","supportedLocalesOf","length","RangeError","type","$","number","filter"],"sources":["C:\\Users\\Max\\Documents\\GitHub\\MIRC-Code-Verification\\react-login\\node_modules\\relative-time-format\\source\\PluralRules.js"],"sourcesContent":["// Importing `PluralRule` polyfill from a separate package\r\n// results in a bundle that is larger by 1kB for some reason.\r\n// export { default as default } from 'intl-plural-rules-polyfill/cardinal'\r\n\r\nimport PluralRuleFunctions from \"./PluralRuleFunctions.js\"\r\nimport getPluralRulesLocale from \"./getPluralRulesLocale.js\"\r\n\r\n/**\r\n * `Intl.PluralRules` polyfill.\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules\r\n */\r\nexport default class PluralRules {\r\n\tconstructor(locale, options) {\r\n\t\tconst locales = PluralRules.supportedLocalesOf(locale)\r\n\t\tif (locales.length === 0) {\r\n\t\t\tthrow new RangeError(\"Unsupported locale: \" + locale)\r\n\t\t}\r\n\t\tif (options && options.type !== \"cardinal\") {\r\n\t\t\tthrow new RangeError(\"Only \\\"cardinal\\\" \\\"type\\\" is supported\")\r\n\t\t}\r\n\t\tthis.$ = PluralRuleFunctions[getPluralRulesLocale(locales[0])]\r\n\t}\r\n\tselect(number) {\r\n\t\treturn this.$(number)\r\n\t}\r\n\tstatic supportedLocalesOf(locales) {\r\n\t\tif (typeof locales === \"string\") {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\t\treturn locales.filter(locale => PluralRuleFunctions[getPluralRulesLocale(locale)])\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}