{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _detectHover = require('detect-hover');\nvar _detectHover2 = _interopRequireDefault(_detectHover);\nvar _detectPointer = require('detect-pointer');\nvar _detectPointer2 = _interopRequireDefault(_detectPointer);\nvar _detectTouchEvents = require('detect-touch-events');\nvar _detectTouchEvents2 = _interopRequireDefault(_detectTouchEvents);\nvar _detectPassiveEvents = require('detect-passive-events');\nvar _detectPassiveEvents2 = _interopRequireDefault(_detectPassiveEvents);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/*\n * detectIt object structure\n * const detectIt = {\n *   deviceType: 'mouseOnly' / 'touchOnly' / 'hybrid',\n *   passiveEvents: boolean,\n *   hasTouch: boolean,\n *   hasMouse: boolean,\n *   maxTouchPoints: number,\n *   primaryHover: 'hover' / 'none',\n *   primaryPointer: 'fine' / 'coarse' / 'none',\n *   state: {\n *     detectHover,\n *     detectPointer,\n *     detectTouchEvents,\n *     detectPassiveEvents,\n *   },\n *   update() {...},\n * }\n */\n\nfunction determineDeviceType(hasTouch, anyHover, anyFine, state) {\n  // A hybrid device is one that both hasTouch and any input device can hover\n  // or has a fine pointer.\n  if (hasTouch && (anyHover || anyFine)) return 'hybrid';\n\n  // workaround for browsers that have the touch events api,\n  // and have implemented Level 4 media queries but not the\n  // hover and pointer media queries, so the tests are all false (notable Firefox)\n  // if it hasTouch, no pointer and hover support, and on an android assume it's touchOnly\n  // if it hasTouch, no pointer and hover support, and not on an android assume it's a hybrid\n  if (hasTouch && Object.keys(state.detectHover).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectHover[key] === false;\n  }) && Object.keys(state.detectPointer).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectPointer[key] === false;\n  })) {\n    if (window.navigator && /android/.test(window.navigator.userAgent.toLowerCase())) {\n      return 'touchOnly';\n    }\n    return 'hybrid';\n  }\n\n  // In almost all cases a device that doesn’t support touch will have a mouse,\n  // but there may be rare exceptions. Note that it doesn’t work to do additional tests\n  // based on hover and pointer media queries as older browsers don’t support these.\n  // Essentially, 'mouseOnly' is the default.\n  return hasTouch ? 'touchOnly' : 'mouseOnly';\n}\nvar detectIt = {\n  state: {\n    detectHover: _detectHover2.default,\n    detectPointer: _detectPointer2.default,\n    detectTouchEvents: _detectTouchEvents2.default,\n    detectPassiveEvents: _detectPassiveEvents2.default\n  },\n  update: function update() {\n    detectIt.state.detectHover.update();\n    detectIt.state.detectPointer.update();\n    detectIt.state.detectTouchEvents.update();\n    detectIt.state.detectPassiveEvents.update();\n    detectIt.updateOnlyOwnProperties();\n  },\n  updateOnlyOwnProperties: function updateOnlyOwnProperties() {\n    if (typeof window !== 'undefined') {\n      detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;\n      detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;\n      detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);\n      detectIt.hasMouse = detectIt.deviceType !== 'touchOnly';\n      detectIt.primaryInput = detectIt.deviceType === 'mouseOnly' && 'mouse' || detectIt.deviceType === 'touchOnly' && 'touch' ||\n      // deviceType is hybrid:\n      detectIt.state.detectHover.hover && 'mouse' || detectIt.state.detectHover.none && 'touch' ||\n      // if there's no support for hover media queries but detectIt determined it's\n      // a hybrid  device, then assume it's a mouse first device\n      'mouse';\n\n      // issue with Windows Chrome on hybrid devices starting in version 59 where\n      // media queries represent a touch only device, so if the browser is an\n      // affected Windows Chrome version and hasTouch,\n      // then assume it's a hybrid with primaryInput mouse\n      // see https://github.com/rafrex/detect-it/issues/8\n      var isAffectedWindowsChromeVersion = /windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && parseInt(/Chrome\\/([0-9.]+)/.exec(navigator.userAgent)[1], 10) >= 59;\n      if (isAffectedWindowsChromeVersion && detectIt.hasTouch) {\n        detectIt.deviceType = 'hybrid';\n        detectIt.hasMouse = true;\n        detectIt.primaryInput = 'mouse';\n      }\n    }\n  }\n};\ndetectIt.updateOnlyOwnProperties();\nexports.default = detectIt;","map":{"version":3,"names":["Object","defineProperty","exports","value","_detectHover","require","_detectHover2","_interopRequireDefault","_detectPointer","_detectPointer2","_detectTouchEvents","_detectTouchEvents2","_detectPassiveEvents","_detectPassiveEvents2","obj","__esModule","default","determineDeviceType","hasTouch","anyHover","anyFine","state","keys","detectHover","filter","key","every","detectPointer","window","navigator","test","userAgent","toLowerCase","detectIt","detectTouchEvents","detectPassiveEvents","update","updateOnlyOwnProperties","passiveEvents","hasSupport","deviceType","hasMouse","primaryInput","hover","none","isAffectedWindowsChromeVersion","parseInt","exec"],"sources":["/Users/jennifer/Desktop/react-login/node_modules/detect-it/lib/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _detectHover = require('detect-hover');\n\nvar _detectHover2 = _interopRequireDefault(_detectHover);\n\nvar _detectPointer = require('detect-pointer');\n\nvar _detectPointer2 = _interopRequireDefault(_detectPointer);\n\nvar _detectTouchEvents = require('detect-touch-events');\n\nvar _detectTouchEvents2 = _interopRequireDefault(_detectTouchEvents);\n\nvar _detectPassiveEvents = require('detect-passive-events');\n\nvar _detectPassiveEvents2 = _interopRequireDefault(_detectPassiveEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * detectIt object structure\n * const detectIt = {\n *   deviceType: 'mouseOnly' / 'touchOnly' / 'hybrid',\n *   passiveEvents: boolean,\n *   hasTouch: boolean,\n *   hasMouse: boolean,\n *   maxTouchPoints: number,\n *   primaryHover: 'hover' / 'none',\n *   primaryPointer: 'fine' / 'coarse' / 'none',\n *   state: {\n *     detectHover,\n *     detectPointer,\n *     detectTouchEvents,\n *     detectPassiveEvents,\n *   },\n *   update() {...},\n * }\n */\n\nfunction determineDeviceType(hasTouch, anyHover, anyFine, state) {\n  // A hybrid device is one that both hasTouch and any input device can hover\n  // or has a fine pointer.\n  if (hasTouch && (anyHover || anyFine)) return 'hybrid';\n\n  // workaround for browsers that have the touch events api,\n  // and have implemented Level 4 media queries but not the\n  // hover and pointer media queries, so the tests are all false (notable Firefox)\n  // if it hasTouch, no pointer and hover support, and on an android assume it's touchOnly\n  // if it hasTouch, no pointer and hover support, and not on an android assume it's a hybrid\n  if (hasTouch && Object.keys(state.detectHover).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectHover[key] === false;\n  }) && Object.keys(state.detectPointer).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectPointer[key] === false;\n  })) {\n    if (window.navigator && /android/.test(window.navigator.userAgent.toLowerCase())) {\n      return 'touchOnly';\n    }\n    return 'hybrid';\n  }\n\n  // In almost all cases a device that doesn’t support touch will have a mouse,\n  // but there may be rare exceptions. Note that it doesn’t work to do additional tests\n  // based on hover and pointer media queries as older browsers don’t support these.\n  // Essentially, 'mouseOnly' is the default.\n  return hasTouch ? 'touchOnly' : 'mouseOnly';\n}\n\nvar detectIt = {\n  state: {\n    detectHover: _detectHover2.default,\n    detectPointer: _detectPointer2.default,\n    detectTouchEvents: _detectTouchEvents2.default,\n    detectPassiveEvents: _detectPassiveEvents2.default\n  },\n  update: function update() {\n    detectIt.state.detectHover.update();\n    detectIt.state.detectPointer.update();\n    detectIt.state.detectTouchEvents.update();\n    detectIt.state.detectPassiveEvents.update();\n    detectIt.updateOnlyOwnProperties();\n  },\n  updateOnlyOwnProperties: function updateOnlyOwnProperties() {\n    if (typeof window !== 'undefined') {\n      detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;\n\n      detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;\n\n      detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);\n\n      detectIt.hasMouse = detectIt.deviceType !== 'touchOnly';\n\n      detectIt.primaryInput = detectIt.deviceType === 'mouseOnly' && 'mouse' || detectIt.deviceType === 'touchOnly' && 'touch' ||\n      // deviceType is hybrid:\n      detectIt.state.detectHover.hover && 'mouse' || detectIt.state.detectHover.none && 'touch' ||\n      // if there's no support for hover media queries but detectIt determined it's\n      // a hybrid  device, then assume it's a mouse first device\n      'mouse';\n\n      // issue with Windows Chrome on hybrid devices starting in version 59 where\n      // media queries represent a touch only device, so if the browser is an\n      // affected Windows Chrome version and hasTouch,\n      // then assume it's a hybrid with primaryInput mouse\n      // see https://github.com/rafrex/detect-it/issues/8\n      var isAffectedWindowsChromeVersion = /windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && parseInt(/Chrome\\/([0-9.]+)/.exec(navigator.userAgent)[1], 10) >= 59;\n\n      if (isAffectedWindowsChromeVersion && detectIt.hasTouch) {\n        detectIt.deviceType = 'hybrid';\n        detectIt.hasMouse = true;\n        detectIt.primaryInput = 'mouse';\n      }\n    }\n  }\n};\n\ndetectIt.updateOnlyOwnProperties();\nexports.default = detectIt;"],"mappings":"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"},"metadata":{},"sourceType":"script"}