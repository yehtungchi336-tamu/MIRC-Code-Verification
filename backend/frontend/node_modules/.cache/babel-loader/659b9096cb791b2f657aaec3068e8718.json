{"ast":null,"code":"import _slicedToArray from \"/Users/jinsonwu/Desktop/MIRC-Code-Verification/backend/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ElapsedTime(props) {\n  _s();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    elapsedTime = _useState2[0],\n    setElapsedTime = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    regdate = _useState4[0],\n    setRegDate = _useState4[1];\n  var _useState5 = useState(props.providedtime),\n    _useState6 = _slicedToArray(_useState5, 2),\n    providedtime = _useState6[0],\n    setProvidedTime = _useState6[1];\n  function msToTime(duration) {\n    var date = new Date();\n    var minutes = Math.floor(duration / (1000 * 60) % 60),\n      hours = Math.floor(duration / (1000 * 60 * 60) % 24);\n    var pday = providedtime.getDate();\n    var pmonth = providedtime.getMonth();\n    var pyear = providedtime.getFullYear();\n    var day = date.getDate();\n    var month = date.getMonth();\n    var year = date.getFullYear();\n    if (pday === day && pmonth === month && pyear === year && hours < 24) {\n      if (hours < 1) {\n        if (minutes < 1) return \"A few seconds ago\";else if (minutes === 1) return \"A minute ago\";else return minutes + \" minutes ago\";\n      } else if (hours === 1) return \"One hour ago\";else return hours + \" hours ago\";\n    } else {\n      return providedtime.toString().split(' ').slice(1, 4).toString().replaceAll(',', ' ');\n    }\n  }\n  useEffect(function () {\n    var storedDate = new Date(providedtime);\n    var nowDate = new Date();\n    var elapsedTime = nowDate.getTime() - storedDate.getTime();\n    setElapsedTime(msToTime(elapsedTime));\n  }, [props.updateelapsed, providedtime]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: elapsedTime\n  }, void 0, false);\n}\n_s(ElapsedTime, \"4RV/5+nHvG255rJRUcFUHSVYeKY=\");\n_c = ElapsedTime;\nexport default ElapsedTime;\nvar _c;\n$RefreshReg$(_c, \"ElapsedTime\");","map":{"version":3,"names":["React","useState","useEffect","ElapsedTime","props","elapsedTime","setElapsedTime","regdate","setRegDate","providedtime","setProvidedTime","msToTime","duration","date","Date","minutes","Math","floor","hours","pday","getDate","pmonth","getMonth","pyear","getFullYear","day","month","year","toString","split","slice","replaceAll","storedDate","nowDate","getTime","updateelapsed"],"sources":["/Users/jinsonwu/Desktop/MIRC-Code-Verification/backend/frontend/src/components/Elapsedtime.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nfunction ElapsedTime(props) {\r\n \r\n  const [elapsedTime, setElapsedTime] = useState('')\r\n  const [regdate, setRegDate] = useState('')\r\n  const [providedtime, setProvidedTime] = useState(props.providedtime)\r\n\r\n  function msToTime(duration) {\r\n    let date = new Date()\r\n    let minutes = Math.floor((duration / (1000 * 60)) % 60),\r\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)\r\n    let pday = providedtime.getDate()\r\n    let pmonth = providedtime.getMonth()\r\n    let pyear = providedtime.getFullYear()\r\n    let day = date.getDate()\r\n    let month = date.getMonth()\r\n    let year = date.getFullYear() \r\n    if(pday===day && pmonth===month && pyear===year && hours < 24) {\r\n      if(hours < 1) {\r\n        if(minutes < 1)\r\n          return \"A few seconds ago\"\r\n        else if (minutes === 1)\r\n          return \"A minute ago\"\r\n        else \r\n          return minutes+\" minutes ago\"\r\n      }\r\n      else if(hours === 1) \r\n        return \"One hour ago\"\r\n      else \r\n        return hours+\" hours ago\"\r\n    }\r\n    else {\r\n      return providedtime.toString().split(' ').slice(1,4).toString().replaceAll(',',' ') \r\n    }\r\n  } \r\n\r\n  useEffect(() => {\r\n    var storedDate = new Date(providedtime)\r\n    var nowDate = new Date()\r\n    var elapsedTime = nowDate.getTime() - storedDate.getTime()\r\n    setElapsedTime(msToTime(elapsedTime))\r\n  },[props.updateelapsed, providedtime])\r\n\r\n  return <>{elapsedTime}</> \r\n}\r\n\r\nexport default ElapsedTime"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAA;AAAA;AAEhD,SAASC,WAAW,CAACC,KAAK,EAAE;EAAA;EAE1B,gBAAsCH,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CI,WAAW;IAAEC,cAAc;EAClC,iBAA8BL,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnCM,OAAO;IAAEC,UAAU;EAC1B,iBAAwCP,QAAQ,CAACG,KAAK,CAACK,YAAY,CAAC;IAAA;IAA7DA,YAAY;IAAEC,eAAe;EAEpC,SAASC,QAAQ,CAACC,QAAQ,EAAE;IAC1B,IAAIC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACrB,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEL,QAAQ,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;MACvDM,KAAK,GAAGF,IAAI,CAACC,KAAK,CAAEL,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;IACtD,IAAIO,IAAI,GAAGV,YAAY,CAACW,OAAO,EAAE;IACjC,IAAIC,MAAM,GAAGZ,YAAY,CAACa,QAAQ,EAAE;IACpC,IAAIC,KAAK,GAAGd,YAAY,CAACe,WAAW,EAAE;IACtC,IAAIC,GAAG,GAAGZ,IAAI,CAACO,OAAO,EAAE;IACxB,IAAIM,KAAK,GAAGb,IAAI,CAACS,QAAQ,EAAE;IAC3B,IAAIK,IAAI,GAAGd,IAAI,CAACW,WAAW,EAAE;IAC7B,IAAGL,IAAI,KAAGM,GAAG,IAAIJ,MAAM,KAAGK,KAAK,IAAIH,KAAK,KAAGI,IAAI,IAAIT,KAAK,GAAG,EAAE,EAAE;MAC7D,IAAGA,KAAK,GAAG,CAAC,EAAE;QACZ,IAAGH,OAAO,GAAG,CAAC,EACZ,OAAO,mBAAmB,MACvB,IAAIA,OAAO,KAAK,CAAC,EACpB,OAAO,cAAc,MAErB,OAAOA,OAAO,GAAC,cAAc;MACjC,CAAC,MACI,IAAGG,KAAK,KAAK,CAAC,EACjB,OAAO,cAAc,MAErB,OAAOA,KAAK,GAAC,YAAY;IAC7B,CAAC,MACI;MACH,OAAOT,YAAY,CAACmB,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAACF,QAAQ,EAAE,CAACG,UAAU,CAAC,GAAG,EAAC,GAAG,CAAC;IACrF;EACF;EAEA7B,SAAS,CAAC,YAAM;IACd,IAAI8B,UAAU,GAAG,IAAIlB,IAAI,CAACL,YAAY,CAAC;IACvC,IAAIwB,OAAO,GAAG,IAAInB,IAAI,EAAE;IACxB,IAAIT,WAAW,GAAG4B,OAAO,CAACC,OAAO,EAAE,GAAGF,UAAU,CAACE,OAAO,EAAE;IAC1D5B,cAAc,CAACK,QAAQ,CAACN,WAAW,CAAC,CAAC;EACvC,CAAC,EAAC,CAACD,KAAK,CAAC+B,aAAa,EAAE1B,YAAY,CAAC,CAAC;EAEtC,oBAAO;IAAA,UAAGJ;EAAW,iBAAI;AAC3B;AAAC,GA3CQF,WAAW;AAAA,KAAXA,WAAW;AA6CpB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module"}