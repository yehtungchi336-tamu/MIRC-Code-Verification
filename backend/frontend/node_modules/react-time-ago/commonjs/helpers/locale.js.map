{"version":3,"sources":["../../source/helpers/locale.js"],"names":["intlDateTimeFormatSupportedLocale","intlDateTimeFormatSupported","locales","Intl","DateTimeFormat","supportedLocalesOf","isIntlAvailable"],"mappings":";;;;;;;;QAMgBA,iC,GAAAA,iC;QAWAC,2B,GAAAA,2B;AAjBhB;;;;;;AAMO,SAASD,iCAAT,CAA2CE,OAA3C,EAAoD;AAC1D;AACA,KAAID,6BAAJ,EAAmC;AAClC,SAAOE,KAAKC,cAAL,CAAoBC,kBAApB,CAAuCH,OAAvC,EAAgD,CAAhD,CAAP;AACA;AACD;;AAED;;;;AAIO,SAASD,2BAAT,GAAuC;AAC7C;AACA;AACA;AACA,KAAMK,kBAAkB,QAAOH,IAAP,yCAAOA,IAAP,OAAgB,QAAxC;AACA,QAAOG,mBAAmB,OAAOH,KAAKC,cAAZ,KAA+B,UAAzD;AACA","file":"locale.js","sourcesContent":["/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}\r\n"]}